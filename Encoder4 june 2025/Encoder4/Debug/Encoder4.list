
Encoder4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b18  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f58  08009f58  0000b130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009f58  08009f58  0000b130  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009f58  08009f58  0000b130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f58  08009f58  0000af58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f5c  08009f5c  0000af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  08009f60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000006f8  20000130  0800a090  0000b130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800a090  0000b828  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3b3  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac3  00000000  00000000  0002550b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00028fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142a  00000000  00000000  0002a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ad8  00000000  00000000  0002bde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f248  00000000  00000000  0004c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d223a  00000000  00000000  0006bb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dd3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006218  00000000  00000000  0013dd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00143f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000130 	.word	0x20000130
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009bb0 	.word	0x08009bb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000134 	.word	0x20000134
 8000104:	08009bb0 	.word	0x08009bb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9d1 	bl	80007a4 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f959 	bl	80006c4 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9c3 	bl	80007a4 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9b9 	bl	80007a4 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f967 	bl	8000714 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f95d 	bl	8000714 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fd99 	bl	8000fb0 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fb2f 	bl	8000ae8 <__aeabi_fsub>
 800048a:	f000 fd91 	bl	8000fb0 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fdiv>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4646      	mov	r6, r8
 800049c:	464f      	mov	r7, r9
 800049e:	46d6      	mov	lr, sl
 80004a0:	0245      	lsls	r5, r0, #9
 80004a2:	b5c0      	push	{r6, r7, lr}
 80004a4:	0fc3      	lsrs	r3, r0, #31
 80004a6:	0047      	lsls	r7, r0, #1
 80004a8:	4698      	mov	r8, r3
 80004aa:	1c0e      	adds	r6, r1, #0
 80004ac:	0a6d      	lsrs	r5, r5, #9
 80004ae:	0e3f      	lsrs	r7, r7, #24
 80004b0:	d05b      	beq.n	800056a <__aeabi_fdiv+0xd2>
 80004b2:	2fff      	cmp	r7, #255	@ 0xff
 80004b4:	d021      	beq.n	80004fa <__aeabi_fdiv+0x62>
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	00ed      	lsls	r5, r5, #3
 80004ba:	04db      	lsls	r3, r3, #19
 80004bc:	431d      	orrs	r5, r3
 80004be:	2300      	movs	r3, #0
 80004c0:	4699      	mov	r9, r3
 80004c2:	469a      	mov	sl, r3
 80004c4:	3f7f      	subs	r7, #127	@ 0x7f
 80004c6:	0274      	lsls	r4, r6, #9
 80004c8:	0073      	lsls	r3, r6, #1
 80004ca:	0a64      	lsrs	r4, r4, #9
 80004cc:	0e1b      	lsrs	r3, r3, #24
 80004ce:	0ff6      	lsrs	r6, r6, #31
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d020      	beq.n	8000516 <__aeabi_fdiv+0x7e>
 80004d4:	2bff      	cmp	r3, #255	@ 0xff
 80004d6:	d043      	beq.n	8000560 <__aeabi_fdiv+0xc8>
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	2000      	movs	r0, #0
 80004dc:	00e4      	lsls	r4, r4, #3
 80004de:	04d2      	lsls	r2, r2, #19
 80004e0:	4314      	orrs	r4, r2
 80004e2:	3b7f      	subs	r3, #127	@ 0x7f
 80004e4:	4642      	mov	r2, r8
 80004e6:	1aff      	subs	r7, r7, r3
 80004e8:	464b      	mov	r3, r9
 80004ea:	4072      	eors	r2, r6
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	d900      	bls.n	80004f2 <__aeabi_fdiv+0x5a>
 80004f0:	e09d      	b.n	800062e <__aeabi_fdiv+0x196>
 80004f2:	4971      	ldr	r1, [pc, #452]	@ (80006b8 <__aeabi_fdiv+0x220>)
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	58cb      	ldr	r3, [r1, r3]
 80004f8:	469f      	mov	pc, r3
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d15a      	bne.n	80005b4 <__aeabi_fdiv+0x11c>
 80004fe:	2308      	movs	r3, #8
 8000500:	4699      	mov	r9, r3
 8000502:	3b06      	subs	r3, #6
 8000504:	0274      	lsls	r4, r6, #9
 8000506:	469a      	mov	sl, r3
 8000508:	0073      	lsls	r3, r6, #1
 800050a:	27ff      	movs	r7, #255	@ 0xff
 800050c:	0a64      	lsrs	r4, r4, #9
 800050e:	0e1b      	lsrs	r3, r3, #24
 8000510:	0ff6      	lsrs	r6, r6, #31
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1de      	bne.n	80004d4 <__aeabi_fdiv+0x3c>
 8000516:	2c00      	cmp	r4, #0
 8000518:	d13b      	bne.n	8000592 <__aeabi_fdiv+0xfa>
 800051a:	2301      	movs	r3, #1
 800051c:	4642      	mov	r2, r8
 800051e:	4649      	mov	r1, r9
 8000520:	4072      	eors	r2, r6
 8000522:	4319      	orrs	r1, r3
 8000524:	290e      	cmp	r1, #14
 8000526:	d818      	bhi.n	800055a <__aeabi_fdiv+0xc2>
 8000528:	4864      	ldr	r0, [pc, #400]	@ (80006bc <__aeabi_fdiv+0x224>)
 800052a:	0089      	lsls	r1, r1, #2
 800052c:	5841      	ldr	r1, [r0, r1]
 800052e:	468f      	mov	pc, r1
 8000530:	4653      	mov	r3, sl
 8000532:	2b02      	cmp	r3, #2
 8000534:	d100      	bne.n	8000538 <__aeabi_fdiv+0xa0>
 8000536:	e0b8      	b.n	80006aa <__aeabi_fdiv+0x212>
 8000538:	2b03      	cmp	r3, #3
 800053a:	d06e      	beq.n	800061a <__aeabi_fdiv+0x182>
 800053c:	4642      	mov	r2, r8
 800053e:	002c      	movs	r4, r5
 8000540:	2b01      	cmp	r3, #1
 8000542:	d140      	bne.n	80005c6 <__aeabi_fdiv+0x12e>
 8000544:	2000      	movs	r0, #0
 8000546:	2400      	movs	r4, #0
 8000548:	05c0      	lsls	r0, r0, #23
 800054a:	4320      	orrs	r0, r4
 800054c:	07d2      	lsls	r2, r2, #31
 800054e:	4310      	orrs	r0, r2
 8000550:	bce0      	pop	{r5, r6, r7}
 8000552:	46ba      	mov	sl, r7
 8000554:	46b1      	mov	r9, r6
 8000556:	46a8      	mov	r8, r5
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055a:	20ff      	movs	r0, #255	@ 0xff
 800055c:	2400      	movs	r4, #0
 800055e:	e7f3      	b.n	8000548 <__aeabi_fdiv+0xb0>
 8000560:	2c00      	cmp	r4, #0
 8000562:	d120      	bne.n	80005a6 <__aeabi_fdiv+0x10e>
 8000564:	2302      	movs	r3, #2
 8000566:	3fff      	subs	r7, #255	@ 0xff
 8000568:	e7d8      	b.n	800051c <__aeabi_fdiv+0x84>
 800056a:	2d00      	cmp	r5, #0
 800056c:	d105      	bne.n	800057a <__aeabi_fdiv+0xe2>
 800056e:	2304      	movs	r3, #4
 8000570:	4699      	mov	r9, r3
 8000572:	3b03      	subs	r3, #3
 8000574:	2700      	movs	r7, #0
 8000576:	469a      	mov	sl, r3
 8000578:	e7a5      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 800057a:	0028      	movs	r0, r5
 800057c:	f002 f90a 	bl	8002794 <__clzsi2>
 8000580:	2776      	movs	r7, #118	@ 0x76
 8000582:	1f43      	subs	r3, r0, #5
 8000584:	409d      	lsls	r5, r3
 8000586:	2300      	movs	r3, #0
 8000588:	427f      	negs	r7, r7
 800058a:	4699      	mov	r9, r3
 800058c:	469a      	mov	sl, r3
 800058e:	1a3f      	subs	r7, r7, r0
 8000590:	e799      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 8000592:	0020      	movs	r0, r4
 8000594:	f002 f8fe 	bl	8002794 <__clzsi2>
 8000598:	1f43      	subs	r3, r0, #5
 800059a:	409c      	lsls	r4, r3
 800059c:	2376      	movs	r3, #118	@ 0x76
 800059e:	425b      	negs	r3, r3
 80005a0:	1a1b      	subs	r3, r3, r0
 80005a2:	2000      	movs	r0, #0
 80005a4:	e79e      	b.n	80004e4 <__aeabi_fdiv+0x4c>
 80005a6:	2303      	movs	r3, #3
 80005a8:	464a      	mov	r2, r9
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4691      	mov	r9, r2
 80005ae:	2003      	movs	r0, #3
 80005b0:	33fc      	adds	r3, #252	@ 0xfc
 80005b2:	e797      	b.n	80004e4 <__aeabi_fdiv+0x4c>
 80005b4:	230c      	movs	r3, #12
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	27ff      	movs	r7, #255	@ 0xff
 80005bc:	469a      	mov	sl, r3
 80005be:	e782      	b.n	80004c6 <__aeabi_fdiv+0x2e>
 80005c0:	2803      	cmp	r0, #3
 80005c2:	d02c      	beq.n	800061e <__aeabi_fdiv+0x186>
 80005c4:	0032      	movs	r2, r6
 80005c6:	0038      	movs	r0, r7
 80005c8:	307f      	adds	r0, #127	@ 0x7f
 80005ca:	2800      	cmp	r0, #0
 80005cc:	dd47      	ble.n	800065e <__aeabi_fdiv+0x1c6>
 80005ce:	0763      	lsls	r3, r4, #29
 80005d0:	d004      	beq.n	80005dc <__aeabi_fdiv+0x144>
 80005d2:	230f      	movs	r3, #15
 80005d4:	4023      	ands	r3, r4
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d000      	beq.n	80005dc <__aeabi_fdiv+0x144>
 80005da:	3404      	adds	r4, #4
 80005dc:	0123      	lsls	r3, r4, #4
 80005de:	d503      	bpl.n	80005e8 <__aeabi_fdiv+0x150>
 80005e0:	0038      	movs	r0, r7
 80005e2:	4b37      	ldr	r3, [pc, #220]	@ (80006c0 <__aeabi_fdiv+0x228>)
 80005e4:	3080      	adds	r0, #128	@ 0x80
 80005e6:	401c      	ands	r4, r3
 80005e8:	28fe      	cmp	r0, #254	@ 0xfe
 80005ea:	dcb6      	bgt.n	800055a <__aeabi_fdiv+0xc2>
 80005ec:	01a4      	lsls	r4, r4, #6
 80005ee:	0a64      	lsrs	r4, r4, #9
 80005f0:	b2c0      	uxtb	r0, r0
 80005f2:	e7a9      	b.n	8000548 <__aeabi_fdiv+0xb0>
 80005f4:	2480      	movs	r4, #128	@ 0x80
 80005f6:	2200      	movs	r2, #0
 80005f8:	20ff      	movs	r0, #255	@ 0xff
 80005fa:	03e4      	lsls	r4, r4, #15
 80005fc:	e7a4      	b.n	8000548 <__aeabi_fdiv+0xb0>
 80005fe:	2380      	movs	r3, #128	@ 0x80
 8000600:	03db      	lsls	r3, r3, #15
 8000602:	421d      	tst	r5, r3
 8000604:	d001      	beq.n	800060a <__aeabi_fdiv+0x172>
 8000606:	421c      	tst	r4, r3
 8000608:	d00b      	beq.n	8000622 <__aeabi_fdiv+0x18a>
 800060a:	2480      	movs	r4, #128	@ 0x80
 800060c:	03e4      	lsls	r4, r4, #15
 800060e:	432c      	orrs	r4, r5
 8000610:	0264      	lsls	r4, r4, #9
 8000612:	4642      	mov	r2, r8
 8000614:	20ff      	movs	r0, #255	@ 0xff
 8000616:	0a64      	lsrs	r4, r4, #9
 8000618:	e796      	b.n	8000548 <__aeabi_fdiv+0xb0>
 800061a:	4646      	mov	r6, r8
 800061c:	002c      	movs	r4, r5
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	03db      	lsls	r3, r3, #15
 8000622:	431c      	orrs	r4, r3
 8000624:	0264      	lsls	r4, r4, #9
 8000626:	0032      	movs	r2, r6
 8000628:	20ff      	movs	r0, #255	@ 0xff
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	e78c      	b.n	8000548 <__aeabi_fdiv+0xb0>
 800062e:	016d      	lsls	r5, r5, #5
 8000630:	0160      	lsls	r0, r4, #5
 8000632:	4285      	cmp	r5, r0
 8000634:	d22d      	bcs.n	8000692 <__aeabi_fdiv+0x1fa>
 8000636:	231b      	movs	r3, #27
 8000638:	2400      	movs	r4, #0
 800063a:	3f01      	subs	r7, #1
 800063c:	2601      	movs	r6, #1
 800063e:	0029      	movs	r1, r5
 8000640:	0064      	lsls	r4, r4, #1
 8000642:	006d      	lsls	r5, r5, #1
 8000644:	2900      	cmp	r1, #0
 8000646:	db01      	blt.n	800064c <__aeabi_fdiv+0x1b4>
 8000648:	4285      	cmp	r5, r0
 800064a:	d301      	bcc.n	8000650 <__aeabi_fdiv+0x1b8>
 800064c:	1a2d      	subs	r5, r5, r0
 800064e:	4334      	orrs	r4, r6
 8000650:	3b01      	subs	r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f3      	bne.n	800063e <__aeabi_fdiv+0x1a6>
 8000656:	1e6b      	subs	r3, r5, #1
 8000658:	419d      	sbcs	r5, r3
 800065a:	432c      	orrs	r4, r5
 800065c:	e7b3      	b.n	80005c6 <__aeabi_fdiv+0x12e>
 800065e:	2301      	movs	r3, #1
 8000660:	1a1b      	subs	r3, r3, r0
 8000662:	2b1b      	cmp	r3, #27
 8000664:	dd00      	ble.n	8000668 <__aeabi_fdiv+0x1d0>
 8000666:	e76d      	b.n	8000544 <__aeabi_fdiv+0xac>
 8000668:	0021      	movs	r1, r4
 800066a:	379e      	adds	r7, #158	@ 0x9e
 800066c:	40d9      	lsrs	r1, r3
 800066e:	40bc      	lsls	r4, r7
 8000670:	000b      	movs	r3, r1
 8000672:	1e61      	subs	r1, r4, #1
 8000674:	418c      	sbcs	r4, r1
 8000676:	4323      	orrs	r3, r4
 8000678:	0759      	lsls	r1, r3, #29
 800067a:	d004      	beq.n	8000686 <__aeabi_fdiv+0x1ee>
 800067c:	210f      	movs	r1, #15
 800067e:	4019      	ands	r1, r3
 8000680:	2904      	cmp	r1, #4
 8000682:	d000      	beq.n	8000686 <__aeabi_fdiv+0x1ee>
 8000684:	3304      	adds	r3, #4
 8000686:	0159      	lsls	r1, r3, #5
 8000688:	d413      	bmi.n	80006b2 <__aeabi_fdiv+0x21a>
 800068a:	019b      	lsls	r3, r3, #6
 800068c:	2000      	movs	r0, #0
 800068e:	0a5c      	lsrs	r4, r3, #9
 8000690:	e75a      	b.n	8000548 <__aeabi_fdiv+0xb0>
 8000692:	231a      	movs	r3, #26
 8000694:	2401      	movs	r4, #1
 8000696:	1a2d      	subs	r5, r5, r0
 8000698:	e7d0      	b.n	800063c <__aeabi_fdiv+0x1a4>
 800069a:	1e98      	subs	r0, r3, #2
 800069c:	4243      	negs	r3, r0
 800069e:	4158      	adcs	r0, r3
 80006a0:	4240      	negs	r0, r0
 80006a2:	0032      	movs	r2, r6
 80006a4:	2400      	movs	r4, #0
 80006a6:	b2c0      	uxtb	r0, r0
 80006a8:	e74e      	b.n	8000548 <__aeabi_fdiv+0xb0>
 80006aa:	4642      	mov	r2, r8
 80006ac:	20ff      	movs	r0, #255	@ 0xff
 80006ae:	2400      	movs	r4, #0
 80006b0:	e74a      	b.n	8000548 <__aeabi_fdiv+0xb0>
 80006b2:	2001      	movs	r0, #1
 80006b4:	2400      	movs	r4, #0
 80006b6:	e747      	b.n	8000548 <__aeabi_fdiv+0xb0>
 80006b8:	08009cc8 	.word	0x08009cc8
 80006bc:	08009d08 	.word	0x08009d08
 80006c0:	f7ffffff 	.word	0xf7ffffff

080006c4 <__eqsf2>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	0042      	lsls	r2, r0, #1
 80006c8:	024e      	lsls	r6, r1, #9
 80006ca:	004c      	lsls	r4, r1, #1
 80006cc:	0245      	lsls	r5, r0, #9
 80006ce:	0a6d      	lsrs	r5, r5, #9
 80006d0:	0e12      	lsrs	r2, r2, #24
 80006d2:	0fc3      	lsrs	r3, r0, #31
 80006d4:	0a76      	lsrs	r6, r6, #9
 80006d6:	0e24      	lsrs	r4, r4, #24
 80006d8:	0fc9      	lsrs	r1, r1, #31
 80006da:	2aff      	cmp	r2, #255	@ 0xff
 80006dc:	d010      	beq.n	8000700 <__eqsf2+0x3c>
 80006de:	2cff      	cmp	r4, #255	@ 0xff
 80006e0:	d00c      	beq.n	80006fc <__eqsf2+0x38>
 80006e2:	2001      	movs	r0, #1
 80006e4:	42a2      	cmp	r2, r4
 80006e6:	d10a      	bne.n	80006fe <__eqsf2+0x3a>
 80006e8:	42b5      	cmp	r5, r6
 80006ea:	d108      	bne.n	80006fe <__eqsf2+0x3a>
 80006ec:	428b      	cmp	r3, r1
 80006ee:	d00f      	beq.n	8000710 <__eqsf2+0x4c>
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	d104      	bne.n	80006fe <__eqsf2+0x3a>
 80006f4:	0028      	movs	r0, r5
 80006f6:	1e43      	subs	r3, r0, #1
 80006f8:	4198      	sbcs	r0, r3
 80006fa:	e000      	b.n	80006fe <__eqsf2+0x3a>
 80006fc:	2001      	movs	r0, #1
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	2001      	movs	r0, #1
 8000702:	2cff      	cmp	r4, #255	@ 0xff
 8000704:	d1fb      	bne.n	80006fe <__eqsf2+0x3a>
 8000706:	4335      	orrs	r5, r6
 8000708:	d1f9      	bne.n	80006fe <__eqsf2+0x3a>
 800070a:	404b      	eors	r3, r1
 800070c:	0018      	movs	r0, r3
 800070e:	e7f6      	b.n	80006fe <__eqsf2+0x3a>
 8000710:	2000      	movs	r0, #0
 8000712:	e7f4      	b.n	80006fe <__eqsf2+0x3a>

08000714 <__gesf2>:
 8000714:	b530      	push	{r4, r5, lr}
 8000716:	0042      	lsls	r2, r0, #1
 8000718:	0244      	lsls	r4, r0, #9
 800071a:	024d      	lsls	r5, r1, #9
 800071c:	0fc3      	lsrs	r3, r0, #31
 800071e:	0048      	lsls	r0, r1, #1
 8000720:	0a64      	lsrs	r4, r4, #9
 8000722:	0e12      	lsrs	r2, r2, #24
 8000724:	0a6d      	lsrs	r5, r5, #9
 8000726:	0e00      	lsrs	r0, r0, #24
 8000728:	0fc9      	lsrs	r1, r1, #31
 800072a:	2aff      	cmp	r2, #255	@ 0xff
 800072c:	d018      	beq.n	8000760 <__gesf2+0x4c>
 800072e:	28ff      	cmp	r0, #255	@ 0xff
 8000730:	d00a      	beq.n	8000748 <__gesf2+0x34>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d11e      	bne.n	8000774 <__gesf2+0x60>
 8000736:	2800      	cmp	r0, #0
 8000738:	d10a      	bne.n	8000750 <__gesf2+0x3c>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d029      	beq.n	8000792 <__gesf2+0x7e>
 800073e:	2c00      	cmp	r4, #0
 8000740:	d12d      	bne.n	800079e <__gesf2+0x8a>
 8000742:	0048      	lsls	r0, r1, #1
 8000744:	3801      	subs	r0, #1
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	2d00      	cmp	r5, #0
 800074a:	d125      	bne.n	8000798 <__gesf2+0x84>
 800074c:	2a00      	cmp	r2, #0
 800074e:	d101      	bne.n	8000754 <__gesf2+0x40>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d0f6      	beq.n	8000742 <__gesf2+0x2e>
 8000754:	428b      	cmp	r3, r1
 8000756:	d019      	beq.n	800078c <__gesf2+0x78>
 8000758:	2001      	movs	r0, #1
 800075a:	425b      	negs	r3, r3
 800075c:	4318      	orrs	r0, r3
 800075e:	e7f2      	b.n	8000746 <__gesf2+0x32>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d119      	bne.n	8000798 <__gesf2+0x84>
 8000764:	28ff      	cmp	r0, #255	@ 0xff
 8000766:	d1f7      	bne.n	8000758 <__gesf2+0x44>
 8000768:	2d00      	cmp	r5, #0
 800076a:	d115      	bne.n	8000798 <__gesf2+0x84>
 800076c:	2000      	movs	r0, #0
 800076e:	428b      	cmp	r3, r1
 8000770:	d1f2      	bne.n	8000758 <__gesf2+0x44>
 8000772:	e7e8      	b.n	8000746 <__gesf2+0x32>
 8000774:	2800      	cmp	r0, #0
 8000776:	d0ef      	beq.n	8000758 <__gesf2+0x44>
 8000778:	428b      	cmp	r3, r1
 800077a:	d1ed      	bne.n	8000758 <__gesf2+0x44>
 800077c:	4282      	cmp	r2, r0
 800077e:	dceb      	bgt.n	8000758 <__gesf2+0x44>
 8000780:	db04      	blt.n	800078c <__gesf2+0x78>
 8000782:	42ac      	cmp	r4, r5
 8000784:	d8e8      	bhi.n	8000758 <__gesf2+0x44>
 8000786:	2000      	movs	r0, #0
 8000788:	42ac      	cmp	r4, r5
 800078a:	d2dc      	bcs.n	8000746 <__gesf2+0x32>
 800078c:	0058      	lsls	r0, r3, #1
 800078e:	3801      	subs	r0, #1
 8000790:	e7d9      	b.n	8000746 <__gesf2+0x32>
 8000792:	2c00      	cmp	r4, #0
 8000794:	d0d7      	beq.n	8000746 <__gesf2+0x32>
 8000796:	e7df      	b.n	8000758 <__gesf2+0x44>
 8000798:	2002      	movs	r0, #2
 800079a:	4240      	negs	r0, r0
 800079c:	e7d3      	b.n	8000746 <__gesf2+0x32>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d1da      	bne.n	8000758 <__gesf2+0x44>
 80007a2:	e7ee      	b.n	8000782 <__gesf2+0x6e>

080007a4 <__lesf2>:
 80007a4:	b530      	push	{r4, r5, lr}
 80007a6:	0042      	lsls	r2, r0, #1
 80007a8:	0244      	lsls	r4, r0, #9
 80007aa:	024d      	lsls	r5, r1, #9
 80007ac:	0fc3      	lsrs	r3, r0, #31
 80007ae:	0048      	lsls	r0, r1, #1
 80007b0:	0a64      	lsrs	r4, r4, #9
 80007b2:	0e12      	lsrs	r2, r2, #24
 80007b4:	0a6d      	lsrs	r5, r5, #9
 80007b6:	0e00      	lsrs	r0, r0, #24
 80007b8:	0fc9      	lsrs	r1, r1, #31
 80007ba:	2aff      	cmp	r2, #255	@ 0xff
 80007bc:	d017      	beq.n	80007ee <__lesf2+0x4a>
 80007be:	28ff      	cmp	r0, #255	@ 0xff
 80007c0:	d00a      	beq.n	80007d8 <__lesf2+0x34>
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d11b      	bne.n	80007fe <__lesf2+0x5a>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d10a      	bne.n	80007e0 <__lesf2+0x3c>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d01d      	beq.n	800080a <__lesf2+0x66>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d12d      	bne.n	800082e <__lesf2+0x8a>
 80007d2:	0048      	lsls	r0, r1, #1
 80007d4:	3801      	subs	r0, #1
 80007d6:	e011      	b.n	80007fc <__lesf2+0x58>
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d10e      	bne.n	80007fa <__lesf2+0x56>
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d101      	bne.n	80007e4 <__lesf2+0x40>
 80007e0:	2c00      	cmp	r4, #0
 80007e2:	d0f6      	beq.n	80007d2 <__lesf2+0x2e>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d10c      	bne.n	8000802 <__lesf2+0x5e>
 80007e8:	0058      	lsls	r0, r3, #1
 80007ea:	3801      	subs	r0, #1
 80007ec:	e006      	b.n	80007fc <__lesf2+0x58>
 80007ee:	2c00      	cmp	r4, #0
 80007f0:	d103      	bne.n	80007fa <__lesf2+0x56>
 80007f2:	28ff      	cmp	r0, #255	@ 0xff
 80007f4:	d105      	bne.n	8000802 <__lesf2+0x5e>
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d015      	beq.n	8000826 <__lesf2+0x82>
 80007fa:	2002      	movs	r0, #2
 80007fc:	bd30      	pop	{r4, r5, pc}
 80007fe:	2800      	cmp	r0, #0
 8000800:	d106      	bne.n	8000810 <__lesf2+0x6c>
 8000802:	2001      	movs	r0, #1
 8000804:	425b      	negs	r3, r3
 8000806:	4318      	orrs	r0, r3
 8000808:	e7f8      	b.n	80007fc <__lesf2+0x58>
 800080a:	2c00      	cmp	r4, #0
 800080c:	d0f6      	beq.n	80007fc <__lesf2+0x58>
 800080e:	e7f8      	b.n	8000802 <__lesf2+0x5e>
 8000810:	428b      	cmp	r3, r1
 8000812:	d1f6      	bne.n	8000802 <__lesf2+0x5e>
 8000814:	4282      	cmp	r2, r0
 8000816:	dcf4      	bgt.n	8000802 <__lesf2+0x5e>
 8000818:	dbe6      	blt.n	80007e8 <__lesf2+0x44>
 800081a:	42ac      	cmp	r4, r5
 800081c:	d8f1      	bhi.n	8000802 <__lesf2+0x5e>
 800081e:	2000      	movs	r0, #0
 8000820:	42ac      	cmp	r4, r5
 8000822:	d2eb      	bcs.n	80007fc <__lesf2+0x58>
 8000824:	e7e0      	b.n	80007e8 <__lesf2+0x44>
 8000826:	2000      	movs	r0, #0
 8000828:	428b      	cmp	r3, r1
 800082a:	d1ea      	bne.n	8000802 <__lesf2+0x5e>
 800082c:	e7e6      	b.n	80007fc <__lesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d1e7      	bne.n	8000802 <__lesf2+0x5e>
 8000832:	e7f2      	b.n	800081a <__lesf2+0x76>

08000834 <__aeabi_fmul>:
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	464f      	mov	r7, r9
 8000838:	4646      	mov	r6, r8
 800083a:	46d6      	mov	lr, sl
 800083c:	0044      	lsls	r4, r0, #1
 800083e:	b5c0      	push	{r6, r7, lr}
 8000840:	0246      	lsls	r6, r0, #9
 8000842:	1c0f      	adds	r7, r1, #0
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e24      	lsrs	r4, r4, #24
 8000848:	0fc5      	lsrs	r5, r0, #31
 800084a:	2c00      	cmp	r4, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fmul+0x1c>
 800084e:	e0da      	b.n	8000a06 <__aeabi_fmul+0x1d2>
 8000850:	2cff      	cmp	r4, #255	@ 0xff
 8000852:	d074      	beq.n	800093e <__aeabi_fmul+0x10a>
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	00f6      	lsls	r6, r6, #3
 8000858:	04db      	lsls	r3, r3, #19
 800085a:	431e      	orrs	r6, r3
 800085c:	2300      	movs	r3, #0
 800085e:	4699      	mov	r9, r3
 8000860:	469a      	mov	sl, r3
 8000862:	3c7f      	subs	r4, #127	@ 0x7f
 8000864:	027b      	lsls	r3, r7, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	4698      	mov	r8, r3
 800086a:	007b      	lsls	r3, r7, #1
 800086c:	0e1b      	lsrs	r3, r3, #24
 800086e:	0fff      	lsrs	r7, r7, #31
 8000870:	2b00      	cmp	r3, #0
 8000872:	d074      	beq.n	800095e <__aeabi_fmul+0x12a>
 8000874:	2bff      	cmp	r3, #255	@ 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fmul+0x46>
 8000878:	e08e      	b.n	8000998 <__aeabi_fmul+0x164>
 800087a:	4642      	mov	r2, r8
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	00d2      	lsls	r2, r2, #3
 8000880:	04c9      	lsls	r1, r1, #19
 8000882:	4311      	orrs	r1, r2
 8000884:	3b7f      	subs	r3, #127	@ 0x7f
 8000886:	002a      	movs	r2, r5
 8000888:	18e4      	adds	r4, r4, r3
 800088a:	464b      	mov	r3, r9
 800088c:	407a      	eors	r2, r7
 800088e:	4688      	mov	r8, r1
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	2b0a      	cmp	r3, #10
 8000894:	dc75      	bgt.n	8000982 <__aeabi_fmul+0x14e>
 8000896:	464b      	mov	r3, r9
 8000898:	2000      	movs	r0, #0
 800089a:	2b02      	cmp	r3, #2
 800089c:	dd0f      	ble.n	80008be <__aeabi_fmul+0x8a>
 800089e:	4649      	mov	r1, r9
 80008a0:	2301      	movs	r3, #1
 80008a2:	408b      	lsls	r3, r1
 80008a4:	21a6      	movs	r1, #166	@ 0xa6
 80008a6:	00c9      	lsls	r1, r1, #3
 80008a8:	420b      	tst	r3, r1
 80008aa:	d169      	bne.n	8000980 <__aeabi_fmul+0x14c>
 80008ac:	2190      	movs	r1, #144	@ 0x90
 80008ae:	0089      	lsls	r1, r1, #2
 80008b0:	420b      	tst	r3, r1
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fmul+0x82>
 80008b4:	e100      	b.n	8000ab8 <__aeabi_fmul+0x284>
 80008b6:	2188      	movs	r1, #136	@ 0x88
 80008b8:	4219      	tst	r1, r3
 80008ba:	d000      	beq.n	80008be <__aeabi_fmul+0x8a>
 80008bc:	e0f5      	b.n	8000aaa <__aeabi_fmul+0x276>
 80008be:	4641      	mov	r1, r8
 80008c0:	0409      	lsls	r1, r1, #16
 80008c2:	0c09      	lsrs	r1, r1, #16
 80008c4:	4643      	mov	r3, r8
 80008c6:	0008      	movs	r0, r1
 80008c8:	0c35      	lsrs	r5, r6, #16
 80008ca:	0436      	lsls	r6, r6, #16
 80008cc:	0c1b      	lsrs	r3, r3, #16
 80008ce:	0c36      	lsrs	r6, r6, #16
 80008d0:	4370      	muls	r0, r6
 80008d2:	4369      	muls	r1, r5
 80008d4:	435e      	muls	r6, r3
 80008d6:	435d      	muls	r5, r3
 80008d8:	1876      	adds	r6, r6, r1
 80008da:	0c03      	lsrs	r3, r0, #16
 80008dc:	199b      	adds	r3, r3, r6
 80008de:	4299      	cmp	r1, r3
 80008e0:	d903      	bls.n	80008ea <__aeabi_fmul+0xb6>
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	0249      	lsls	r1, r1, #9
 80008e6:	468c      	mov	ip, r1
 80008e8:	4465      	add	r5, ip
 80008ea:	0400      	lsls	r0, r0, #16
 80008ec:	0419      	lsls	r1, r3, #16
 80008ee:	0c00      	lsrs	r0, r0, #16
 80008f0:	1809      	adds	r1, r1, r0
 80008f2:	018e      	lsls	r6, r1, #6
 80008f4:	1e70      	subs	r0, r6, #1
 80008f6:	4186      	sbcs	r6, r0
 80008f8:	0c1b      	lsrs	r3, r3, #16
 80008fa:	0e89      	lsrs	r1, r1, #26
 80008fc:	195b      	adds	r3, r3, r5
 80008fe:	430e      	orrs	r6, r1
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	431e      	orrs	r6, r3
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	d46c      	bmi.n	80009e2 <__aeabi_fmul+0x1ae>
 8000908:	0023      	movs	r3, r4
 800090a:	337f      	adds	r3, #127	@ 0x7f
 800090c:	2b00      	cmp	r3, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_fmul+0xde>
 8000910:	e0b1      	b.n	8000a76 <__aeabi_fmul+0x242>
 8000912:	0015      	movs	r5, r2
 8000914:	0771      	lsls	r1, r6, #29
 8000916:	d00b      	beq.n	8000930 <__aeabi_fmul+0xfc>
 8000918:	200f      	movs	r0, #15
 800091a:	0021      	movs	r1, r4
 800091c:	4030      	ands	r0, r6
 800091e:	2804      	cmp	r0, #4
 8000920:	d006      	beq.n	8000930 <__aeabi_fmul+0xfc>
 8000922:	3604      	adds	r6, #4
 8000924:	0132      	lsls	r2, r6, #4
 8000926:	d503      	bpl.n	8000930 <__aeabi_fmul+0xfc>
 8000928:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae4 <__aeabi_fmul+0x2b0>)
 800092a:	401e      	ands	r6, r3
 800092c:	000b      	movs	r3, r1
 800092e:	3380      	adds	r3, #128	@ 0x80
 8000930:	2bfe      	cmp	r3, #254	@ 0xfe
 8000932:	dd00      	ble.n	8000936 <__aeabi_fmul+0x102>
 8000934:	e0bd      	b.n	8000ab2 <__aeabi_fmul+0x27e>
 8000936:	01b2      	lsls	r2, r6, #6
 8000938:	0a52      	lsrs	r2, r2, #9
 800093a:	b2db      	uxtb	r3, r3
 800093c:	e048      	b.n	80009d0 <__aeabi_fmul+0x19c>
 800093e:	2e00      	cmp	r6, #0
 8000940:	d000      	beq.n	8000944 <__aeabi_fmul+0x110>
 8000942:	e092      	b.n	8000a6a <__aeabi_fmul+0x236>
 8000944:	2308      	movs	r3, #8
 8000946:	4699      	mov	r9, r3
 8000948:	3b06      	subs	r3, #6
 800094a:	469a      	mov	sl, r3
 800094c:	027b      	lsls	r3, r7, #9
 800094e:	0a5b      	lsrs	r3, r3, #9
 8000950:	4698      	mov	r8, r3
 8000952:	007b      	lsls	r3, r7, #1
 8000954:	24ff      	movs	r4, #255	@ 0xff
 8000956:	0e1b      	lsrs	r3, r3, #24
 8000958:	0fff      	lsrs	r7, r7, #31
 800095a:	2b00      	cmp	r3, #0
 800095c:	d18a      	bne.n	8000874 <__aeabi_fmul+0x40>
 800095e:	4642      	mov	r2, r8
 8000960:	2a00      	cmp	r2, #0
 8000962:	d164      	bne.n	8000a2e <__aeabi_fmul+0x1fa>
 8000964:	4649      	mov	r1, r9
 8000966:	3201      	adds	r2, #1
 8000968:	4311      	orrs	r1, r2
 800096a:	4689      	mov	r9, r1
 800096c:	290a      	cmp	r1, #10
 800096e:	dc08      	bgt.n	8000982 <__aeabi_fmul+0x14e>
 8000970:	407d      	eors	r5, r7
 8000972:	2001      	movs	r0, #1
 8000974:	b2ea      	uxtb	r2, r5
 8000976:	2902      	cmp	r1, #2
 8000978:	dc91      	bgt.n	800089e <__aeabi_fmul+0x6a>
 800097a:	0015      	movs	r5, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e027      	b.n	80009d0 <__aeabi_fmul+0x19c>
 8000980:	0015      	movs	r5, r2
 8000982:	4653      	mov	r3, sl
 8000984:	2b02      	cmp	r3, #2
 8000986:	d100      	bne.n	800098a <__aeabi_fmul+0x156>
 8000988:	e093      	b.n	8000ab2 <__aeabi_fmul+0x27e>
 800098a:	2b03      	cmp	r3, #3
 800098c:	d01a      	beq.n	80009c4 <__aeabi_fmul+0x190>
 800098e:	2b01      	cmp	r3, #1
 8000990:	d12c      	bne.n	80009ec <__aeabi_fmul+0x1b8>
 8000992:	2300      	movs	r3, #0
 8000994:	2200      	movs	r2, #0
 8000996:	e01b      	b.n	80009d0 <__aeabi_fmul+0x19c>
 8000998:	4643      	mov	r3, r8
 800099a:	34ff      	adds	r4, #255	@ 0xff
 800099c:	2b00      	cmp	r3, #0
 800099e:	d055      	beq.n	8000a4c <__aeabi_fmul+0x218>
 80009a0:	2103      	movs	r1, #3
 80009a2:	464b      	mov	r3, r9
 80009a4:	430b      	orrs	r3, r1
 80009a6:	0019      	movs	r1, r3
 80009a8:	2b0a      	cmp	r3, #10
 80009aa:	dc00      	bgt.n	80009ae <__aeabi_fmul+0x17a>
 80009ac:	e092      	b.n	8000ad4 <__aeabi_fmul+0x2a0>
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fmul+0x180>
 80009b2:	e08c      	b.n	8000ace <__aeabi_fmul+0x29a>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4216      	tst	r6, r2
 80009ba:	d003      	beq.n	80009c4 <__aeabi_fmul+0x190>
 80009bc:	4643      	mov	r3, r8
 80009be:	4213      	tst	r3, r2
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fmul+0x190>
 80009c2:	e07d      	b.n	8000ac0 <__aeabi_fmul+0x28c>
 80009c4:	2280      	movs	r2, #128	@ 0x80
 80009c6:	03d2      	lsls	r2, r2, #15
 80009c8:	4332      	orrs	r2, r6
 80009ca:	0252      	lsls	r2, r2, #9
 80009cc:	0a52      	lsrs	r2, r2, #9
 80009ce:	23ff      	movs	r3, #255	@ 0xff
 80009d0:	05d8      	lsls	r0, r3, #23
 80009d2:	07ed      	lsls	r5, r5, #31
 80009d4:	4310      	orrs	r0, r2
 80009d6:	4328      	orrs	r0, r5
 80009d8:	bce0      	pop	{r5, r6, r7}
 80009da:	46ba      	mov	sl, r7
 80009dc:	46b1      	mov	r9, r6
 80009de:	46a8      	mov	r8, r5
 80009e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e2:	2301      	movs	r3, #1
 80009e4:	0015      	movs	r5, r2
 80009e6:	0871      	lsrs	r1, r6, #1
 80009e8:	401e      	ands	r6, r3
 80009ea:	430e      	orrs	r6, r1
 80009ec:	0023      	movs	r3, r4
 80009ee:	3380      	adds	r3, #128	@ 0x80
 80009f0:	1c61      	adds	r1, r4, #1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dd41      	ble.n	8000a7a <__aeabi_fmul+0x246>
 80009f6:	0772      	lsls	r2, r6, #29
 80009f8:	d094      	beq.n	8000924 <__aeabi_fmul+0xf0>
 80009fa:	220f      	movs	r2, #15
 80009fc:	4032      	ands	r2, r6
 80009fe:	2a04      	cmp	r2, #4
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fmul+0x1d0>
 8000a02:	e78e      	b.n	8000922 <__aeabi_fmul+0xee>
 8000a04:	e78e      	b.n	8000924 <__aeabi_fmul+0xf0>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d105      	bne.n	8000a16 <__aeabi_fmul+0x1e2>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	4699      	mov	r9, r3
 8000a0e:	3b03      	subs	r3, #3
 8000a10:	2400      	movs	r4, #0
 8000a12:	469a      	mov	sl, r3
 8000a14:	e726      	b.n	8000864 <__aeabi_fmul+0x30>
 8000a16:	0030      	movs	r0, r6
 8000a18:	f001 febc 	bl	8002794 <__clzsi2>
 8000a1c:	2476      	movs	r4, #118	@ 0x76
 8000a1e:	1f43      	subs	r3, r0, #5
 8000a20:	409e      	lsls	r6, r3
 8000a22:	2300      	movs	r3, #0
 8000a24:	4264      	negs	r4, r4
 8000a26:	4699      	mov	r9, r3
 8000a28:	469a      	mov	sl, r3
 8000a2a:	1a24      	subs	r4, r4, r0
 8000a2c:	e71a      	b.n	8000864 <__aeabi_fmul+0x30>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	f001 feb0 	bl	8002794 <__clzsi2>
 8000a34:	464b      	mov	r3, r9
 8000a36:	1a24      	subs	r4, r4, r0
 8000a38:	3c76      	subs	r4, #118	@ 0x76
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	dca1      	bgt.n	8000982 <__aeabi_fmul+0x14e>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	3805      	subs	r0, #5
 8000a42:	4083      	lsls	r3, r0
 8000a44:	407d      	eors	r5, r7
 8000a46:	4698      	mov	r8, r3
 8000a48:	b2ea      	uxtb	r2, r5
 8000a4a:	e724      	b.n	8000896 <__aeabi_fmul+0x62>
 8000a4c:	464a      	mov	r2, r9
 8000a4e:	3302      	adds	r3, #2
 8000a50:	4313      	orrs	r3, r2
 8000a52:	002a      	movs	r2, r5
 8000a54:	407a      	eors	r2, r7
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	2b0a      	cmp	r3, #10
 8000a5a:	dc92      	bgt.n	8000982 <__aeabi_fmul+0x14e>
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	0015      	movs	r5, r2
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d026      	beq.n	8000ab2 <__aeabi_fmul+0x27e>
 8000a64:	4699      	mov	r9, r3
 8000a66:	2002      	movs	r0, #2
 8000a68:	e719      	b.n	800089e <__aeabi_fmul+0x6a>
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	3b09      	subs	r3, #9
 8000a70:	24ff      	movs	r4, #255	@ 0xff
 8000a72:	469a      	mov	sl, r3
 8000a74:	e6f6      	b.n	8000864 <__aeabi_fmul+0x30>
 8000a76:	0015      	movs	r5, r2
 8000a78:	0021      	movs	r1, r4
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b1b      	cmp	r3, #27
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_fmul+0x250>
 8000a82:	e786      	b.n	8000992 <__aeabi_fmul+0x15e>
 8000a84:	319e      	adds	r1, #158	@ 0x9e
 8000a86:	0032      	movs	r2, r6
 8000a88:	408e      	lsls	r6, r1
 8000a8a:	40da      	lsrs	r2, r3
 8000a8c:	1e73      	subs	r3, r6, #1
 8000a8e:	419e      	sbcs	r6, r3
 8000a90:	4332      	orrs	r2, r6
 8000a92:	0753      	lsls	r3, r2, #29
 8000a94:	d004      	beq.n	8000aa0 <__aeabi_fmul+0x26c>
 8000a96:	230f      	movs	r3, #15
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d000      	beq.n	8000aa0 <__aeabi_fmul+0x26c>
 8000a9e:	3204      	adds	r2, #4
 8000aa0:	0153      	lsls	r3, r2, #5
 8000aa2:	d510      	bpl.n	8000ac6 <__aeabi_fmul+0x292>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e792      	b.n	80009d0 <__aeabi_fmul+0x19c>
 8000aaa:	003d      	movs	r5, r7
 8000aac:	4646      	mov	r6, r8
 8000aae:	4682      	mov	sl, r0
 8000ab0:	e767      	b.n	8000982 <__aeabi_fmul+0x14e>
 8000ab2:	23ff      	movs	r3, #255	@ 0xff
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e78b      	b.n	80009d0 <__aeabi_fmul+0x19c>
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	2500      	movs	r5, #0
 8000abc:	03d2      	lsls	r2, r2, #15
 8000abe:	e786      	b.n	80009ce <__aeabi_fmul+0x19a>
 8000ac0:	003d      	movs	r5, r7
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	e783      	b.n	80009ce <__aeabi_fmul+0x19a>
 8000ac6:	0192      	lsls	r2, r2, #6
 8000ac8:	2300      	movs	r3, #0
 8000aca:	0a52      	lsrs	r2, r2, #9
 8000acc:	e780      	b.n	80009d0 <__aeabi_fmul+0x19c>
 8000ace:	003d      	movs	r5, r7
 8000ad0:	4646      	mov	r6, r8
 8000ad2:	e777      	b.n	80009c4 <__aeabi_fmul+0x190>
 8000ad4:	002a      	movs	r2, r5
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	407a      	eors	r2, r7
 8000ada:	408b      	lsls	r3, r1
 8000adc:	2003      	movs	r0, #3
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	e6e9      	b.n	80008b6 <__aeabi_fmul+0x82>
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	f7ffffff 	.word	0xf7ffffff

08000ae8 <__aeabi_fsub>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	4647      	mov	r7, r8
 8000aec:	46ce      	mov	lr, r9
 8000aee:	0243      	lsls	r3, r0, #9
 8000af0:	b580      	push	{r7, lr}
 8000af2:	0a5f      	lsrs	r7, r3, #9
 8000af4:	099b      	lsrs	r3, r3, #6
 8000af6:	0045      	lsls	r5, r0, #1
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	469c      	mov	ip, r3
 8000afc:	024b      	lsls	r3, r1, #9
 8000afe:	0fc4      	lsrs	r4, r0, #31
 8000b00:	0fce      	lsrs	r6, r1, #31
 8000b02:	0e2d      	lsrs	r5, r5, #24
 8000b04:	0a58      	lsrs	r0, r3, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0999      	lsrs	r1, r3, #6
 8000b0a:	2aff      	cmp	r2, #255	@ 0xff
 8000b0c:	d06b      	beq.n	8000be6 <__aeabi_fsub+0xfe>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	405e      	eors	r6, r3
 8000b12:	1aab      	subs	r3, r5, r2
 8000b14:	42b4      	cmp	r4, r6
 8000b16:	d04b      	beq.n	8000bb0 <__aeabi_fsub+0xc8>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_fsub+0x36>
 8000b1c:	e0ff      	b.n	8000d1e <__aeabi_fsub+0x236>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x3c>
 8000b22:	e088      	b.n	8000c36 <__aeabi_fsub+0x14e>
 8000b24:	2dff      	cmp	r5, #255	@ 0xff
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x42>
 8000b28:	e0ef      	b.n	8000d0a <__aeabi_fsub+0x222>
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	04d2      	lsls	r2, r2, #19
 8000b2e:	4311      	orrs	r1, r2
 8000b30:	2001      	movs	r0, #1
 8000b32:	2b1b      	cmp	r3, #27
 8000b34:	dc08      	bgt.n	8000b48 <__aeabi_fsub+0x60>
 8000b36:	0008      	movs	r0, r1
 8000b38:	2220      	movs	r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	4099      	lsls	r1, r3
 8000b40:	000b      	movs	r3, r1
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	4193      	sbcs	r3, r2
 8000b46:	4318      	orrs	r0, r3
 8000b48:	4663      	mov	r3, ip
 8000b4a:	1a1b      	subs	r3, r3, r0
 8000b4c:	469c      	mov	ip, r3
 8000b4e:	4663      	mov	r3, ip
 8000b50:	015b      	lsls	r3, r3, #5
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_fsub+0x6e>
 8000b54:	e0cd      	b.n	8000cf2 <__aeabi_fsub+0x20a>
 8000b56:	4663      	mov	r3, ip
 8000b58:	019f      	lsls	r7, r3, #6
 8000b5a:	09bf      	lsrs	r7, r7, #6
 8000b5c:	0038      	movs	r0, r7
 8000b5e:	f001 fe19 	bl	8002794 <__clzsi2>
 8000b62:	003b      	movs	r3, r7
 8000b64:	3805      	subs	r0, #5
 8000b66:	4083      	lsls	r3, r0
 8000b68:	4285      	cmp	r5, r0
 8000b6a:	dc00      	bgt.n	8000b6e <__aeabi_fsub+0x86>
 8000b6c:	e0a2      	b.n	8000cb4 <__aeabi_fsub+0x1cc>
 8000b6e:	4ab7      	ldr	r2, [pc, #732]	@ (8000e4c <__aeabi_fsub+0x364>)
 8000b70:	1a2d      	subs	r5, r5, r0
 8000b72:	401a      	ands	r2, r3
 8000b74:	4694      	mov	ip, r2
 8000b76:	075a      	lsls	r2, r3, #29
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x94>
 8000b7a:	e0c3      	b.n	8000d04 <__aeabi_fsub+0x21c>
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d100      	bne.n	8000b86 <__aeabi_fsub+0x9e>
 8000b84:	e0be      	b.n	8000d04 <__aeabi_fsub+0x21c>
 8000b86:	2304      	movs	r3, #4
 8000b88:	4698      	mov	r8, r3
 8000b8a:	44c4      	add	ip, r8
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	015b      	lsls	r3, r3, #5
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_fsub+0xac>
 8000b92:	e0b7      	b.n	8000d04 <__aeabi_fsub+0x21c>
 8000b94:	1c68      	adds	r0, r5, #1
 8000b96:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fsub+0xb4>
 8000b9a:	e0a5      	b.n	8000ce8 <__aeabi_fsub+0x200>
 8000b9c:	20ff      	movs	r0, #255	@ 0xff
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	05c0      	lsls	r0, r0, #23
 8000ba2:	4310      	orrs	r0, r2
 8000ba4:	07e4      	lsls	r4, r4, #31
 8000ba6:	4320      	orrs	r0, r4
 8000ba8:	bcc0      	pop	{r6, r7}
 8000baa:	46b9      	mov	r9, r7
 8000bac:	46b0      	mov	r8, r6
 8000bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_fsub+0xce>
 8000bb4:	e1eb      	b.n	8000f8e <__aeabi_fsub+0x4a6>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d046      	beq.n	8000c48 <__aeabi_fsub+0x160>
 8000bba:	2dff      	cmp	r5, #255	@ 0xff
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fsub+0xd8>
 8000bbe:	e0a4      	b.n	8000d0a <__aeabi_fsub+0x222>
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	04d2      	lsls	r2, r2, #19
 8000bc4:	4311      	orrs	r1, r2
 8000bc6:	2b1b      	cmp	r3, #27
 8000bc8:	dc00      	bgt.n	8000bcc <__aeabi_fsub+0xe4>
 8000bca:	e0fb      	b.n	8000dc4 <__aeabi_fsub+0x2dc>
 8000bcc:	2305      	movs	r3, #5
 8000bce:	4698      	mov	r8, r3
 8000bd0:	002b      	movs	r3, r5
 8000bd2:	44c4      	add	ip, r8
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	08d7      	lsrs	r7, r2, #3
 8000bd8:	2bff      	cmp	r3, #255	@ 0xff
 8000bda:	d100      	bne.n	8000bde <__aeabi_fsub+0xf6>
 8000bdc:	e095      	b.n	8000d0a <__aeabi_fsub+0x222>
 8000bde:	027a      	lsls	r2, r7, #9
 8000be0:	0a52      	lsrs	r2, r2, #9
 8000be2:	b2d8      	uxtb	r0, r3
 8000be4:	e7dc      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000be6:	002b      	movs	r3, r5
 8000be8:	3bff      	subs	r3, #255	@ 0xff
 8000bea:	4699      	mov	r9, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d118      	bne.n	8000c22 <__aeabi_fsub+0x13a>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	405e      	eors	r6, r3
 8000bf4:	42b4      	cmp	r4, r6
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x112>
 8000bf8:	e0ca      	b.n	8000d90 <__aeabi_fsub+0x2a8>
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d02d      	beq.n	8000c5c <__aeabi_fsub+0x174>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fsub+0x11e>
 8000c04:	e13c      	b.n	8000e80 <__aeabi_fsub+0x398>
 8000c06:	23ff      	movs	r3, #255	@ 0xff
 8000c08:	4664      	mov	r4, ip
 8000c0a:	2c00      	cmp	r4, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x128>
 8000c0e:	e15f      	b.n	8000ed0 <__aeabi_fsub+0x3e8>
 8000c10:	1e5d      	subs	r5, r3, #1
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fsub+0x130>
 8000c16:	e174      	b.n	8000f02 <__aeabi_fsub+0x41a>
 8000c18:	0034      	movs	r4, r6
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d074      	beq.n	8000d08 <__aeabi_fsub+0x220>
 8000c1e:	002b      	movs	r3, r5
 8000c20:	e103      	b.n	8000e2a <__aeabi_fsub+0x342>
 8000c22:	42b4      	cmp	r4, r6
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fsub+0x140>
 8000c26:	e09c      	b.n	8000d62 <__aeabi_fsub+0x27a>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d017      	beq.n	8000c5c <__aeabi_fsub+0x174>
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d0ea      	beq.n	8000c06 <__aeabi_fsub+0x11e>
 8000c30:	0007      	movs	r7, r0
 8000c32:	0034      	movs	r4, r6
 8000c34:	e06c      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d0cc      	beq.n	8000bd4 <__aeabi_fsub+0xec>
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d02b      	beq.n	8000c98 <__aeabi_fsub+0x1b0>
 8000c40:	2bff      	cmp	r3, #255	@ 0xff
 8000c42:	d062      	beq.n	8000d0a <__aeabi_fsub+0x222>
 8000c44:	0013      	movs	r3, r2
 8000c46:	e773      	b.n	8000b30 <__aeabi_fsub+0x48>
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d0c3      	beq.n	8000bd4 <__aeabi_fsub+0xec>
 8000c4c:	1e5a      	subs	r2, r3, #1
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d100      	bne.n	8000c54 <__aeabi_fsub+0x16c>
 8000c52:	e11e      	b.n	8000e92 <__aeabi_fsub+0x3aa>
 8000c54:	2bff      	cmp	r3, #255	@ 0xff
 8000c56:	d058      	beq.n	8000d0a <__aeabi_fsub+0x222>
 8000c58:	0013      	movs	r3, r2
 8000c5a:	e7b4      	b.n	8000bc6 <__aeabi_fsub+0xde>
 8000c5c:	22fe      	movs	r2, #254	@ 0xfe
 8000c5e:	1c6b      	adds	r3, r5, #1
 8000c60:	421a      	tst	r2, r3
 8000c62:	d10d      	bne.n	8000c80 <__aeabi_fsub+0x198>
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d060      	beq.n	8000d2a <__aeabi_fsub+0x242>
 8000c68:	4663      	mov	r3, ip
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_fsub+0x188>
 8000c6e:	e120      	b.n	8000eb2 <__aeabi_fsub+0x3ca>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d000      	beq.n	8000c76 <__aeabi_fsub+0x18e>
 8000c74:	e128      	b.n	8000ec8 <__aeabi_fsub+0x3e0>
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	2400      	movs	r4, #0
 8000c7a:	20ff      	movs	r0, #255	@ 0xff
 8000c7c:	03d2      	lsls	r2, r2, #15
 8000c7e:	e78f      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000c80:	4663      	mov	r3, ip
 8000c82:	1a5f      	subs	r7, r3, r1
 8000c84:	017b      	lsls	r3, r7, #5
 8000c86:	d500      	bpl.n	8000c8a <__aeabi_fsub+0x1a2>
 8000c88:	e0fe      	b.n	8000e88 <__aeabi_fsub+0x3a0>
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fsub+0x1a8>
 8000c8e:	e765      	b.n	8000b5c <__aeabi_fsub+0x74>
 8000c90:	2400      	movs	r4, #0
 8000c92:	2000      	movs	r0, #0
 8000c94:	2200      	movs	r2, #0
 8000c96:	e783      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	1a59      	subs	r1, r3, r1
 8000c9c:	014b      	lsls	r3, r1, #5
 8000c9e:	d400      	bmi.n	8000ca2 <__aeabi_fsub+0x1ba>
 8000ca0:	e119      	b.n	8000ed6 <__aeabi_fsub+0x3ee>
 8000ca2:	018f      	lsls	r7, r1, #6
 8000ca4:	09bf      	lsrs	r7, r7, #6
 8000ca6:	0038      	movs	r0, r7
 8000ca8:	f001 fd74 	bl	8002794 <__clzsi2>
 8000cac:	003b      	movs	r3, r7
 8000cae:	3805      	subs	r0, #5
 8000cb0:	4083      	lsls	r3, r0
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	1b40      	subs	r0, r0, r5
 8000cb8:	3001      	adds	r0, #1
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	4093      	lsls	r3, r2
 8000cc0:	40c1      	lsrs	r1, r0
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4193      	sbcs	r3, r2
 8000cc6:	4319      	orrs	r1, r3
 8000cc8:	468c      	mov	ip, r1
 8000cca:	1e0b      	subs	r3, r1, #0
 8000ccc:	d0e1      	beq.n	8000c92 <__aeabi_fsub+0x1aa>
 8000cce:	075b      	lsls	r3, r3, #29
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0x1ec>
 8000cd2:	e152      	b.n	8000f7a <__aeabi_fsub+0x492>
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	400b      	ands	r3, r1
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d000      	beq.n	8000ce0 <__aeabi_fsub+0x1f8>
 8000cde:	e752      	b.n	8000b86 <__aeabi_fsub+0x9e>
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	014a      	lsls	r2, r1, #5
 8000ce4:	d400      	bmi.n	8000ce8 <__aeabi_fsub+0x200>
 8000ce6:	e092      	b.n	8000e0e <__aeabi_fsub+0x326>
 8000ce8:	b2c0      	uxtb	r0, r0
 8000cea:	4663      	mov	r3, ip
 8000cec:	019a      	lsls	r2, r3, #6
 8000cee:	0a52      	lsrs	r2, r2, #9
 8000cf0:	e756      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	d005      	beq.n	8000d04 <__aeabi_fsub+0x21c>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	4662      	mov	r2, ip
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fsub+0x21c>
 8000d02:	e740      	b.n	8000b86 <__aeabi_fsub+0x9e>
 8000d04:	002b      	movs	r3, r5
 8000d06:	e765      	b.n	8000bd4 <__aeabi_fsub+0xec>
 8000d08:	0007      	movs	r7, r0
 8000d0a:	2f00      	cmp	r7, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x228>
 8000d0e:	e745      	b.n	8000b9c <__aeabi_fsub+0xb4>
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	03d2      	lsls	r2, r2, #15
 8000d14:	433a      	orrs	r2, r7
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	0a52      	lsrs	r2, r2, #9
 8000d1c:	e740      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d179      	bne.n	8000e16 <__aeabi_fsub+0x32e>
 8000d22:	22fe      	movs	r2, #254	@ 0xfe
 8000d24:	1c6b      	adds	r3, r5, #1
 8000d26:	421a      	tst	r2, r3
 8000d28:	d1aa      	bne.n	8000c80 <__aeabi_fsub+0x198>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x24a>
 8000d30:	e0f5      	b.n	8000f1e <__aeabi_fsub+0x436>
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_fsub+0x250>
 8000d36:	e0d1      	b.n	8000edc <__aeabi_fsub+0x3f4>
 8000d38:	1a5f      	subs	r7, r3, r1
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	04db      	lsls	r3, r3, #19
 8000d3e:	421f      	tst	r7, r3
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x25c>
 8000d42:	e10e      	b.n	8000f62 <__aeabi_fsub+0x47a>
 8000d44:	4662      	mov	r2, ip
 8000d46:	2401      	movs	r4, #1
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	4034      	ands	r4, r6
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_fsub+0x26e>
 8000d54:	e724      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000d56:	2001      	movs	r0, #1
 8000d58:	421a      	tst	r2, r3
 8000d5a:	d1c6      	bne.n	8000cea <__aeabi_fsub+0x202>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	08d7      	lsrs	r7, r2, #3
 8000d60:	e73d      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d017      	beq.n	8000d96 <__aeabi_fsub+0x2ae>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x284>
 8000d6a:	e0af      	b.n	8000ecc <__aeabi_fsub+0x3e4>
 8000d6c:	23ff      	movs	r3, #255	@ 0xff
 8000d6e:	4665      	mov	r5, ip
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x28e>
 8000d74:	e0ad      	b.n	8000ed2 <__aeabi_fsub+0x3ea>
 8000d76:	1e5e      	subs	r6, r3, #1
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x296>
 8000d7c:	e089      	b.n	8000e92 <__aeabi_fsub+0x3aa>
 8000d7e:	2bff      	cmp	r3, #255	@ 0xff
 8000d80:	d0c2      	beq.n	8000d08 <__aeabi_fsub+0x220>
 8000d82:	2e1b      	cmp	r6, #27
 8000d84:	dc00      	bgt.n	8000d88 <__aeabi_fsub+0x2a0>
 8000d86:	e0ab      	b.n	8000ee0 <__aeabi_fsub+0x3f8>
 8000d88:	1d4b      	adds	r3, r1, #5
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	e721      	b.n	8000bd4 <__aeabi_fsub+0xec>
 8000d90:	464b      	mov	r3, r9
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d170      	bne.n	8000e78 <__aeabi_fsub+0x390>
 8000d96:	22fe      	movs	r2, #254	@ 0xfe
 8000d98:	1c6b      	adds	r3, r5, #1
 8000d9a:	421a      	tst	r2, r3
 8000d9c:	d15e      	bne.n	8000e5c <__aeabi_fsub+0x374>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fsub+0x2bc>
 8000da2:	e0c3      	b.n	8000f2c <__aeabi_fsub+0x444>
 8000da4:	4663      	mov	r3, ip
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2c4>
 8000daa:	e0d0      	b.n	8000f4e <__aeabi_fsub+0x466>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_fsub+0x2ca>
 8000db0:	e094      	b.n	8000edc <__aeabi_fsub+0x3f4>
 8000db2:	000a      	movs	r2, r1
 8000db4:	4462      	add	r2, ip
 8000db6:	0153      	lsls	r3, r2, #5
 8000db8:	d400      	bmi.n	8000dbc <__aeabi_fsub+0x2d4>
 8000dba:	e0d8      	b.n	8000f6e <__aeabi_fsub+0x486>
 8000dbc:	0192      	lsls	r2, r2, #6
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	0a52      	lsrs	r2, r2, #9
 8000dc2:	e6ed      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000dc4:	0008      	movs	r0, r1
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	40d8      	lsrs	r0, r3
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4099      	lsls	r1, r3
 8000dce:	000b      	movs	r3, r1
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	4193      	sbcs	r3, r2
 8000dd4:	4303      	orrs	r3, r0
 8000dd6:	449c      	add	ip, r3
 8000dd8:	4663      	mov	r3, ip
 8000dda:	015b      	lsls	r3, r3, #5
 8000ddc:	d589      	bpl.n	8000cf2 <__aeabi_fsub+0x20a>
 8000dde:	3501      	adds	r5, #1
 8000de0:	2dff      	cmp	r5, #255	@ 0xff
 8000de2:	d100      	bne.n	8000de6 <__aeabi_fsub+0x2fe>
 8000de4:	e6da      	b.n	8000b9c <__aeabi_fsub+0xb4>
 8000de6:	4662      	mov	r2, ip
 8000de8:	2301      	movs	r3, #1
 8000dea:	4919      	ldr	r1, [pc, #100]	@ (8000e50 <__aeabi_fsub+0x368>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	0852      	lsrs	r2, r2, #1
 8000df0:	400a      	ands	r2, r1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	4694      	mov	ip, r2
 8000df8:	075b      	lsls	r3, r3, #29
 8000dfa:	d004      	beq.n	8000e06 <__aeabi_fsub+0x31e>
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x31e>
 8000e04:	e6bf      	b.n	8000b86 <__aeabi_fsub+0x9e>
 8000e06:	4663      	mov	r3, ip
 8000e08:	015b      	lsls	r3, r3, #5
 8000e0a:	d500      	bpl.n	8000e0e <__aeabi_fsub+0x326>
 8000e0c:	e6c2      	b.n	8000b94 <__aeabi_fsub+0xac>
 8000e0e:	4663      	mov	r3, ip
 8000e10:	08df      	lsrs	r7, r3, #3
 8000e12:	002b      	movs	r3, r5
 8000e14:	e6e3      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000e16:	1b53      	subs	r3, r2, r5
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x336>
 8000e1c:	e6f4      	b.n	8000c08 <__aeabi_fsub+0x120>
 8000e1e:	2080      	movs	r0, #128	@ 0x80
 8000e20:	4664      	mov	r4, ip
 8000e22:	04c0      	lsls	r0, r0, #19
 8000e24:	4304      	orrs	r4, r0
 8000e26:	46a4      	mov	ip, r4
 8000e28:	0034      	movs	r4, r6
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2b1b      	cmp	r3, #27
 8000e2e:	dc09      	bgt.n	8000e44 <__aeabi_fsub+0x35c>
 8000e30:	2520      	movs	r5, #32
 8000e32:	4660      	mov	r0, ip
 8000e34:	40d8      	lsrs	r0, r3
 8000e36:	1aeb      	subs	r3, r5, r3
 8000e38:	4665      	mov	r5, ip
 8000e3a:	409d      	lsls	r5, r3
 8000e3c:	002b      	movs	r3, r5
 8000e3e:	1e5d      	subs	r5, r3, #1
 8000e40:	41ab      	sbcs	r3, r5
 8000e42:	4318      	orrs	r0, r3
 8000e44:	1a0b      	subs	r3, r1, r0
 8000e46:	469c      	mov	ip, r3
 8000e48:	0015      	movs	r5, r2
 8000e4a:	e680      	b.n	8000b4e <__aeabi_fsub+0x66>
 8000e4c:	fbffffff 	.word	0xfbffffff
 8000e50:	7dffffff 	.word	0x7dffffff
 8000e54:	22fe      	movs	r2, #254	@ 0xfe
 8000e56:	1c6b      	adds	r3, r5, #1
 8000e58:	4213      	tst	r3, r2
 8000e5a:	d0a3      	beq.n	8000da4 <__aeabi_fsub+0x2bc>
 8000e5c:	2bff      	cmp	r3, #255	@ 0xff
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_fsub+0x37a>
 8000e60:	e69c      	b.n	8000b9c <__aeabi_fsub+0xb4>
 8000e62:	4461      	add	r1, ip
 8000e64:	0849      	lsrs	r1, r1, #1
 8000e66:	074a      	lsls	r2, r1, #29
 8000e68:	d049      	beq.n	8000efe <__aeabi_fsub+0x416>
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	2a04      	cmp	r2, #4
 8000e70:	d045      	beq.n	8000efe <__aeabi_fsub+0x416>
 8000e72:	1d0a      	adds	r2, r1, #4
 8000e74:	4694      	mov	ip, r2
 8000e76:	e6ad      	b.n	8000bd4 <__aeabi_fsub+0xec>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_fsub+0x396>
 8000e7c:	e776      	b.n	8000d6c <__aeabi_fsub+0x284>
 8000e7e:	e68d      	b.n	8000b9c <__aeabi_fsub+0xb4>
 8000e80:	0034      	movs	r4, r6
 8000e82:	20ff      	movs	r0, #255	@ 0xff
 8000e84:	2200      	movs	r2, #0
 8000e86:	e68b      	b.n	8000ba0 <__aeabi_fsub+0xb8>
 8000e88:	4663      	mov	r3, ip
 8000e8a:	2401      	movs	r4, #1
 8000e8c:	1acf      	subs	r7, r1, r3
 8000e8e:	4034      	ands	r4, r6
 8000e90:	e664      	b.n	8000b5c <__aeabi_fsub+0x74>
 8000e92:	4461      	add	r1, ip
 8000e94:	014b      	lsls	r3, r1, #5
 8000e96:	d56d      	bpl.n	8000f74 <__aeabi_fsub+0x48c>
 8000e98:	0848      	lsrs	r0, r1, #1
 8000e9a:	4944      	ldr	r1, [pc, #272]	@ (8000fac <__aeabi_fsub+0x4c4>)
 8000e9c:	4001      	ands	r1, r0
 8000e9e:	0743      	lsls	r3, r0, #29
 8000ea0:	d02c      	beq.n	8000efc <__aeabi_fsub+0x414>
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	4003      	ands	r3, r0
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d028      	beq.n	8000efc <__aeabi_fsub+0x414>
 8000eaa:	1d0b      	adds	r3, r1, #4
 8000eac:	469c      	mov	ip, r3
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e690      	b.n	8000bd4 <__aeabi_fsub+0xec>
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fsub+0x3d0>
 8000eb6:	e72b      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	03db      	lsls	r3, r3, #15
 8000ebc:	429f      	cmp	r7, r3
 8000ebe:	d200      	bcs.n	8000ec2 <__aeabi_fsub+0x3da>
 8000ec0:	e726      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000ec2:	4298      	cmp	r0, r3
 8000ec4:	d300      	bcc.n	8000ec8 <__aeabi_fsub+0x3e0>
 8000ec6:	e723      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000ec8:	2401      	movs	r4, #1
 8000eca:	4034      	ands	r4, r6
 8000ecc:	0007      	movs	r7, r0
 8000ece:	e71f      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000ed0:	0034      	movs	r4, r6
 8000ed2:	468c      	mov	ip, r1
 8000ed4:	e67e      	b.n	8000bd4 <__aeabi_fsub+0xec>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	08cf      	lsrs	r7, r1, #3
 8000eda:	e680      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000edc:	2300      	movs	r3, #0
 8000ede:	e67e      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000ee0:	2020      	movs	r0, #32
 8000ee2:	4665      	mov	r5, ip
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	4085      	lsls	r5, r0
 8000ee8:	4663      	mov	r3, ip
 8000eea:	0028      	movs	r0, r5
 8000eec:	40f3      	lsrs	r3, r6
 8000eee:	1e45      	subs	r5, r0, #1
 8000ef0:	41a8      	sbcs	r0, r5
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	469c      	mov	ip, r3
 8000ef6:	0015      	movs	r5, r2
 8000ef8:	448c      	add	ip, r1
 8000efa:	e76d      	b.n	8000dd8 <__aeabi_fsub+0x2f0>
 8000efc:	2302      	movs	r3, #2
 8000efe:	08cf      	lsrs	r7, r1, #3
 8000f00:	e66d      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f02:	1b0f      	subs	r7, r1, r4
 8000f04:	017b      	lsls	r3, r7, #5
 8000f06:	d528      	bpl.n	8000f5a <__aeabi_fsub+0x472>
 8000f08:	01bf      	lsls	r7, r7, #6
 8000f0a:	09bf      	lsrs	r7, r7, #6
 8000f0c:	0038      	movs	r0, r7
 8000f0e:	f001 fc41 	bl	8002794 <__clzsi2>
 8000f12:	003b      	movs	r3, r7
 8000f14:	3805      	subs	r0, #5
 8000f16:	4083      	lsls	r3, r0
 8000f18:	0034      	movs	r4, r6
 8000f1a:	2501      	movs	r5, #1
 8000f1c:	e6ca      	b.n	8000cb4 <__aeabi_fsub+0x1cc>
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_fsub+0x43c>
 8000f22:	e6b5      	b.n	8000c90 <__aeabi_fsub+0x1a8>
 8000f24:	2401      	movs	r4, #1
 8000f26:	0007      	movs	r7, r0
 8000f28:	4034      	ands	r4, r6
 8000f2a:	e658      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_fsub+0x44c>
 8000f32:	e6e9      	b.n	8000d08 <__aeabi_fsub+0x220>
 8000f34:	2900      	cmp	r1, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x452>
 8000f38:	e6ea      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	03db      	lsls	r3, r3, #15
 8000f3e:	429f      	cmp	r7, r3
 8000f40:	d200      	bcs.n	8000f44 <__aeabi_fsub+0x45c>
 8000f42:	e6e5      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000f44:	4298      	cmp	r0, r3
 8000f46:	d300      	bcc.n	8000f4a <__aeabi_fsub+0x462>
 8000f48:	e6e2      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000f4a:	0007      	movs	r7, r0
 8000f4c:	e6e0      	b.n	8000d10 <__aeabi_fsub+0x228>
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x46c>
 8000f52:	e69e      	b.n	8000c92 <__aeabi_fsub+0x1aa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	08cf      	lsrs	r7, r1, #3
 8000f58:	e641      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f5a:	0034      	movs	r4, r6
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	08ff      	lsrs	r7, r7, #3
 8000f60:	e63d      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f62:	2f00      	cmp	r7, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0x480>
 8000f66:	e693      	b.n	8000c90 <__aeabi_fsub+0x1a8>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	08ff      	lsrs	r7, r7, #3
 8000f6c:	e637      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	08d7      	lsrs	r7, r2, #3
 8000f72:	e634      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f74:	2301      	movs	r3, #1
 8000f76:	08cf      	lsrs	r7, r1, #3
 8000f78:	e631      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f7a:	2280      	movs	r2, #128	@ 0x80
 8000f7c:	000b      	movs	r3, r1
 8000f7e:	04d2      	lsls	r2, r2, #19
 8000f80:	2001      	movs	r0, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	4211      	tst	r1, r2
 8000f86:	d000      	beq.n	8000f8a <__aeabi_fsub+0x4a2>
 8000f88:	e6ae      	b.n	8000ce8 <__aeabi_fsub+0x200>
 8000f8a:	08cf      	lsrs	r7, r1, #3
 8000f8c:	e627      	b.n	8000bde <__aeabi_fsub+0xf6>
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x4ac>
 8000f92:	e75f      	b.n	8000e54 <__aeabi_fsub+0x36c>
 8000f94:	1b56      	subs	r6, r2, r5
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d101      	bne.n	8000f9e <__aeabi_fsub+0x4b6>
 8000f9a:	0033      	movs	r3, r6
 8000f9c:	e6e7      	b.n	8000d6e <__aeabi_fsub+0x286>
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	4660      	mov	r0, ip
 8000fa2:	04db      	lsls	r3, r3, #19
 8000fa4:	4318      	orrs	r0, r3
 8000fa6:	4684      	mov	ip, r0
 8000fa8:	e6eb      	b.n	8000d82 <__aeabi_fsub+0x29a>
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	7dffffff 	.word	0x7dffffff

08000fb0 <__aeabi_f2iz>:
 8000fb0:	0241      	lsls	r1, r0, #9
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0fc3      	lsrs	r3, r0, #31
 8000fb6:	0a49      	lsrs	r1, r1, #9
 8000fb8:	2000      	movs	r0, #0
 8000fba:	0e12      	lsrs	r2, r2, #24
 8000fbc:	2a7e      	cmp	r2, #126	@ 0x7e
 8000fbe:	dd03      	ble.n	8000fc8 <__aeabi_f2iz+0x18>
 8000fc0:	2a9d      	cmp	r2, #157	@ 0x9d
 8000fc2:	dd02      	ble.n	8000fca <__aeabi_f2iz+0x1a>
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <__aeabi_f2iz+0x3c>)
 8000fc6:	1898      	adds	r0, r3, r2
 8000fc8:	4770      	bx	lr
 8000fca:	2080      	movs	r0, #128	@ 0x80
 8000fcc:	0400      	lsls	r0, r0, #16
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	2a95      	cmp	r2, #149	@ 0x95
 8000fd2:	dc07      	bgt.n	8000fe4 <__aeabi_f2iz+0x34>
 8000fd4:	2096      	movs	r0, #150	@ 0x96
 8000fd6:	1a82      	subs	r2, r0, r2
 8000fd8:	40d1      	lsrs	r1, r2
 8000fda:	4248      	negs	r0, r1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f3      	bne.n	8000fc8 <__aeabi_f2iz+0x18>
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	e7f1      	b.n	8000fc8 <__aeabi_f2iz+0x18>
 8000fe4:	3a96      	subs	r2, #150	@ 0x96
 8000fe6:	4091      	lsls	r1, r2
 8000fe8:	e7f7      	b.n	8000fda <__aeabi_f2iz+0x2a>
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	7fffffff 	.word	0x7fffffff

08000ff0 <__aeabi_i2f>:
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d012      	beq.n	800101c <__aeabi_i2f+0x2c>
 8000ff6:	17c3      	asrs	r3, r0, #31
 8000ff8:	18c5      	adds	r5, r0, r3
 8000ffa:	405d      	eors	r5, r3
 8000ffc:	0fc4      	lsrs	r4, r0, #31
 8000ffe:	0028      	movs	r0, r5
 8001000:	f001 fbc8 	bl	8002794 <__clzsi2>
 8001004:	239e      	movs	r3, #158	@ 0x9e
 8001006:	1a1b      	subs	r3, r3, r0
 8001008:	2b96      	cmp	r3, #150	@ 0x96
 800100a:	dc0f      	bgt.n	800102c <__aeabi_i2f+0x3c>
 800100c:	2808      	cmp	r0, #8
 800100e:	d038      	beq.n	8001082 <__aeabi_i2f+0x92>
 8001010:	3808      	subs	r0, #8
 8001012:	4085      	lsls	r5, r0
 8001014:	026d      	lsls	r5, r5, #9
 8001016:	0a6d      	lsrs	r5, r5, #9
 8001018:	b2d8      	uxtb	r0, r3
 800101a:	e002      	b.n	8001022 <__aeabi_i2f+0x32>
 800101c:	2400      	movs	r4, #0
 800101e:	2000      	movs	r0, #0
 8001020:	2500      	movs	r5, #0
 8001022:	05c0      	lsls	r0, r0, #23
 8001024:	4328      	orrs	r0, r5
 8001026:	07e4      	lsls	r4, r4, #31
 8001028:	4320      	orrs	r0, r4
 800102a:	bd70      	pop	{r4, r5, r6, pc}
 800102c:	2b99      	cmp	r3, #153	@ 0x99
 800102e:	dc14      	bgt.n	800105a <__aeabi_i2f+0x6a>
 8001030:	1f42      	subs	r2, r0, #5
 8001032:	4095      	lsls	r5, r2
 8001034:	002a      	movs	r2, r5
 8001036:	4915      	ldr	r1, [pc, #84]	@ (800108c <__aeabi_i2f+0x9c>)
 8001038:	4011      	ands	r1, r2
 800103a:	0755      	lsls	r5, r2, #29
 800103c:	d01c      	beq.n	8001078 <__aeabi_i2f+0x88>
 800103e:	250f      	movs	r5, #15
 8001040:	402a      	ands	r2, r5
 8001042:	2a04      	cmp	r2, #4
 8001044:	d018      	beq.n	8001078 <__aeabi_i2f+0x88>
 8001046:	3104      	adds	r1, #4
 8001048:	08ca      	lsrs	r2, r1, #3
 800104a:	0149      	lsls	r1, r1, #5
 800104c:	d515      	bpl.n	800107a <__aeabi_i2f+0x8a>
 800104e:	239f      	movs	r3, #159	@ 0x9f
 8001050:	0252      	lsls	r2, r2, #9
 8001052:	1a18      	subs	r0, r3, r0
 8001054:	0a55      	lsrs	r5, r2, #9
 8001056:	b2c0      	uxtb	r0, r0
 8001058:	e7e3      	b.n	8001022 <__aeabi_i2f+0x32>
 800105a:	2205      	movs	r2, #5
 800105c:	0029      	movs	r1, r5
 800105e:	1a12      	subs	r2, r2, r0
 8001060:	40d1      	lsrs	r1, r2
 8001062:	0002      	movs	r2, r0
 8001064:	321b      	adds	r2, #27
 8001066:	4095      	lsls	r5, r2
 8001068:	002a      	movs	r2, r5
 800106a:	1e55      	subs	r5, r2, #1
 800106c:	41aa      	sbcs	r2, r5
 800106e:	430a      	orrs	r2, r1
 8001070:	4906      	ldr	r1, [pc, #24]	@ (800108c <__aeabi_i2f+0x9c>)
 8001072:	4011      	ands	r1, r2
 8001074:	0755      	lsls	r5, r2, #29
 8001076:	d1e2      	bne.n	800103e <__aeabi_i2f+0x4e>
 8001078:	08ca      	lsrs	r2, r1, #3
 800107a:	0252      	lsls	r2, r2, #9
 800107c:	0a55      	lsrs	r5, r2, #9
 800107e:	b2d8      	uxtb	r0, r3
 8001080:	e7cf      	b.n	8001022 <__aeabi_i2f+0x32>
 8001082:	026d      	lsls	r5, r5, #9
 8001084:	0a6d      	lsrs	r5, r5, #9
 8001086:	308e      	adds	r0, #142	@ 0x8e
 8001088:	e7cb      	b.n	8001022 <__aeabi_i2f+0x32>
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	fbffffff 	.word	0xfbffffff

08001090 <__aeabi_ui2f>:
 8001090:	b510      	push	{r4, lr}
 8001092:	1e04      	subs	r4, r0, #0
 8001094:	d00d      	beq.n	80010b2 <__aeabi_ui2f+0x22>
 8001096:	f001 fb7d 	bl	8002794 <__clzsi2>
 800109a:	239e      	movs	r3, #158	@ 0x9e
 800109c:	1a1b      	subs	r3, r3, r0
 800109e:	2b96      	cmp	r3, #150	@ 0x96
 80010a0:	dc0c      	bgt.n	80010bc <__aeabi_ui2f+0x2c>
 80010a2:	2808      	cmp	r0, #8
 80010a4:	d034      	beq.n	8001110 <__aeabi_ui2f+0x80>
 80010a6:	3808      	subs	r0, #8
 80010a8:	4084      	lsls	r4, r0
 80010aa:	0264      	lsls	r4, r4, #9
 80010ac:	0a64      	lsrs	r4, r4, #9
 80010ae:	b2d8      	uxtb	r0, r3
 80010b0:	e001      	b.n	80010b6 <__aeabi_ui2f+0x26>
 80010b2:	2000      	movs	r0, #0
 80010b4:	2400      	movs	r4, #0
 80010b6:	05c0      	lsls	r0, r0, #23
 80010b8:	4320      	orrs	r0, r4
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	2b99      	cmp	r3, #153	@ 0x99
 80010be:	dc13      	bgt.n	80010e8 <__aeabi_ui2f+0x58>
 80010c0:	1f42      	subs	r2, r0, #5
 80010c2:	4094      	lsls	r4, r2
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <__aeabi_ui2f+0x88>)
 80010c6:	4022      	ands	r2, r4
 80010c8:	0761      	lsls	r1, r4, #29
 80010ca:	d01c      	beq.n	8001106 <__aeabi_ui2f+0x76>
 80010cc:	210f      	movs	r1, #15
 80010ce:	4021      	ands	r1, r4
 80010d0:	2904      	cmp	r1, #4
 80010d2:	d018      	beq.n	8001106 <__aeabi_ui2f+0x76>
 80010d4:	3204      	adds	r2, #4
 80010d6:	08d4      	lsrs	r4, r2, #3
 80010d8:	0152      	lsls	r2, r2, #5
 80010da:	d515      	bpl.n	8001108 <__aeabi_ui2f+0x78>
 80010dc:	239f      	movs	r3, #159	@ 0x9f
 80010de:	0264      	lsls	r4, r4, #9
 80010e0:	1a18      	subs	r0, r3, r0
 80010e2:	0a64      	lsrs	r4, r4, #9
 80010e4:	b2c0      	uxtb	r0, r0
 80010e6:	e7e6      	b.n	80010b6 <__aeabi_ui2f+0x26>
 80010e8:	0002      	movs	r2, r0
 80010ea:	0021      	movs	r1, r4
 80010ec:	321b      	adds	r2, #27
 80010ee:	4091      	lsls	r1, r2
 80010f0:	000a      	movs	r2, r1
 80010f2:	1e51      	subs	r1, r2, #1
 80010f4:	418a      	sbcs	r2, r1
 80010f6:	2105      	movs	r1, #5
 80010f8:	1a09      	subs	r1, r1, r0
 80010fa:	40cc      	lsrs	r4, r1
 80010fc:	4314      	orrs	r4, r2
 80010fe:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <__aeabi_ui2f+0x88>)
 8001100:	4022      	ands	r2, r4
 8001102:	0761      	lsls	r1, r4, #29
 8001104:	d1e2      	bne.n	80010cc <__aeabi_ui2f+0x3c>
 8001106:	08d4      	lsrs	r4, r2, #3
 8001108:	0264      	lsls	r4, r4, #9
 800110a:	0a64      	lsrs	r4, r4, #9
 800110c:	b2d8      	uxtb	r0, r3
 800110e:	e7d2      	b.n	80010b6 <__aeabi_ui2f+0x26>
 8001110:	0264      	lsls	r4, r4, #9
 8001112:	0a64      	lsrs	r4, r4, #9
 8001114:	308e      	adds	r0, #142	@ 0x8e
 8001116:	e7ce      	b.n	80010b6 <__aeabi_ui2f+0x26>
 8001118:	fbffffff 	.word	0xfbffffff

0800111c <__aeabi_ddiv>:
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	46de      	mov	lr, fp
 8001120:	4645      	mov	r5, r8
 8001122:	4657      	mov	r7, sl
 8001124:	464e      	mov	r6, r9
 8001126:	b5e0      	push	{r5, r6, r7, lr}
 8001128:	b087      	sub	sp, #28
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	030b      	lsls	r3, r1, #12
 8001130:	0b1b      	lsrs	r3, r3, #12
 8001132:	469b      	mov	fp, r3
 8001134:	0fca      	lsrs	r2, r1, #31
 8001136:	004b      	lsls	r3, r1, #1
 8001138:	0004      	movs	r4, r0
 800113a:	4680      	mov	r8, r0
 800113c:	0d5b      	lsrs	r3, r3, #21
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x28>
 8001142:	e098      	b.n	8001276 <__aeabi_ddiv+0x15a>
 8001144:	4a7c      	ldr	r2, [pc, #496]	@ (8001338 <__aeabi_ddiv+0x21c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d037      	beq.n	80011ba <__aeabi_ddiv+0x9e>
 800114a:	4659      	mov	r1, fp
 800114c:	0f42      	lsrs	r2, r0, #29
 800114e:	00c9      	lsls	r1, r1, #3
 8001150:	430a      	orrs	r2, r1
 8001152:	2180      	movs	r1, #128	@ 0x80
 8001154:	0409      	lsls	r1, r1, #16
 8001156:	4311      	orrs	r1, r2
 8001158:	00c2      	lsls	r2, r0, #3
 800115a:	4690      	mov	r8, r2
 800115c:	4a77      	ldr	r2, [pc, #476]	@ (800133c <__aeabi_ddiv+0x220>)
 800115e:	4689      	mov	r9, r1
 8001160:	4692      	mov	sl, r2
 8001162:	449a      	add	sl, r3
 8001164:	2300      	movs	r3, #0
 8001166:	2400      	movs	r4, #0
 8001168:	9303      	str	r3, [sp, #12]
 800116a:	9e00      	ldr	r6, [sp, #0]
 800116c:	9f01      	ldr	r7, [sp, #4]
 800116e:	033b      	lsls	r3, r7, #12
 8001170:	0b1b      	lsrs	r3, r3, #12
 8001172:	469b      	mov	fp, r3
 8001174:	007b      	lsls	r3, r7, #1
 8001176:	0030      	movs	r0, r6
 8001178:	0d5b      	lsrs	r3, r3, #21
 800117a:	0ffd      	lsrs	r5, r7, #31
 800117c:	2b00      	cmp	r3, #0
 800117e:	d059      	beq.n	8001234 <__aeabi_ddiv+0x118>
 8001180:	4a6d      	ldr	r2, [pc, #436]	@ (8001338 <__aeabi_ddiv+0x21c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d048      	beq.n	8001218 <__aeabi_ddiv+0xfc>
 8001186:	4659      	mov	r1, fp
 8001188:	0f72      	lsrs	r2, r6, #29
 800118a:	00c9      	lsls	r1, r1, #3
 800118c:	430a      	orrs	r2, r1
 800118e:	2180      	movs	r1, #128	@ 0x80
 8001190:	0409      	lsls	r1, r1, #16
 8001192:	4311      	orrs	r1, r2
 8001194:	468b      	mov	fp, r1
 8001196:	4969      	ldr	r1, [pc, #420]	@ (800133c <__aeabi_ddiv+0x220>)
 8001198:	00f2      	lsls	r2, r6, #3
 800119a:	468c      	mov	ip, r1
 800119c:	4651      	mov	r1, sl
 800119e:	4463      	add	r3, ip
 80011a0:	1acb      	subs	r3, r1, r3
 80011a2:	469a      	mov	sl, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	9e02      	ldr	r6, [sp, #8]
 80011a8:	406e      	eors	r6, r5
 80011aa:	b2f6      	uxtb	r6, r6
 80011ac:	2c0f      	cmp	r4, #15
 80011ae:	d900      	bls.n	80011b2 <__aeabi_ddiv+0x96>
 80011b0:	e0ce      	b.n	8001350 <__aeabi_ddiv+0x234>
 80011b2:	4b63      	ldr	r3, [pc, #396]	@ (8001340 <__aeabi_ddiv+0x224>)
 80011b4:	00a4      	lsls	r4, r4, #2
 80011b6:	591b      	ldr	r3, [r3, r4]
 80011b8:	469f      	mov	pc, r3
 80011ba:	465a      	mov	r2, fp
 80011bc:	4302      	orrs	r2, r0
 80011be:	4691      	mov	r9, r2
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0xa8>
 80011c2:	e090      	b.n	80012e6 <__aeabi_ddiv+0x1ca>
 80011c4:	469a      	mov	sl, r3
 80011c6:	2302      	movs	r3, #2
 80011c8:	4690      	mov	r8, r2
 80011ca:	2408      	movs	r4, #8
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	e7cc      	b.n	800116a <__aeabi_ddiv+0x4e>
 80011d0:	46cb      	mov	fp, r9
 80011d2:	4642      	mov	r2, r8
 80011d4:	9d02      	ldr	r5, [sp, #8]
 80011d6:	9903      	ldr	r1, [sp, #12]
 80011d8:	2902      	cmp	r1, #2
 80011da:	d100      	bne.n	80011de <__aeabi_ddiv+0xc2>
 80011dc:	e1de      	b.n	800159c <__aeabi_ddiv+0x480>
 80011de:	2903      	cmp	r1, #3
 80011e0:	d100      	bne.n	80011e4 <__aeabi_ddiv+0xc8>
 80011e2:	e08d      	b.n	8001300 <__aeabi_ddiv+0x1e4>
 80011e4:	2901      	cmp	r1, #1
 80011e6:	d000      	beq.n	80011ea <__aeabi_ddiv+0xce>
 80011e8:	e179      	b.n	80014de <__aeabi_ddiv+0x3c2>
 80011ea:	002e      	movs	r6, r5
 80011ec:	2200      	movs	r2, #0
 80011ee:	2300      	movs	r3, #0
 80011f0:	2400      	movs	r4, #0
 80011f2:	4690      	mov	r8, r2
 80011f4:	051b      	lsls	r3, r3, #20
 80011f6:	4323      	orrs	r3, r4
 80011f8:	07f6      	lsls	r6, r6, #31
 80011fa:	4333      	orrs	r3, r6
 80011fc:	4640      	mov	r0, r8
 80011fe:	0019      	movs	r1, r3
 8001200:	b007      	add	sp, #28
 8001202:	bcf0      	pop	{r4, r5, r6, r7}
 8001204:	46bb      	mov	fp, r7
 8001206:	46b2      	mov	sl, r6
 8001208:	46a9      	mov	r9, r5
 800120a:	46a0      	mov	r8, r4
 800120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120e:	2200      	movs	r2, #0
 8001210:	2400      	movs	r4, #0
 8001212:	4690      	mov	r8, r2
 8001214:	4b48      	ldr	r3, [pc, #288]	@ (8001338 <__aeabi_ddiv+0x21c>)
 8001216:	e7ed      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 8001218:	465a      	mov	r2, fp
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	431a      	orrs	r2, r3
 800121e:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <__aeabi_ddiv+0x228>)
 8001220:	469c      	mov	ip, r3
 8001222:	44e2      	add	sl, ip
 8001224:	2a00      	cmp	r2, #0
 8001226:	d159      	bne.n	80012dc <__aeabi_ddiv+0x1c0>
 8001228:	2302      	movs	r3, #2
 800122a:	431c      	orrs	r4, r3
 800122c:	2300      	movs	r3, #0
 800122e:	2102      	movs	r1, #2
 8001230:	469b      	mov	fp, r3
 8001232:	e7b8      	b.n	80011a6 <__aeabi_ddiv+0x8a>
 8001234:	465a      	mov	r2, fp
 8001236:	9b00      	ldr	r3, [sp, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	d049      	beq.n	80012d0 <__aeabi_ddiv+0x1b4>
 800123c:	465b      	mov	r3, fp
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_ddiv+0x128>
 8001242:	e19c      	b.n	800157e <__aeabi_ddiv+0x462>
 8001244:	4658      	mov	r0, fp
 8001246:	f001 faa5 	bl	8002794 <__clzsi2>
 800124a:	0002      	movs	r2, r0
 800124c:	0003      	movs	r3, r0
 800124e:	3a0b      	subs	r2, #11
 8001250:	271d      	movs	r7, #29
 8001252:	9e00      	ldr	r6, [sp, #0]
 8001254:	1aba      	subs	r2, r7, r2
 8001256:	0019      	movs	r1, r3
 8001258:	4658      	mov	r0, fp
 800125a:	40d6      	lsrs	r6, r2
 800125c:	3908      	subs	r1, #8
 800125e:	4088      	lsls	r0, r1
 8001260:	0032      	movs	r2, r6
 8001262:	4302      	orrs	r2, r0
 8001264:	4693      	mov	fp, r2
 8001266:	9a00      	ldr	r2, [sp, #0]
 8001268:	408a      	lsls	r2, r1
 800126a:	4937      	ldr	r1, [pc, #220]	@ (8001348 <__aeabi_ddiv+0x22c>)
 800126c:	4453      	add	r3, sl
 800126e:	468a      	mov	sl, r1
 8001270:	2100      	movs	r1, #0
 8001272:	449a      	add	sl, r3
 8001274:	e797      	b.n	80011a6 <__aeabi_ddiv+0x8a>
 8001276:	465b      	mov	r3, fp
 8001278:	4303      	orrs	r3, r0
 800127a:	4699      	mov	r9, r3
 800127c:	d021      	beq.n	80012c2 <__aeabi_ddiv+0x1a6>
 800127e:	465b      	mov	r3, fp
 8001280:	2b00      	cmp	r3, #0
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x16a>
 8001284:	e169      	b.n	800155a <__aeabi_ddiv+0x43e>
 8001286:	4658      	mov	r0, fp
 8001288:	f001 fa84 	bl	8002794 <__clzsi2>
 800128c:	230b      	movs	r3, #11
 800128e:	425b      	negs	r3, r3
 8001290:	469c      	mov	ip, r3
 8001292:	0002      	movs	r2, r0
 8001294:	4484      	add	ip, r0
 8001296:	4666      	mov	r6, ip
 8001298:	231d      	movs	r3, #29
 800129a:	1b9b      	subs	r3, r3, r6
 800129c:	0026      	movs	r6, r4
 800129e:	0011      	movs	r1, r2
 80012a0:	4658      	mov	r0, fp
 80012a2:	40de      	lsrs	r6, r3
 80012a4:	3908      	subs	r1, #8
 80012a6:	4088      	lsls	r0, r1
 80012a8:	0033      	movs	r3, r6
 80012aa:	4303      	orrs	r3, r0
 80012ac:	4699      	mov	r9, r3
 80012ae:	0023      	movs	r3, r4
 80012b0:	408b      	lsls	r3, r1
 80012b2:	4698      	mov	r8, r3
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <__aeabi_ddiv+0x230>)
 80012b6:	2400      	movs	r4, #0
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	469a      	mov	sl, r3
 80012bc:	2300      	movs	r3, #0
 80012be:	9303      	str	r3, [sp, #12]
 80012c0:	e753      	b.n	800116a <__aeabi_ddiv+0x4e>
 80012c2:	2300      	movs	r3, #0
 80012c4:	4698      	mov	r8, r3
 80012c6:	469a      	mov	sl, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	2404      	movs	r4, #4
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	e74c      	b.n	800116a <__aeabi_ddiv+0x4e>
 80012d0:	2301      	movs	r3, #1
 80012d2:	431c      	orrs	r4, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	469b      	mov	fp, r3
 80012da:	e764      	b.n	80011a6 <__aeabi_ddiv+0x8a>
 80012dc:	2303      	movs	r3, #3
 80012de:	0032      	movs	r2, r6
 80012e0:	2103      	movs	r1, #3
 80012e2:	431c      	orrs	r4, r3
 80012e4:	e75f      	b.n	80011a6 <__aeabi_ddiv+0x8a>
 80012e6:	469a      	mov	sl, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	46d9      	mov	r9, fp
 80012ec:	240c      	movs	r4, #12
 80012ee:	9303      	str	r3, [sp, #12]
 80012f0:	e73b      	b.n	800116a <__aeabi_ddiv+0x4e>
 80012f2:	2300      	movs	r3, #0
 80012f4:	2480      	movs	r4, #128	@ 0x80
 80012f6:	4698      	mov	r8, r3
 80012f8:	2600      	movs	r6, #0
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <__aeabi_ddiv+0x21c>)
 80012fc:	0324      	lsls	r4, r4, #12
 80012fe:	e779      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 8001300:	2480      	movs	r4, #128	@ 0x80
 8001302:	465b      	mov	r3, fp
 8001304:	0324      	lsls	r4, r4, #12
 8001306:	431c      	orrs	r4, r3
 8001308:	0324      	lsls	r4, r4, #12
 800130a:	002e      	movs	r6, r5
 800130c:	4690      	mov	r8, r2
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <__aeabi_ddiv+0x21c>)
 8001310:	0b24      	lsrs	r4, r4, #12
 8001312:	e76f      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 8001314:	2480      	movs	r4, #128	@ 0x80
 8001316:	464b      	mov	r3, r9
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	4223      	tst	r3, r4
 800131c:	d002      	beq.n	8001324 <__aeabi_ddiv+0x208>
 800131e:	465b      	mov	r3, fp
 8001320:	4223      	tst	r3, r4
 8001322:	d0f0      	beq.n	8001306 <__aeabi_ddiv+0x1ea>
 8001324:	2480      	movs	r4, #128	@ 0x80
 8001326:	464b      	mov	r3, r9
 8001328:	0324      	lsls	r4, r4, #12
 800132a:	431c      	orrs	r4, r3
 800132c:	0324      	lsls	r4, r4, #12
 800132e:	9e02      	ldr	r6, [sp, #8]
 8001330:	4b01      	ldr	r3, [pc, #4]	@ (8001338 <__aeabi_ddiv+0x21c>)
 8001332:	0b24      	lsrs	r4, r4, #12
 8001334:	e75e      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff
 800133c:	fffffc01 	.word	0xfffffc01
 8001340:	08009d44 	.word	0x08009d44
 8001344:	fffff801 	.word	0xfffff801
 8001348:	000003f3 	.word	0x000003f3
 800134c:	fffffc0d 	.word	0xfffffc0d
 8001350:	45cb      	cmp	fp, r9
 8001352:	d200      	bcs.n	8001356 <__aeabi_ddiv+0x23a>
 8001354:	e0f8      	b.n	8001548 <__aeabi_ddiv+0x42c>
 8001356:	d100      	bne.n	800135a <__aeabi_ddiv+0x23e>
 8001358:	e0f3      	b.n	8001542 <__aeabi_ddiv+0x426>
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	469c      	mov	ip, r3
 8001360:	4644      	mov	r4, r8
 8001362:	4648      	mov	r0, r9
 8001364:	2500      	movs	r5, #0
 8001366:	44e2      	add	sl, ip
 8001368:	465b      	mov	r3, fp
 800136a:	0e17      	lsrs	r7, r2, #24
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	431f      	orrs	r7, r3
 8001370:	0c19      	lsrs	r1, r3, #16
 8001372:	043b      	lsls	r3, r7, #16
 8001374:	0212      	lsls	r2, r2, #8
 8001376:	9700      	str	r7, [sp, #0]
 8001378:	0c1f      	lsrs	r7, r3, #16
 800137a:	4691      	mov	r9, r2
 800137c:	9102      	str	r1, [sp, #8]
 800137e:	9703      	str	r7, [sp, #12]
 8001380:	f7fe ff48 	bl	8000214 <__aeabi_uidivmod>
 8001384:	0002      	movs	r2, r0
 8001386:	437a      	muls	r2, r7
 8001388:	040b      	lsls	r3, r1, #16
 800138a:	0c21      	lsrs	r1, r4, #16
 800138c:	4680      	mov	r8, r0
 800138e:	4319      	orrs	r1, r3
 8001390:	428a      	cmp	r2, r1
 8001392:	d909      	bls.n	80013a8 <__aeabi_ddiv+0x28c>
 8001394:	9f00      	ldr	r7, [sp, #0]
 8001396:	2301      	movs	r3, #1
 8001398:	46bc      	mov	ip, r7
 800139a:	425b      	negs	r3, r3
 800139c:	4461      	add	r1, ip
 800139e:	469c      	mov	ip, r3
 80013a0:	44e0      	add	r8, ip
 80013a2:	428f      	cmp	r7, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x28c>
 80013a6:	e15c      	b.n	8001662 <__aeabi_ddiv+0x546>
 80013a8:	1a88      	subs	r0, r1, r2
 80013aa:	9902      	ldr	r1, [sp, #8]
 80013ac:	f7fe ff32 	bl	8000214 <__aeabi_uidivmod>
 80013b0:	9a03      	ldr	r2, [sp, #12]
 80013b2:	0424      	lsls	r4, r4, #16
 80013b4:	4342      	muls	r2, r0
 80013b6:	0409      	lsls	r1, r1, #16
 80013b8:	0c24      	lsrs	r4, r4, #16
 80013ba:	0003      	movs	r3, r0
 80013bc:	430c      	orrs	r4, r1
 80013be:	42a2      	cmp	r2, r4
 80013c0:	d906      	bls.n	80013d0 <__aeabi_ddiv+0x2b4>
 80013c2:	9900      	ldr	r1, [sp, #0]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	468c      	mov	ip, r1
 80013c8:	4464      	add	r4, ip
 80013ca:	42a1      	cmp	r1, r4
 80013cc:	d800      	bhi.n	80013d0 <__aeabi_ddiv+0x2b4>
 80013ce:	e142      	b.n	8001656 <__aeabi_ddiv+0x53a>
 80013d0:	1aa0      	subs	r0, r4, r2
 80013d2:	4642      	mov	r2, r8
 80013d4:	0412      	lsls	r2, r2, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	4693      	mov	fp, r2
 80013da:	464b      	mov	r3, r9
 80013dc:	4659      	mov	r1, fp
 80013de:	0c1b      	lsrs	r3, r3, #16
 80013e0:	001f      	movs	r7, r3
 80013e2:	9304      	str	r3, [sp, #16]
 80013e4:	040b      	lsls	r3, r1, #16
 80013e6:	4649      	mov	r1, r9
 80013e8:	0409      	lsls	r1, r1, #16
 80013ea:	0c09      	lsrs	r1, r1, #16
 80013ec:	000c      	movs	r4, r1
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	435c      	muls	r4, r3
 80013f2:	0c12      	lsrs	r2, r2, #16
 80013f4:	437b      	muls	r3, r7
 80013f6:	4688      	mov	r8, r1
 80013f8:	4351      	muls	r1, r2
 80013fa:	437a      	muls	r2, r7
 80013fc:	0c27      	lsrs	r7, r4, #16
 80013fe:	46bc      	mov	ip, r7
 8001400:	185b      	adds	r3, r3, r1
 8001402:	4463      	add	r3, ip
 8001404:	4299      	cmp	r1, r3
 8001406:	d903      	bls.n	8001410 <__aeabi_ddiv+0x2f4>
 8001408:	2180      	movs	r1, #128	@ 0x80
 800140a:	0249      	lsls	r1, r1, #9
 800140c:	468c      	mov	ip, r1
 800140e:	4462      	add	r2, ip
 8001410:	0c19      	lsrs	r1, r3, #16
 8001412:	0424      	lsls	r4, r4, #16
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	0c24      	lsrs	r4, r4, #16
 8001418:	188a      	adds	r2, r1, r2
 800141a:	191c      	adds	r4, r3, r4
 800141c:	4290      	cmp	r0, r2
 800141e:	d302      	bcc.n	8001426 <__aeabi_ddiv+0x30a>
 8001420:	d116      	bne.n	8001450 <__aeabi_ddiv+0x334>
 8001422:	42a5      	cmp	r5, r4
 8001424:	d214      	bcs.n	8001450 <__aeabi_ddiv+0x334>
 8001426:	465b      	mov	r3, fp
 8001428:	9f00      	ldr	r7, [sp, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	444d      	add	r5, r9
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	454d      	cmp	r5, r9
 8001432:	419b      	sbcs	r3, r3
 8001434:	46bc      	mov	ip, r7
 8001436:	425b      	negs	r3, r3
 8001438:	4463      	add	r3, ip
 800143a:	18c0      	adds	r0, r0, r3
 800143c:	4287      	cmp	r7, r0
 800143e:	d300      	bcc.n	8001442 <__aeabi_ddiv+0x326>
 8001440:	e102      	b.n	8001648 <__aeabi_ddiv+0x52c>
 8001442:	4282      	cmp	r2, r0
 8001444:	d900      	bls.n	8001448 <__aeabi_ddiv+0x32c>
 8001446:	e129      	b.n	800169c <__aeabi_ddiv+0x580>
 8001448:	d100      	bne.n	800144c <__aeabi_ddiv+0x330>
 800144a:	e124      	b.n	8001696 <__aeabi_ddiv+0x57a>
 800144c:	9b05      	ldr	r3, [sp, #20]
 800144e:	469b      	mov	fp, r3
 8001450:	1b2c      	subs	r4, r5, r4
 8001452:	42a5      	cmp	r5, r4
 8001454:	41ad      	sbcs	r5, r5
 8001456:	9b00      	ldr	r3, [sp, #0]
 8001458:	1a80      	subs	r0, r0, r2
 800145a:	426d      	negs	r5, r5
 800145c:	1b40      	subs	r0, r0, r5
 800145e:	4283      	cmp	r3, r0
 8001460:	d100      	bne.n	8001464 <__aeabi_ddiv+0x348>
 8001462:	e10f      	b.n	8001684 <__aeabi_ddiv+0x568>
 8001464:	9902      	ldr	r1, [sp, #8]
 8001466:	f7fe fed5 	bl	8000214 <__aeabi_uidivmod>
 800146a:	9a03      	ldr	r2, [sp, #12]
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	4342      	muls	r2, r0
 8001470:	0c21      	lsrs	r1, r4, #16
 8001472:	0005      	movs	r5, r0
 8001474:	4319      	orrs	r1, r3
 8001476:	428a      	cmp	r2, r1
 8001478:	d900      	bls.n	800147c <__aeabi_ddiv+0x360>
 800147a:	e0cb      	b.n	8001614 <__aeabi_ddiv+0x4f8>
 800147c:	1a88      	subs	r0, r1, r2
 800147e:	9902      	ldr	r1, [sp, #8]
 8001480:	f7fe fec8 	bl	8000214 <__aeabi_uidivmod>
 8001484:	9a03      	ldr	r2, [sp, #12]
 8001486:	0424      	lsls	r4, r4, #16
 8001488:	4342      	muls	r2, r0
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	0c24      	lsrs	r4, r4, #16
 800148e:	0003      	movs	r3, r0
 8001490:	430c      	orrs	r4, r1
 8001492:	42a2      	cmp	r2, r4
 8001494:	d900      	bls.n	8001498 <__aeabi_ddiv+0x37c>
 8001496:	e0ca      	b.n	800162e <__aeabi_ddiv+0x512>
 8001498:	4641      	mov	r1, r8
 800149a:	1aa4      	subs	r4, r4, r2
 800149c:	042a      	lsls	r2, r5, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	9f04      	ldr	r7, [sp, #16]
 80014a2:	0413      	lsls	r3, r2, #16
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	4359      	muls	r1, r3
 80014a8:	4640      	mov	r0, r8
 80014aa:	437b      	muls	r3, r7
 80014ac:	469c      	mov	ip, r3
 80014ae:	0c15      	lsrs	r5, r2, #16
 80014b0:	4368      	muls	r0, r5
 80014b2:	0c0b      	lsrs	r3, r1, #16
 80014b4:	4484      	add	ip, r0
 80014b6:	4463      	add	r3, ip
 80014b8:	437d      	muls	r5, r7
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d903      	bls.n	80014c6 <__aeabi_ddiv+0x3aa>
 80014be:	2080      	movs	r0, #128	@ 0x80
 80014c0:	0240      	lsls	r0, r0, #9
 80014c2:	4684      	mov	ip, r0
 80014c4:	4465      	add	r5, ip
 80014c6:	0c18      	lsrs	r0, r3, #16
 80014c8:	0409      	lsls	r1, r1, #16
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c09      	lsrs	r1, r1, #16
 80014ce:	1940      	adds	r0, r0, r5
 80014d0:	185b      	adds	r3, r3, r1
 80014d2:	4284      	cmp	r4, r0
 80014d4:	d327      	bcc.n	8001526 <__aeabi_ddiv+0x40a>
 80014d6:	d023      	beq.n	8001520 <__aeabi_ddiv+0x404>
 80014d8:	2301      	movs	r3, #1
 80014da:	0035      	movs	r5, r6
 80014dc:	431a      	orrs	r2, r3
 80014de:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <__aeabi_ddiv+0x614>)
 80014e0:	4453      	add	r3, sl
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dd60      	ble.n	80015a8 <__aeabi_ddiv+0x48c>
 80014e6:	0751      	lsls	r1, r2, #29
 80014e8:	d000      	beq.n	80014ec <__aeabi_ddiv+0x3d0>
 80014ea:	e086      	b.n	80015fa <__aeabi_ddiv+0x4de>
 80014ec:	002e      	movs	r6, r5
 80014ee:	08d1      	lsrs	r1, r2, #3
 80014f0:	465a      	mov	r2, fp
 80014f2:	01d2      	lsls	r2, r2, #7
 80014f4:	d506      	bpl.n	8001504 <__aeabi_ddiv+0x3e8>
 80014f6:	465a      	mov	r2, fp
 80014f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001734 <__aeabi_ddiv+0x618>)
 80014fa:	401a      	ands	r2, r3
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	4693      	mov	fp, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4453      	add	r3, sl
 8001504:	4a8c      	ldr	r2, [pc, #560]	@ (8001738 <__aeabi_ddiv+0x61c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	dd00      	ble.n	800150c <__aeabi_ddiv+0x3f0>
 800150a:	e680      	b.n	800120e <__aeabi_ddiv+0xf2>
 800150c:	465a      	mov	r2, fp
 800150e:	0752      	lsls	r2, r2, #29
 8001510:	430a      	orrs	r2, r1
 8001512:	4690      	mov	r8, r2
 8001514:	465a      	mov	r2, fp
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	0254      	lsls	r4, r2, #9
 800151a:	0b24      	lsrs	r4, r4, #12
 800151c:	0d5b      	lsrs	r3, r3, #21
 800151e:	e669      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 8001520:	0035      	movs	r5, r6
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0db      	beq.n	80014de <__aeabi_ddiv+0x3c2>
 8001526:	9d00      	ldr	r5, [sp, #0]
 8001528:	1e51      	subs	r1, r2, #1
 800152a:	46ac      	mov	ip, r5
 800152c:	4464      	add	r4, ip
 800152e:	42ac      	cmp	r4, r5
 8001530:	d200      	bcs.n	8001534 <__aeabi_ddiv+0x418>
 8001532:	e09e      	b.n	8001672 <__aeabi_ddiv+0x556>
 8001534:	4284      	cmp	r4, r0
 8001536:	d200      	bcs.n	800153a <__aeabi_ddiv+0x41e>
 8001538:	e0e1      	b.n	80016fe <__aeabi_ddiv+0x5e2>
 800153a:	d100      	bne.n	800153e <__aeabi_ddiv+0x422>
 800153c:	e0ee      	b.n	800171c <__aeabi_ddiv+0x600>
 800153e:	000a      	movs	r2, r1
 8001540:	e7ca      	b.n	80014d8 <__aeabi_ddiv+0x3bc>
 8001542:	4542      	cmp	r2, r8
 8001544:	d900      	bls.n	8001548 <__aeabi_ddiv+0x42c>
 8001546:	e708      	b.n	800135a <__aeabi_ddiv+0x23e>
 8001548:	464b      	mov	r3, r9
 800154a:	07dc      	lsls	r4, r3, #31
 800154c:	0858      	lsrs	r0, r3, #1
 800154e:	4643      	mov	r3, r8
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	431c      	orrs	r4, r3
 8001554:	4643      	mov	r3, r8
 8001556:	07dd      	lsls	r5, r3, #31
 8001558:	e706      	b.n	8001368 <__aeabi_ddiv+0x24c>
 800155a:	f001 f91b 	bl	8002794 <__clzsi2>
 800155e:	2315      	movs	r3, #21
 8001560:	469c      	mov	ip, r3
 8001562:	4484      	add	ip, r0
 8001564:	0002      	movs	r2, r0
 8001566:	4663      	mov	r3, ip
 8001568:	3220      	adds	r2, #32
 800156a:	2b1c      	cmp	r3, #28
 800156c:	dc00      	bgt.n	8001570 <__aeabi_ddiv+0x454>
 800156e:	e692      	b.n	8001296 <__aeabi_ddiv+0x17a>
 8001570:	0023      	movs	r3, r4
 8001572:	3808      	subs	r0, #8
 8001574:	4083      	lsls	r3, r0
 8001576:	4699      	mov	r9, r3
 8001578:	2300      	movs	r3, #0
 800157a:	4698      	mov	r8, r3
 800157c:	e69a      	b.n	80012b4 <__aeabi_ddiv+0x198>
 800157e:	f001 f909 	bl	8002794 <__clzsi2>
 8001582:	0002      	movs	r2, r0
 8001584:	0003      	movs	r3, r0
 8001586:	3215      	adds	r2, #21
 8001588:	3320      	adds	r3, #32
 800158a:	2a1c      	cmp	r2, #28
 800158c:	dc00      	bgt.n	8001590 <__aeabi_ddiv+0x474>
 800158e:	e65f      	b.n	8001250 <__aeabi_ddiv+0x134>
 8001590:	9900      	ldr	r1, [sp, #0]
 8001592:	3808      	subs	r0, #8
 8001594:	4081      	lsls	r1, r0
 8001596:	2200      	movs	r2, #0
 8001598:	468b      	mov	fp, r1
 800159a:	e666      	b.n	800126a <__aeabi_ddiv+0x14e>
 800159c:	2200      	movs	r2, #0
 800159e:	002e      	movs	r6, r5
 80015a0:	2400      	movs	r4, #0
 80015a2:	4690      	mov	r8, r2
 80015a4:	4b65      	ldr	r3, [pc, #404]	@ (800173c <__aeabi_ddiv+0x620>)
 80015a6:	e625      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 80015a8:	002e      	movs	r6, r5
 80015aa:	2101      	movs	r1, #1
 80015ac:	1ac9      	subs	r1, r1, r3
 80015ae:	2938      	cmp	r1, #56	@ 0x38
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_ddiv+0x498>
 80015b2:	e61b      	b.n	80011ec <__aeabi_ddiv+0xd0>
 80015b4:	291f      	cmp	r1, #31
 80015b6:	dc7e      	bgt.n	80016b6 <__aeabi_ddiv+0x59a>
 80015b8:	4861      	ldr	r0, [pc, #388]	@ (8001740 <__aeabi_ddiv+0x624>)
 80015ba:	0014      	movs	r4, r2
 80015bc:	4450      	add	r0, sl
 80015be:	465b      	mov	r3, fp
 80015c0:	4082      	lsls	r2, r0
 80015c2:	4083      	lsls	r3, r0
 80015c4:	40cc      	lsrs	r4, r1
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	4182      	sbcs	r2, r0
 80015ca:	4323      	orrs	r3, r4
 80015cc:	431a      	orrs	r2, r3
 80015ce:	465b      	mov	r3, fp
 80015d0:	40cb      	lsrs	r3, r1
 80015d2:	0751      	lsls	r1, r2, #29
 80015d4:	d009      	beq.n	80015ea <__aeabi_ddiv+0x4ce>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4011      	ands	r1, r2
 80015da:	2904      	cmp	r1, #4
 80015dc:	d005      	beq.n	80015ea <__aeabi_ddiv+0x4ce>
 80015de:	1d11      	adds	r1, r2, #4
 80015e0:	4291      	cmp	r1, r2
 80015e2:	4192      	sbcs	r2, r2
 80015e4:	4252      	negs	r2, r2
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	000a      	movs	r2, r1
 80015ea:	0219      	lsls	r1, r3, #8
 80015ec:	d400      	bmi.n	80015f0 <__aeabi_ddiv+0x4d4>
 80015ee:	e09b      	b.n	8001728 <__aeabi_ddiv+0x60c>
 80015f0:	2200      	movs	r2, #0
 80015f2:	2301      	movs	r3, #1
 80015f4:	2400      	movs	r4, #0
 80015f6:	4690      	mov	r8, r2
 80015f8:	e5fc      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 80015fa:	210f      	movs	r1, #15
 80015fc:	4011      	ands	r1, r2
 80015fe:	2904      	cmp	r1, #4
 8001600:	d100      	bne.n	8001604 <__aeabi_ddiv+0x4e8>
 8001602:	e773      	b.n	80014ec <__aeabi_ddiv+0x3d0>
 8001604:	1d11      	adds	r1, r2, #4
 8001606:	4291      	cmp	r1, r2
 8001608:	4192      	sbcs	r2, r2
 800160a:	4252      	negs	r2, r2
 800160c:	002e      	movs	r6, r5
 800160e:	08c9      	lsrs	r1, r1, #3
 8001610:	4493      	add	fp, r2
 8001612:	e76d      	b.n	80014f0 <__aeabi_ddiv+0x3d4>
 8001614:	9b00      	ldr	r3, [sp, #0]
 8001616:	3d01      	subs	r5, #1
 8001618:	469c      	mov	ip, r3
 800161a:	4461      	add	r1, ip
 800161c:	428b      	cmp	r3, r1
 800161e:	d900      	bls.n	8001622 <__aeabi_ddiv+0x506>
 8001620:	e72c      	b.n	800147c <__aeabi_ddiv+0x360>
 8001622:	428a      	cmp	r2, r1
 8001624:	d800      	bhi.n	8001628 <__aeabi_ddiv+0x50c>
 8001626:	e729      	b.n	800147c <__aeabi_ddiv+0x360>
 8001628:	1e85      	subs	r5, r0, #2
 800162a:	4461      	add	r1, ip
 800162c:	e726      	b.n	800147c <__aeabi_ddiv+0x360>
 800162e:	9900      	ldr	r1, [sp, #0]
 8001630:	3b01      	subs	r3, #1
 8001632:	468c      	mov	ip, r1
 8001634:	4464      	add	r4, ip
 8001636:	42a1      	cmp	r1, r4
 8001638:	d900      	bls.n	800163c <__aeabi_ddiv+0x520>
 800163a:	e72d      	b.n	8001498 <__aeabi_ddiv+0x37c>
 800163c:	42a2      	cmp	r2, r4
 800163e:	d800      	bhi.n	8001642 <__aeabi_ddiv+0x526>
 8001640:	e72a      	b.n	8001498 <__aeabi_ddiv+0x37c>
 8001642:	1e83      	subs	r3, r0, #2
 8001644:	4464      	add	r4, ip
 8001646:	e727      	b.n	8001498 <__aeabi_ddiv+0x37c>
 8001648:	4287      	cmp	r7, r0
 800164a:	d000      	beq.n	800164e <__aeabi_ddiv+0x532>
 800164c:	e6fe      	b.n	800144c <__aeabi_ddiv+0x330>
 800164e:	45a9      	cmp	r9, r5
 8001650:	d900      	bls.n	8001654 <__aeabi_ddiv+0x538>
 8001652:	e6fb      	b.n	800144c <__aeabi_ddiv+0x330>
 8001654:	e6f5      	b.n	8001442 <__aeabi_ddiv+0x326>
 8001656:	42a2      	cmp	r2, r4
 8001658:	d800      	bhi.n	800165c <__aeabi_ddiv+0x540>
 800165a:	e6b9      	b.n	80013d0 <__aeabi_ddiv+0x2b4>
 800165c:	1e83      	subs	r3, r0, #2
 800165e:	4464      	add	r4, ip
 8001660:	e6b6      	b.n	80013d0 <__aeabi_ddiv+0x2b4>
 8001662:	428a      	cmp	r2, r1
 8001664:	d800      	bhi.n	8001668 <__aeabi_ddiv+0x54c>
 8001666:	e69f      	b.n	80013a8 <__aeabi_ddiv+0x28c>
 8001668:	46bc      	mov	ip, r7
 800166a:	1e83      	subs	r3, r0, #2
 800166c:	4698      	mov	r8, r3
 800166e:	4461      	add	r1, ip
 8001670:	e69a      	b.n	80013a8 <__aeabi_ddiv+0x28c>
 8001672:	000a      	movs	r2, r1
 8001674:	4284      	cmp	r4, r0
 8001676:	d000      	beq.n	800167a <__aeabi_ddiv+0x55e>
 8001678:	e72e      	b.n	80014d8 <__aeabi_ddiv+0x3bc>
 800167a:	454b      	cmp	r3, r9
 800167c:	d000      	beq.n	8001680 <__aeabi_ddiv+0x564>
 800167e:	e72b      	b.n	80014d8 <__aeabi_ddiv+0x3bc>
 8001680:	0035      	movs	r5, r6
 8001682:	e72c      	b.n	80014de <__aeabi_ddiv+0x3c2>
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <__aeabi_ddiv+0x614>)
 8001686:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <__aeabi_ddiv+0x628>)
 8001688:	4453      	add	r3, sl
 800168a:	4592      	cmp	sl, r2
 800168c:	db43      	blt.n	8001716 <__aeabi_ddiv+0x5fa>
 800168e:	2201      	movs	r2, #1
 8001690:	2100      	movs	r1, #0
 8001692:	4493      	add	fp, r2
 8001694:	e72c      	b.n	80014f0 <__aeabi_ddiv+0x3d4>
 8001696:	42ac      	cmp	r4, r5
 8001698:	d800      	bhi.n	800169c <__aeabi_ddiv+0x580>
 800169a:	e6d7      	b.n	800144c <__aeabi_ddiv+0x330>
 800169c:	2302      	movs	r3, #2
 800169e:	425b      	negs	r3, r3
 80016a0:	469c      	mov	ip, r3
 80016a2:	9900      	ldr	r1, [sp, #0]
 80016a4:	444d      	add	r5, r9
 80016a6:	454d      	cmp	r5, r9
 80016a8:	419b      	sbcs	r3, r3
 80016aa:	44e3      	add	fp, ip
 80016ac:	468c      	mov	ip, r1
 80016ae:	425b      	negs	r3, r3
 80016b0:	4463      	add	r3, ip
 80016b2:	18c0      	adds	r0, r0, r3
 80016b4:	e6cc      	b.n	8001450 <__aeabi_ddiv+0x334>
 80016b6:	201f      	movs	r0, #31
 80016b8:	4240      	negs	r0, r0
 80016ba:	1ac3      	subs	r3, r0, r3
 80016bc:	4658      	mov	r0, fp
 80016be:	40d8      	lsrs	r0, r3
 80016c0:	2920      	cmp	r1, #32
 80016c2:	d004      	beq.n	80016ce <__aeabi_ddiv+0x5b2>
 80016c4:	4659      	mov	r1, fp
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <__aeabi_ddiv+0x62c>)
 80016c8:	4453      	add	r3, sl
 80016ca:	4099      	lsls	r1, r3
 80016cc:	430a      	orrs	r2, r1
 80016ce:	1e53      	subs	r3, r2, #1
 80016d0:	419a      	sbcs	r2, r3
 80016d2:	2307      	movs	r3, #7
 80016d4:	0019      	movs	r1, r3
 80016d6:	4302      	orrs	r2, r0
 80016d8:	2400      	movs	r4, #0
 80016da:	4011      	ands	r1, r2
 80016dc:	4213      	tst	r3, r2
 80016de:	d009      	beq.n	80016f4 <__aeabi_ddiv+0x5d8>
 80016e0:	3308      	adds	r3, #8
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d01d      	beq.n	8001724 <__aeabi_ddiv+0x608>
 80016e8:	1d13      	adds	r3, r2, #4
 80016ea:	4293      	cmp	r3, r2
 80016ec:	4189      	sbcs	r1, r1
 80016ee:	001a      	movs	r2, r3
 80016f0:	4249      	negs	r1, r1
 80016f2:	0749      	lsls	r1, r1, #29
 80016f4:	08d2      	lsrs	r2, r2, #3
 80016f6:	430a      	orrs	r2, r1
 80016f8:	4690      	mov	r8, r2
 80016fa:	2300      	movs	r3, #0
 80016fc:	e57a      	b.n	80011f4 <__aeabi_ddiv+0xd8>
 80016fe:	4649      	mov	r1, r9
 8001700:	9f00      	ldr	r7, [sp, #0]
 8001702:	004d      	lsls	r5, r1, #1
 8001704:	454d      	cmp	r5, r9
 8001706:	4189      	sbcs	r1, r1
 8001708:	46bc      	mov	ip, r7
 800170a:	4249      	negs	r1, r1
 800170c:	4461      	add	r1, ip
 800170e:	46a9      	mov	r9, r5
 8001710:	3a02      	subs	r2, #2
 8001712:	1864      	adds	r4, r4, r1
 8001714:	e7ae      	b.n	8001674 <__aeabi_ddiv+0x558>
 8001716:	2201      	movs	r2, #1
 8001718:	4252      	negs	r2, r2
 800171a:	e746      	b.n	80015aa <__aeabi_ddiv+0x48e>
 800171c:	4599      	cmp	r9, r3
 800171e:	d3ee      	bcc.n	80016fe <__aeabi_ddiv+0x5e2>
 8001720:	000a      	movs	r2, r1
 8001722:	e7aa      	b.n	800167a <__aeabi_ddiv+0x55e>
 8001724:	2100      	movs	r1, #0
 8001726:	e7e5      	b.n	80016f4 <__aeabi_ddiv+0x5d8>
 8001728:	0759      	lsls	r1, r3, #29
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	0b1c      	lsrs	r4, r3, #12
 800172e:	e7e1      	b.n	80016f4 <__aeabi_ddiv+0x5d8>
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	000007ff 	.word	0x000007ff
 8001740:	0000041e 	.word	0x0000041e
 8001744:	fffffc02 	.word	0xfffffc02
 8001748:	0000043e 	.word	0x0000043e

0800174c <__aeabi_dmul>:
 800174c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174e:	4657      	mov	r7, sl
 8001750:	464e      	mov	r6, r9
 8001752:	46de      	mov	lr, fp
 8001754:	4645      	mov	r5, r8
 8001756:	b5e0      	push	{r5, r6, r7, lr}
 8001758:	001f      	movs	r7, r3
 800175a:	030b      	lsls	r3, r1, #12
 800175c:	0b1b      	lsrs	r3, r3, #12
 800175e:	0016      	movs	r6, r2
 8001760:	469a      	mov	sl, r3
 8001762:	0fca      	lsrs	r2, r1, #31
 8001764:	004b      	lsls	r3, r1, #1
 8001766:	0004      	movs	r4, r0
 8001768:	4691      	mov	r9, r2
 800176a:	b085      	sub	sp, #20
 800176c:	0d5b      	lsrs	r3, r3, #21
 800176e:	d100      	bne.n	8001772 <__aeabi_dmul+0x26>
 8001770:	e1cf      	b.n	8001b12 <__aeabi_dmul+0x3c6>
 8001772:	4acd      	ldr	r2, [pc, #820]	@ (8001aa8 <__aeabi_dmul+0x35c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d055      	beq.n	8001824 <__aeabi_dmul+0xd8>
 8001778:	4651      	mov	r1, sl
 800177a:	0f42      	lsrs	r2, r0, #29
 800177c:	00c9      	lsls	r1, r1, #3
 800177e:	430a      	orrs	r2, r1
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0409      	lsls	r1, r1, #16
 8001784:	4311      	orrs	r1, r2
 8001786:	00c2      	lsls	r2, r0, #3
 8001788:	4690      	mov	r8, r2
 800178a:	4ac8      	ldr	r2, [pc, #800]	@ (8001aac <__aeabi_dmul+0x360>)
 800178c:	468a      	mov	sl, r1
 800178e:	4693      	mov	fp, r2
 8001790:	449b      	add	fp, r3
 8001792:	2300      	movs	r3, #0
 8001794:	2500      	movs	r5, #0
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	033c      	lsls	r4, r7, #12
 800179a:	007b      	lsls	r3, r7, #1
 800179c:	0ffa      	lsrs	r2, r7, #31
 800179e:	9601      	str	r6, [sp, #4]
 80017a0:	0b24      	lsrs	r4, r4, #12
 80017a2:	0d5b      	lsrs	r3, r3, #21
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0x5e>
 80017a8:	e188      	b.n	8001abc <__aeabi_dmul+0x370>
 80017aa:	4abf      	ldr	r2, [pc, #764]	@ (8001aa8 <__aeabi_dmul+0x35c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dmul+0x66>
 80017b0:	e092      	b.n	80018d8 <__aeabi_dmul+0x18c>
 80017b2:	4abe      	ldr	r2, [pc, #760]	@ (8001aac <__aeabi_dmul+0x360>)
 80017b4:	4694      	mov	ip, r2
 80017b6:	4463      	add	r3, ip
 80017b8:	449b      	add	fp, r3
 80017ba:	2d0a      	cmp	r5, #10
 80017bc:	dc42      	bgt.n	8001844 <__aeabi_dmul+0xf8>
 80017be:	00e4      	lsls	r4, r4, #3
 80017c0:	0f73      	lsrs	r3, r6, #29
 80017c2:	4323      	orrs	r3, r4
 80017c4:	2480      	movs	r4, #128	@ 0x80
 80017c6:	4649      	mov	r1, r9
 80017c8:	0424      	lsls	r4, r4, #16
 80017ca:	431c      	orrs	r4, r3
 80017cc:	00f3      	lsls	r3, r6, #3
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	9b00      	ldr	r3, [sp, #0]
 80017d2:	2000      	movs	r0, #0
 80017d4:	4059      	eors	r1, r3
 80017d6:	b2cb      	uxtb	r3, r1
 80017d8:	9303      	str	r3, [sp, #12]
 80017da:	2d02      	cmp	r5, #2
 80017dc:	dc00      	bgt.n	80017e0 <__aeabi_dmul+0x94>
 80017de:	e094      	b.n	800190a <__aeabi_dmul+0x1be>
 80017e0:	2301      	movs	r3, #1
 80017e2:	40ab      	lsls	r3, r5
 80017e4:	001d      	movs	r5, r3
 80017e6:	23a6      	movs	r3, #166	@ 0xa6
 80017e8:	002a      	movs	r2, r5
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	401a      	ands	r2, r3
 80017ee:	421d      	tst	r5, r3
 80017f0:	d000      	beq.n	80017f4 <__aeabi_dmul+0xa8>
 80017f2:	e229      	b.n	8001c48 <__aeabi_dmul+0x4fc>
 80017f4:	2390      	movs	r3, #144	@ 0x90
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	421d      	tst	r5, r3
 80017fa:	d100      	bne.n	80017fe <__aeabi_dmul+0xb2>
 80017fc:	e24d      	b.n	8001c9a <__aeabi_dmul+0x54e>
 80017fe:	2300      	movs	r3, #0
 8001800:	2480      	movs	r4, #128	@ 0x80
 8001802:	4699      	mov	r9, r3
 8001804:	0324      	lsls	r4, r4, #12
 8001806:	4ba8      	ldr	r3, [pc, #672]	@ (8001aa8 <__aeabi_dmul+0x35c>)
 8001808:	0010      	movs	r0, r2
 800180a:	464a      	mov	r2, r9
 800180c:	051b      	lsls	r3, r3, #20
 800180e:	4323      	orrs	r3, r4
 8001810:	07d2      	lsls	r2, r2, #31
 8001812:	4313      	orrs	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	b005      	add	sp, #20
 8001818:	bcf0      	pop	{r4, r5, r6, r7}
 800181a:	46bb      	mov	fp, r7
 800181c:	46b2      	mov	sl, r6
 800181e:	46a9      	mov	r9, r5
 8001820:	46a0      	mov	r8, r4
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001824:	4652      	mov	r2, sl
 8001826:	4302      	orrs	r2, r0
 8001828:	4690      	mov	r8, r2
 800182a:	d000      	beq.n	800182e <__aeabi_dmul+0xe2>
 800182c:	e1ac      	b.n	8001b88 <__aeabi_dmul+0x43c>
 800182e:	469b      	mov	fp, r3
 8001830:	2302      	movs	r3, #2
 8001832:	4692      	mov	sl, r2
 8001834:	2508      	movs	r5, #8
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	e7ae      	b.n	8001798 <__aeabi_dmul+0x4c>
 800183a:	9b00      	ldr	r3, [sp, #0]
 800183c:	46a2      	mov	sl, r4
 800183e:	4699      	mov	r9, r3
 8001840:	9b01      	ldr	r3, [sp, #4]
 8001842:	4698      	mov	r8, r3
 8001844:	9b02      	ldr	r3, [sp, #8]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d100      	bne.n	800184c <__aeabi_dmul+0x100>
 800184a:	e1ca      	b.n	8001be2 <__aeabi_dmul+0x496>
 800184c:	2b03      	cmp	r3, #3
 800184e:	d100      	bne.n	8001852 <__aeabi_dmul+0x106>
 8001850:	e192      	b.n	8001b78 <__aeabi_dmul+0x42c>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d110      	bne.n	8001878 <__aeabi_dmul+0x12c>
 8001856:	2300      	movs	r3, #0
 8001858:	2400      	movs	r4, #0
 800185a:	2200      	movs	r2, #0
 800185c:	e7d4      	b.n	8001808 <__aeabi_dmul+0xbc>
 800185e:	2201      	movs	r2, #1
 8001860:	087b      	lsrs	r3, r7, #1
 8001862:	403a      	ands	r2, r7
 8001864:	4313      	orrs	r3, r2
 8001866:	4652      	mov	r2, sl
 8001868:	07d2      	lsls	r2, r2, #31
 800186a:	4313      	orrs	r3, r2
 800186c:	4698      	mov	r8, r3
 800186e:	4653      	mov	r3, sl
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	469a      	mov	sl, r3
 8001874:	9b03      	ldr	r3, [sp, #12]
 8001876:	4699      	mov	r9, r3
 8001878:	465b      	mov	r3, fp
 800187a:	1c58      	adds	r0, r3, #1
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	445b      	add	r3, fp
 8001882:	2b00      	cmp	r3, #0
 8001884:	dc00      	bgt.n	8001888 <__aeabi_dmul+0x13c>
 8001886:	e1b1      	b.n	8001bec <__aeabi_dmul+0x4a0>
 8001888:	4642      	mov	r2, r8
 800188a:	0752      	lsls	r2, r2, #29
 800188c:	d00b      	beq.n	80018a6 <__aeabi_dmul+0x15a>
 800188e:	220f      	movs	r2, #15
 8001890:	4641      	mov	r1, r8
 8001892:	400a      	ands	r2, r1
 8001894:	2a04      	cmp	r2, #4
 8001896:	d006      	beq.n	80018a6 <__aeabi_dmul+0x15a>
 8001898:	4642      	mov	r2, r8
 800189a:	1d11      	adds	r1, r2, #4
 800189c:	4541      	cmp	r1, r8
 800189e:	4192      	sbcs	r2, r2
 80018a0:	4688      	mov	r8, r1
 80018a2:	4252      	negs	r2, r2
 80018a4:	4492      	add	sl, r2
 80018a6:	4652      	mov	r2, sl
 80018a8:	01d2      	lsls	r2, r2, #7
 80018aa:	d506      	bpl.n	80018ba <__aeabi_dmul+0x16e>
 80018ac:	4652      	mov	r2, sl
 80018ae:	4b80      	ldr	r3, [pc, #512]	@ (8001ab0 <__aeabi_dmul+0x364>)
 80018b0:	401a      	ands	r2, r3
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	4692      	mov	sl, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	18c3      	adds	r3, r0, r3
 80018ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab4 <__aeabi_dmul+0x368>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dmul+0x176>
 80018c0:	e18f      	b.n	8001be2 <__aeabi_dmul+0x496>
 80018c2:	4642      	mov	r2, r8
 80018c4:	08d1      	lsrs	r1, r2, #3
 80018c6:	4652      	mov	r2, sl
 80018c8:	0752      	lsls	r2, r2, #29
 80018ca:	430a      	orrs	r2, r1
 80018cc:	4651      	mov	r1, sl
 80018ce:	055b      	lsls	r3, r3, #21
 80018d0:	024c      	lsls	r4, r1, #9
 80018d2:	0b24      	lsrs	r4, r4, #12
 80018d4:	0d5b      	lsrs	r3, r3, #21
 80018d6:	e797      	b.n	8001808 <__aeabi_dmul+0xbc>
 80018d8:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <__aeabi_dmul+0x35c>)
 80018da:	4326      	orrs	r6, r4
 80018dc:	469c      	mov	ip, r3
 80018de:	44e3      	add	fp, ip
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dmul+0x19a>
 80018e4:	e16f      	b.n	8001bc6 <__aeabi_dmul+0x47a>
 80018e6:	2303      	movs	r3, #3
 80018e8:	4649      	mov	r1, r9
 80018ea:	431d      	orrs	r5, r3
 80018ec:	9b00      	ldr	r3, [sp, #0]
 80018ee:	4059      	eors	r1, r3
 80018f0:	b2cb      	uxtb	r3, r1
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	2d0a      	cmp	r5, #10
 80018f6:	dd00      	ble.n	80018fa <__aeabi_dmul+0x1ae>
 80018f8:	e133      	b.n	8001b62 <__aeabi_dmul+0x416>
 80018fa:	2301      	movs	r3, #1
 80018fc:	40ab      	lsls	r3, r5
 80018fe:	001d      	movs	r5, r3
 8001900:	2303      	movs	r3, #3
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2288      	movs	r2, #136	@ 0x88
 8001906:	422a      	tst	r2, r5
 8001908:	d197      	bne.n	800183a <__aeabi_dmul+0xee>
 800190a:	4642      	mov	r2, r8
 800190c:	4643      	mov	r3, r8
 800190e:	0412      	lsls	r2, r2, #16
 8001910:	0c12      	lsrs	r2, r2, #16
 8001912:	0016      	movs	r6, r2
 8001914:	9801      	ldr	r0, [sp, #4]
 8001916:	0c1d      	lsrs	r5, r3, #16
 8001918:	0c03      	lsrs	r3, r0, #16
 800191a:	0400      	lsls	r0, r0, #16
 800191c:	0c00      	lsrs	r0, r0, #16
 800191e:	4346      	muls	r6, r0
 8001920:	46b4      	mov	ip, r6
 8001922:	001e      	movs	r6, r3
 8001924:	436e      	muls	r6, r5
 8001926:	9600      	str	r6, [sp, #0]
 8001928:	0016      	movs	r6, r2
 800192a:	0007      	movs	r7, r0
 800192c:	435e      	muls	r6, r3
 800192e:	4661      	mov	r1, ip
 8001930:	46b0      	mov	r8, r6
 8001932:	436f      	muls	r7, r5
 8001934:	0c0e      	lsrs	r6, r1, #16
 8001936:	44b8      	add	r8, r7
 8001938:	4446      	add	r6, r8
 800193a:	42b7      	cmp	r7, r6
 800193c:	d905      	bls.n	800194a <__aeabi_dmul+0x1fe>
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	0249      	lsls	r1, r1, #9
 8001942:	4688      	mov	r8, r1
 8001944:	9f00      	ldr	r7, [sp, #0]
 8001946:	4447      	add	r7, r8
 8001948:	9700      	str	r7, [sp, #0]
 800194a:	4661      	mov	r1, ip
 800194c:	0409      	lsls	r1, r1, #16
 800194e:	0c09      	lsrs	r1, r1, #16
 8001950:	0c37      	lsrs	r7, r6, #16
 8001952:	0436      	lsls	r6, r6, #16
 8001954:	468c      	mov	ip, r1
 8001956:	0031      	movs	r1, r6
 8001958:	4461      	add	r1, ip
 800195a:	9101      	str	r1, [sp, #4]
 800195c:	0011      	movs	r1, r2
 800195e:	0c26      	lsrs	r6, r4, #16
 8001960:	0424      	lsls	r4, r4, #16
 8001962:	0c24      	lsrs	r4, r4, #16
 8001964:	4361      	muls	r1, r4
 8001966:	468c      	mov	ip, r1
 8001968:	0021      	movs	r1, r4
 800196a:	4369      	muls	r1, r5
 800196c:	4689      	mov	r9, r1
 800196e:	4661      	mov	r1, ip
 8001970:	0c09      	lsrs	r1, r1, #16
 8001972:	4688      	mov	r8, r1
 8001974:	4372      	muls	r2, r6
 8001976:	444a      	add	r2, r9
 8001978:	4442      	add	r2, r8
 800197a:	4375      	muls	r5, r6
 800197c:	4591      	cmp	r9, r2
 800197e:	d903      	bls.n	8001988 <__aeabi_dmul+0x23c>
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	4688      	mov	r8, r1
 8001986:	4445      	add	r5, r8
 8001988:	0c11      	lsrs	r1, r2, #16
 800198a:	4688      	mov	r8, r1
 800198c:	4661      	mov	r1, ip
 800198e:	0409      	lsls	r1, r1, #16
 8001990:	0c09      	lsrs	r1, r1, #16
 8001992:	468c      	mov	ip, r1
 8001994:	0412      	lsls	r2, r2, #16
 8001996:	4462      	add	r2, ip
 8001998:	18b9      	adds	r1, r7, r2
 800199a:	9102      	str	r1, [sp, #8]
 800199c:	4651      	mov	r1, sl
 800199e:	0c09      	lsrs	r1, r1, #16
 80019a0:	468c      	mov	ip, r1
 80019a2:	4651      	mov	r1, sl
 80019a4:	040f      	lsls	r7, r1, #16
 80019a6:	0c3f      	lsrs	r7, r7, #16
 80019a8:	0039      	movs	r1, r7
 80019aa:	4341      	muls	r1, r0
 80019ac:	4445      	add	r5, r8
 80019ae:	4688      	mov	r8, r1
 80019b0:	4661      	mov	r1, ip
 80019b2:	4341      	muls	r1, r0
 80019b4:	468a      	mov	sl, r1
 80019b6:	4641      	mov	r1, r8
 80019b8:	4660      	mov	r0, ip
 80019ba:	0c09      	lsrs	r1, r1, #16
 80019bc:	4689      	mov	r9, r1
 80019be:	4358      	muls	r0, r3
 80019c0:	437b      	muls	r3, r7
 80019c2:	4453      	add	r3, sl
 80019c4:	444b      	add	r3, r9
 80019c6:	459a      	cmp	sl, r3
 80019c8:	d903      	bls.n	80019d2 <__aeabi_dmul+0x286>
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	0249      	lsls	r1, r1, #9
 80019ce:	4689      	mov	r9, r1
 80019d0:	4448      	add	r0, r9
 80019d2:	0c19      	lsrs	r1, r3, #16
 80019d4:	4689      	mov	r9, r1
 80019d6:	4641      	mov	r1, r8
 80019d8:	0409      	lsls	r1, r1, #16
 80019da:	0c09      	lsrs	r1, r1, #16
 80019dc:	4688      	mov	r8, r1
 80019de:	0039      	movs	r1, r7
 80019e0:	4361      	muls	r1, r4
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	4443      	add	r3, r8
 80019e6:	4688      	mov	r8, r1
 80019e8:	4661      	mov	r1, ip
 80019ea:	434c      	muls	r4, r1
 80019ec:	4371      	muls	r1, r6
 80019ee:	468c      	mov	ip, r1
 80019f0:	4641      	mov	r1, r8
 80019f2:	4377      	muls	r7, r6
 80019f4:	0c0e      	lsrs	r6, r1, #16
 80019f6:	193f      	adds	r7, r7, r4
 80019f8:	19f6      	adds	r6, r6, r7
 80019fa:	4448      	add	r0, r9
 80019fc:	42b4      	cmp	r4, r6
 80019fe:	d903      	bls.n	8001a08 <__aeabi_dmul+0x2bc>
 8001a00:	2180      	movs	r1, #128	@ 0x80
 8001a02:	0249      	lsls	r1, r1, #9
 8001a04:	4689      	mov	r9, r1
 8001a06:	44cc      	add	ip, r9
 8001a08:	9902      	ldr	r1, [sp, #8]
 8001a0a:	9f00      	ldr	r7, [sp, #0]
 8001a0c:	4689      	mov	r9, r1
 8001a0e:	0431      	lsls	r1, r6, #16
 8001a10:	444f      	add	r7, r9
 8001a12:	4689      	mov	r9, r1
 8001a14:	4641      	mov	r1, r8
 8001a16:	4297      	cmp	r7, r2
 8001a18:	4192      	sbcs	r2, r2
 8001a1a:	040c      	lsls	r4, r1, #16
 8001a1c:	0c24      	lsrs	r4, r4, #16
 8001a1e:	444c      	add	r4, r9
 8001a20:	18ff      	adds	r7, r7, r3
 8001a22:	4252      	negs	r2, r2
 8001a24:	1964      	adds	r4, r4, r5
 8001a26:	18a1      	adds	r1, r4, r2
 8001a28:	429f      	cmp	r7, r3
 8001a2a:	419b      	sbcs	r3, r3
 8001a2c:	4688      	mov	r8, r1
 8001a2e:	4682      	mov	sl, r0
 8001a30:	425b      	negs	r3, r3
 8001a32:	4699      	mov	r9, r3
 8001a34:	4590      	cmp	r8, r2
 8001a36:	4192      	sbcs	r2, r2
 8001a38:	42ac      	cmp	r4, r5
 8001a3a:	41a4      	sbcs	r4, r4
 8001a3c:	44c2      	add	sl, r8
 8001a3e:	44d1      	add	r9, sl
 8001a40:	4252      	negs	r2, r2
 8001a42:	4264      	negs	r4, r4
 8001a44:	4314      	orrs	r4, r2
 8001a46:	4599      	cmp	r9, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4582      	cmp	sl, r0
 8001a4c:	4192      	sbcs	r2, r2
 8001a4e:	425b      	negs	r3, r3
 8001a50:	4252      	negs	r2, r2
 8001a52:	4313      	orrs	r3, r2
 8001a54:	464a      	mov	r2, r9
 8001a56:	0c36      	lsrs	r6, r6, #16
 8001a58:	19a4      	adds	r4, r4, r6
 8001a5a:	18e3      	adds	r3, r4, r3
 8001a5c:	4463      	add	r3, ip
 8001a5e:	025b      	lsls	r3, r3, #9
 8001a60:	0dd2      	lsrs	r2, r2, #23
 8001a62:	431a      	orrs	r2, r3
 8001a64:	9901      	ldr	r1, [sp, #4]
 8001a66:	4692      	mov	sl, r2
 8001a68:	027a      	lsls	r2, r7, #9
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	1e50      	subs	r0, r2, #1
 8001a6e:	4182      	sbcs	r2, r0
 8001a70:	0dff      	lsrs	r7, r7, #23
 8001a72:	4317      	orrs	r7, r2
 8001a74:	464a      	mov	r2, r9
 8001a76:	0252      	lsls	r2, r2, #9
 8001a78:	4317      	orrs	r7, r2
 8001a7a:	46b8      	mov	r8, r7
 8001a7c:	01db      	lsls	r3, r3, #7
 8001a7e:	d500      	bpl.n	8001a82 <__aeabi_dmul+0x336>
 8001a80:	e6ed      	b.n	800185e <__aeabi_dmul+0x112>
 8001a82:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <__aeabi_dmul+0x36c>)
 8001a84:	9a03      	ldr	r2, [sp, #12]
 8001a86:	445b      	add	r3, fp
 8001a88:	4691      	mov	r9, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	dc00      	bgt.n	8001a90 <__aeabi_dmul+0x344>
 8001a8e:	e0ac      	b.n	8001bea <__aeabi_dmul+0x49e>
 8001a90:	003a      	movs	r2, r7
 8001a92:	0752      	lsls	r2, r2, #29
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dmul+0x34c>
 8001a96:	e710      	b.n	80018ba <__aeabi_dmul+0x16e>
 8001a98:	220f      	movs	r2, #15
 8001a9a:	4658      	mov	r0, fp
 8001a9c:	403a      	ands	r2, r7
 8001a9e:	2a04      	cmp	r2, #4
 8001aa0:	d000      	beq.n	8001aa4 <__aeabi_dmul+0x358>
 8001aa2:	e6f9      	b.n	8001898 <__aeabi_dmul+0x14c>
 8001aa4:	e709      	b.n	80018ba <__aeabi_dmul+0x16e>
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	fffffc01 	.word	0xfffffc01
 8001ab0:	feffffff 	.word	0xfeffffff
 8001ab4:	000007fe 	.word	0x000007fe
 8001ab8:	000003ff 	.word	0x000003ff
 8001abc:	0022      	movs	r2, r4
 8001abe:	4332      	orrs	r2, r6
 8001ac0:	d06f      	beq.n	8001ba2 <__aeabi_dmul+0x456>
 8001ac2:	2c00      	cmp	r4, #0
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dmul+0x37c>
 8001ac6:	e0c2      	b.n	8001c4e <__aeabi_dmul+0x502>
 8001ac8:	0020      	movs	r0, r4
 8001aca:	f000 fe63 	bl	8002794 <__clzsi2>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	3a0b      	subs	r2, #11
 8001ad4:	201d      	movs	r0, #29
 8001ad6:	1a82      	subs	r2, r0, r2
 8001ad8:	0030      	movs	r0, r6
 8001ada:	0019      	movs	r1, r3
 8001adc:	40d0      	lsrs	r0, r2
 8001ade:	3908      	subs	r1, #8
 8001ae0:	408c      	lsls	r4, r1
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	4322      	orrs	r2, r4
 8001ae6:	0034      	movs	r4, r6
 8001ae8:	408c      	lsls	r4, r1
 8001aea:	4659      	mov	r1, fp
 8001aec:	1acb      	subs	r3, r1, r3
 8001aee:	4986      	ldr	r1, [pc, #536]	@ (8001d08 <__aeabi_dmul+0x5bc>)
 8001af0:	468b      	mov	fp, r1
 8001af2:	449b      	add	fp, r3
 8001af4:	2d0a      	cmp	r5, #10
 8001af6:	dd00      	ble.n	8001afa <__aeabi_dmul+0x3ae>
 8001af8:	e6a4      	b.n	8001844 <__aeabi_dmul+0xf8>
 8001afa:	4649      	mov	r1, r9
 8001afc:	9b00      	ldr	r3, [sp, #0]
 8001afe:	9401      	str	r4, [sp, #4]
 8001b00:	4059      	eors	r1, r3
 8001b02:	b2cb      	uxtb	r3, r1
 8001b04:	0014      	movs	r4, r2
 8001b06:	2000      	movs	r0, #0
 8001b08:	9303      	str	r3, [sp, #12]
 8001b0a:	2d02      	cmp	r5, #2
 8001b0c:	dd00      	ble.n	8001b10 <__aeabi_dmul+0x3c4>
 8001b0e:	e667      	b.n	80017e0 <__aeabi_dmul+0x94>
 8001b10:	e6fb      	b.n	800190a <__aeabi_dmul+0x1be>
 8001b12:	4653      	mov	r3, sl
 8001b14:	4303      	orrs	r3, r0
 8001b16:	4698      	mov	r8, r3
 8001b18:	d03c      	beq.n	8001b94 <__aeabi_dmul+0x448>
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x3d6>
 8001b20:	e0a3      	b.n	8001c6a <__aeabi_dmul+0x51e>
 8001b22:	4650      	mov	r0, sl
 8001b24:	f000 fe36 	bl	8002794 <__clzsi2>
 8001b28:	230b      	movs	r3, #11
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	469c      	mov	ip, r3
 8001b2e:	0002      	movs	r2, r0
 8001b30:	4484      	add	ip, r0
 8001b32:	0011      	movs	r1, r2
 8001b34:	4650      	mov	r0, sl
 8001b36:	3908      	subs	r1, #8
 8001b38:	4088      	lsls	r0, r1
 8001b3a:	231d      	movs	r3, #29
 8001b3c:	4680      	mov	r8, r0
 8001b3e:	4660      	mov	r0, ip
 8001b40:	1a1b      	subs	r3, r3, r0
 8001b42:	0020      	movs	r0, r4
 8001b44:	40d8      	lsrs	r0, r3
 8001b46:	0003      	movs	r3, r0
 8001b48:	4640      	mov	r0, r8
 8001b4a:	4303      	orrs	r3, r0
 8001b4c:	469a      	mov	sl, r3
 8001b4e:	0023      	movs	r3, r4
 8001b50:	408b      	lsls	r3, r1
 8001b52:	4698      	mov	r8, r3
 8001b54:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <__aeabi_dmul+0x5bc>)
 8001b56:	2500      	movs	r5, #0
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	469b      	mov	fp, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	e61a      	b.n	8001798 <__aeabi_dmul+0x4c>
 8001b62:	2d0f      	cmp	r5, #15
 8001b64:	d000      	beq.n	8001b68 <__aeabi_dmul+0x41c>
 8001b66:	e0c9      	b.n	8001cfc <__aeabi_dmul+0x5b0>
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	031b      	lsls	r3, r3, #12
 8001b6e:	421a      	tst	r2, r3
 8001b70:	d002      	beq.n	8001b78 <__aeabi_dmul+0x42c>
 8001b72:	421c      	tst	r4, r3
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dmul+0x42c>
 8001b76:	e092      	b.n	8001c9e <__aeabi_dmul+0x552>
 8001b78:	2480      	movs	r4, #128	@ 0x80
 8001b7a:	4653      	mov	r3, sl
 8001b7c:	0324      	lsls	r4, r4, #12
 8001b7e:	431c      	orrs	r4, r3
 8001b80:	0324      	lsls	r4, r4, #12
 8001b82:	4642      	mov	r2, r8
 8001b84:	0b24      	lsrs	r4, r4, #12
 8001b86:	e63e      	b.n	8001806 <__aeabi_dmul+0xba>
 8001b88:	469b      	mov	fp, r3
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	250c      	movs	r5, #12
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	e601      	b.n	8001798 <__aeabi_dmul+0x4c>
 8001b94:	2300      	movs	r3, #0
 8001b96:	469a      	mov	sl, r3
 8001b98:	469b      	mov	fp, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	2504      	movs	r5, #4
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	e5fa      	b.n	8001798 <__aeabi_dmul+0x4c>
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430d      	orrs	r5, r1
 8001ba6:	2d0a      	cmp	r5, #10
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dmul+0x460>
 8001baa:	e64b      	b.n	8001844 <__aeabi_dmul+0xf8>
 8001bac:	4649      	mov	r1, r9
 8001bae:	9800      	ldr	r0, [sp, #0]
 8001bb0:	4041      	eors	r1, r0
 8001bb2:	b2c9      	uxtb	r1, r1
 8001bb4:	9103      	str	r1, [sp, #12]
 8001bb6:	2d02      	cmp	r5, #2
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dmul+0x470>
 8001bba:	e096      	b.n	8001cea <__aeabi_dmul+0x59e>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	e60c      	b.n	80017e0 <__aeabi_dmul+0x94>
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9a00      	ldr	r2, [sp, #0]
 8001bcc:	432b      	orrs	r3, r5
 8001bce:	4051      	eors	r1, r2
 8001bd0:	b2ca      	uxtb	r2, r1
 8001bd2:	9203      	str	r2, [sp, #12]
 8001bd4:	2b0a      	cmp	r3, #10
 8001bd6:	dd00      	ble.n	8001bda <__aeabi_dmul+0x48e>
 8001bd8:	e634      	b.n	8001844 <__aeabi_dmul+0xf8>
 8001bda:	2d00      	cmp	r5, #0
 8001bdc:	d157      	bne.n	8001c8e <__aeabi_dmul+0x542>
 8001bde:	9b03      	ldr	r3, [sp, #12]
 8001be0:	4699      	mov	r9, r3
 8001be2:	2400      	movs	r4, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <__aeabi_dmul+0x5c0>)
 8001be8:	e60e      	b.n	8001808 <__aeabi_dmul+0xbc>
 8001bea:	4658      	mov	r0, fp
 8001bec:	2101      	movs	r1, #1
 8001bee:	1ac9      	subs	r1, r1, r3
 8001bf0:	2938      	cmp	r1, #56	@ 0x38
 8001bf2:	dd00      	ble.n	8001bf6 <__aeabi_dmul+0x4aa>
 8001bf4:	e62f      	b.n	8001856 <__aeabi_dmul+0x10a>
 8001bf6:	291f      	cmp	r1, #31
 8001bf8:	dd56      	ble.n	8001ca8 <__aeabi_dmul+0x55c>
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	4654      	mov	r4, sl
 8001bfe:	4252      	negs	r2, r2
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	40dc      	lsrs	r4, r3
 8001c04:	2920      	cmp	r1, #32
 8001c06:	d007      	beq.n	8001c18 <__aeabi_dmul+0x4cc>
 8001c08:	4b41      	ldr	r3, [pc, #260]	@ (8001d10 <__aeabi_dmul+0x5c4>)
 8001c0a:	4642      	mov	r2, r8
 8001c0c:	469c      	mov	ip, r3
 8001c0e:	4653      	mov	r3, sl
 8001c10:	4460      	add	r0, ip
 8001c12:	4083      	lsls	r3, r0
 8001c14:	431a      	orrs	r2, r3
 8001c16:	4690      	mov	r8, r2
 8001c18:	4642      	mov	r2, r8
 8001c1a:	2107      	movs	r1, #7
 8001c1c:	1e53      	subs	r3, r2, #1
 8001c1e:	419a      	sbcs	r2, r3
 8001c20:	000b      	movs	r3, r1
 8001c22:	4322      	orrs	r2, r4
 8001c24:	4013      	ands	r3, r2
 8001c26:	2400      	movs	r4, #0
 8001c28:	4211      	tst	r1, r2
 8001c2a:	d009      	beq.n	8001c40 <__aeabi_dmul+0x4f4>
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d05d      	beq.n	8001cf0 <__aeabi_dmul+0x5a4>
 8001c34:	1d11      	adds	r1, r2, #4
 8001c36:	4291      	cmp	r1, r2
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	000a      	movs	r2, r1
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	075b      	lsls	r3, r3, #29
 8001c40:	08d2      	lsrs	r2, r2, #3
 8001c42:	431a      	orrs	r2, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	e5df      	b.n	8001808 <__aeabi_dmul+0xbc>
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	4699      	mov	r9, r3
 8001c4c:	e5fa      	b.n	8001844 <__aeabi_dmul+0xf8>
 8001c4e:	9801      	ldr	r0, [sp, #4]
 8001c50:	f000 fda0 	bl	8002794 <__clzsi2>
 8001c54:	0002      	movs	r2, r0
 8001c56:	0003      	movs	r3, r0
 8001c58:	3215      	adds	r2, #21
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	2a1c      	cmp	r2, #28
 8001c5e:	dc00      	bgt.n	8001c62 <__aeabi_dmul+0x516>
 8001c60:	e738      	b.n	8001ad4 <__aeabi_dmul+0x388>
 8001c62:	9a01      	ldr	r2, [sp, #4]
 8001c64:	3808      	subs	r0, #8
 8001c66:	4082      	lsls	r2, r0
 8001c68:	e73f      	b.n	8001aea <__aeabi_dmul+0x39e>
 8001c6a:	f000 fd93 	bl	8002794 <__clzsi2>
 8001c6e:	2315      	movs	r3, #21
 8001c70:	469c      	mov	ip, r3
 8001c72:	4484      	add	ip, r0
 8001c74:	0002      	movs	r2, r0
 8001c76:	4663      	mov	r3, ip
 8001c78:	3220      	adds	r2, #32
 8001c7a:	2b1c      	cmp	r3, #28
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_dmul+0x534>
 8001c7e:	e758      	b.n	8001b32 <__aeabi_dmul+0x3e6>
 8001c80:	2300      	movs	r3, #0
 8001c82:	4698      	mov	r8, r3
 8001c84:	0023      	movs	r3, r4
 8001c86:	3808      	subs	r0, #8
 8001c88:	4083      	lsls	r3, r0
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	e762      	b.n	8001b54 <__aeabi_dmul+0x408>
 8001c8e:	001d      	movs	r5, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	2400      	movs	r4, #0
 8001c94:	2002      	movs	r0, #2
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	e5a2      	b.n	80017e0 <__aeabi_dmul+0x94>
 8001c9a:	9002      	str	r0, [sp, #8]
 8001c9c:	e632      	b.n	8001904 <__aeabi_dmul+0x1b8>
 8001c9e:	431c      	orrs	r4, r3
 8001ca0:	9b00      	ldr	r3, [sp, #0]
 8001ca2:	9a01      	ldr	r2, [sp, #4]
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	e5ae      	b.n	8001806 <__aeabi_dmul+0xba>
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <__aeabi_dmul+0x5c8>)
 8001caa:	4652      	mov	r2, sl
 8001cac:	18c3      	adds	r3, r0, r3
 8001cae:	4640      	mov	r0, r8
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	40c8      	lsrs	r0, r1
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	4098      	lsls	r0, r3
 8001cba:	0003      	movs	r3, r0
 8001cbc:	1e58      	subs	r0, r3, #1
 8001cbe:	4183      	sbcs	r3, r0
 8001cc0:	4654      	mov	r4, sl
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	40cc      	lsrs	r4, r1
 8001cc6:	0753      	lsls	r3, r2, #29
 8001cc8:	d009      	beq.n	8001cde <__aeabi_dmul+0x592>
 8001cca:	230f      	movs	r3, #15
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d005      	beq.n	8001cde <__aeabi_dmul+0x592>
 8001cd2:	1d13      	adds	r3, r2, #4
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	4192      	sbcs	r2, r2
 8001cd8:	4252      	negs	r2, r2
 8001cda:	18a4      	adds	r4, r4, r2
 8001cdc:	001a      	movs	r2, r3
 8001cde:	0223      	lsls	r3, r4, #8
 8001ce0:	d508      	bpl.n	8001cf4 <__aeabi_dmul+0x5a8>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	2400      	movs	r4, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	e58e      	b.n	8001808 <__aeabi_dmul+0xbc>
 8001cea:	4689      	mov	r9, r1
 8001cec:	2400      	movs	r4, #0
 8001cee:	e58b      	b.n	8001808 <__aeabi_dmul+0xbc>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e7a5      	b.n	8001c40 <__aeabi_dmul+0x4f4>
 8001cf4:	0763      	lsls	r3, r4, #29
 8001cf6:	0264      	lsls	r4, r4, #9
 8001cf8:	0b24      	lsrs	r4, r4, #12
 8001cfa:	e7a1      	b.n	8001c40 <__aeabi_dmul+0x4f4>
 8001cfc:	9b00      	ldr	r3, [sp, #0]
 8001cfe:	46a2      	mov	sl, r4
 8001d00:	4699      	mov	r9, r3
 8001d02:	9b01      	ldr	r3, [sp, #4]
 8001d04:	4698      	mov	r8, r3
 8001d06:	e737      	b.n	8001b78 <__aeabi_dmul+0x42c>
 8001d08:	fffffc0d 	.word	0xfffffc0d
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	0000043e 	.word	0x0000043e
 8001d14:	0000041e 	.word	0x0000041e

08001d18 <__aeabi_dsub>:
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	464e      	mov	r6, r9
 8001d1e:	4645      	mov	r5, r8
 8001d20:	46de      	mov	lr, fp
 8001d22:	b5e0      	push	{r5, r6, r7, lr}
 8001d24:	b083      	sub	sp, #12
 8001d26:	9000      	str	r0, [sp, #0]
 8001d28:	9101      	str	r1, [sp, #4]
 8001d2a:	030c      	lsls	r4, r1, #12
 8001d2c:	004d      	lsls	r5, r1, #1
 8001d2e:	0fce      	lsrs	r6, r1, #31
 8001d30:	0a61      	lsrs	r1, r4, #9
 8001d32:	9c00      	ldr	r4, [sp, #0]
 8001d34:	005f      	lsls	r7, r3, #1
 8001d36:	0f64      	lsrs	r4, r4, #29
 8001d38:	430c      	orrs	r4, r1
 8001d3a:	9900      	ldr	r1, [sp, #0]
 8001d3c:	9200      	str	r2, [sp, #0]
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	00c8      	lsls	r0, r1, #3
 8001d42:	0319      	lsls	r1, r3, #12
 8001d44:	0d7b      	lsrs	r3, r7, #21
 8001d46:	4699      	mov	r9, r3
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	4fcc      	ldr	r7, [pc, #816]	@ (800207c <__aeabi_dsub+0x364>)
 8001d4c:	0fdb      	lsrs	r3, r3, #31
 8001d4e:	469c      	mov	ip, r3
 8001d50:	0a4b      	lsrs	r3, r1, #9
 8001d52:	9900      	ldr	r1, [sp, #0]
 8001d54:	4680      	mov	r8, r0
 8001d56:	0f49      	lsrs	r1, r1, #29
 8001d58:	4319      	orrs	r1, r3
 8001d5a:	9b00      	ldr	r3, [sp, #0]
 8001d5c:	468b      	mov	fp, r1
 8001d5e:	00da      	lsls	r2, r3, #3
 8001d60:	4692      	mov	sl, r2
 8001d62:	0d6d      	lsrs	r5, r5, #21
 8001d64:	45b9      	cmp	r9, r7
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x52>
 8001d68:	e0bf      	b.n	8001eea <__aeabi_dsub+0x1d2>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	4059      	eors	r1, r3
 8001d70:	464b      	mov	r3, r9
 8001d72:	468c      	mov	ip, r1
 8001d74:	1aeb      	subs	r3, r5, r3
 8001d76:	428e      	cmp	r6, r1
 8001d78:	d075      	beq.n	8001e66 <__aeabi_dsub+0x14e>
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	dc00      	bgt.n	8001d80 <__aeabi_dsub+0x68>
 8001d7e:	e2a3      	b.n	80022c8 <__aeabi_dsub+0x5b0>
 8001d80:	4649      	mov	r1, r9
 8001d82:	2900      	cmp	r1, #0
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x70>
 8001d86:	e0ce      	b.n	8001f26 <__aeabi_dsub+0x20e>
 8001d88:	42bd      	cmp	r5, r7
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x76>
 8001d8c:	e200      	b.n	8002190 <__aeabi_dsub+0x478>
 8001d8e:	2701      	movs	r7, #1
 8001d90:	2b38      	cmp	r3, #56	@ 0x38
 8001d92:	dc19      	bgt.n	8001dc8 <__aeabi_dsub+0xb0>
 8001d94:	2780      	movs	r7, #128	@ 0x80
 8001d96:	4659      	mov	r1, fp
 8001d98:	043f      	lsls	r7, r7, #16
 8001d9a:	4339      	orrs	r1, r7
 8001d9c:	468b      	mov	fp, r1
 8001d9e:	2b1f      	cmp	r3, #31
 8001da0:	dd00      	ble.n	8001da4 <__aeabi_dsub+0x8c>
 8001da2:	e1fa      	b.n	800219a <__aeabi_dsub+0x482>
 8001da4:	2720      	movs	r7, #32
 8001da6:	1af9      	subs	r1, r7, r3
 8001da8:	468c      	mov	ip, r1
 8001daa:	4659      	mov	r1, fp
 8001dac:	4667      	mov	r7, ip
 8001dae:	40b9      	lsls	r1, r7
 8001db0:	000f      	movs	r7, r1
 8001db2:	0011      	movs	r1, r2
 8001db4:	40d9      	lsrs	r1, r3
 8001db6:	430f      	orrs	r7, r1
 8001db8:	4661      	mov	r1, ip
 8001dba:	408a      	lsls	r2, r1
 8001dbc:	1e51      	subs	r1, r2, #1
 8001dbe:	418a      	sbcs	r2, r1
 8001dc0:	4659      	mov	r1, fp
 8001dc2:	40d9      	lsrs	r1, r3
 8001dc4:	4317      	orrs	r7, r2
 8001dc6:	1a64      	subs	r4, r4, r1
 8001dc8:	1bc7      	subs	r7, r0, r7
 8001dca:	42b8      	cmp	r0, r7
 8001dcc:	4180      	sbcs	r0, r0
 8001dce:	4240      	negs	r0, r0
 8001dd0:	1a24      	subs	r4, r4, r0
 8001dd2:	0223      	lsls	r3, r4, #8
 8001dd4:	d400      	bmi.n	8001dd8 <__aeabi_dsub+0xc0>
 8001dd6:	e140      	b.n	800205a <__aeabi_dsub+0x342>
 8001dd8:	0264      	lsls	r4, r4, #9
 8001dda:	0a64      	lsrs	r4, r4, #9
 8001ddc:	2c00      	cmp	r4, #0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0xca>
 8001de0:	e154      	b.n	800208c <__aeabi_dsub+0x374>
 8001de2:	0020      	movs	r0, r4
 8001de4:	f000 fcd6 	bl	8002794 <__clzsi2>
 8001de8:	0003      	movs	r3, r0
 8001dea:	3b08      	subs	r3, #8
 8001dec:	2120      	movs	r1, #32
 8001dee:	0038      	movs	r0, r7
 8001df0:	1aca      	subs	r2, r1, r3
 8001df2:	40d0      	lsrs	r0, r2
 8001df4:	409c      	lsls	r4, r3
 8001df6:	0002      	movs	r2, r0
 8001df8:	409f      	lsls	r7, r3
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	429d      	cmp	r5, r3
 8001dfe:	dd00      	ble.n	8001e02 <__aeabi_dsub+0xea>
 8001e00:	e1a6      	b.n	8002150 <__aeabi_dsub+0x438>
 8001e02:	1b58      	subs	r0, r3, r5
 8001e04:	3001      	adds	r0, #1
 8001e06:	1a09      	subs	r1, r1, r0
 8001e08:	003c      	movs	r4, r7
 8001e0a:	408f      	lsls	r7, r1
 8001e0c:	40c4      	lsrs	r4, r0
 8001e0e:	1e7b      	subs	r3, r7, #1
 8001e10:	419f      	sbcs	r7, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	408b      	lsls	r3, r1
 8001e16:	4327      	orrs	r7, r4
 8001e18:	431f      	orrs	r7, r3
 8001e1a:	40c2      	lsrs	r2, r0
 8001e1c:	003b      	movs	r3, r7
 8001e1e:	0014      	movs	r4, r2
 8001e20:	2500      	movs	r5, #0
 8001e22:	4313      	orrs	r3, r2
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x110>
 8001e26:	e1f7      	b.n	8002218 <__aeabi_dsub+0x500>
 8001e28:	077b      	lsls	r3, r7, #29
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x116>
 8001e2c:	e377      	b.n	800251e <__aeabi_dsub+0x806>
 8001e2e:	230f      	movs	r3, #15
 8001e30:	0038      	movs	r0, r7
 8001e32:	403b      	ands	r3, r7
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d004      	beq.n	8001e42 <__aeabi_dsub+0x12a>
 8001e38:	1d38      	adds	r0, r7, #4
 8001e3a:	42b8      	cmp	r0, r7
 8001e3c:	41bf      	sbcs	r7, r7
 8001e3e:	427f      	negs	r7, r7
 8001e40:	19e4      	adds	r4, r4, r7
 8001e42:	0223      	lsls	r3, r4, #8
 8001e44:	d400      	bmi.n	8001e48 <__aeabi_dsub+0x130>
 8001e46:	e368      	b.n	800251a <__aeabi_dsub+0x802>
 8001e48:	4b8c      	ldr	r3, [pc, #560]	@ (800207c <__aeabi_dsub+0x364>)
 8001e4a:	3501      	adds	r5, #1
 8001e4c:	429d      	cmp	r5, r3
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x13a>
 8001e50:	e0f4      	b.n	800203c <__aeabi_dsub+0x324>
 8001e52:	4b8b      	ldr	r3, [pc, #556]	@ (8002080 <__aeabi_dsub+0x368>)
 8001e54:	056d      	lsls	r5, r5, #21
 8001e56:	401c      	ands	r4, r3
 8001e58:	0d6d      	lsrs	r5, r5, #21
 8001e5a:	0767      	lsls	r7, r4, #29
 8001e5c:	08c0      	lsrs	r0, r0, #3
 8001e5e:	0264      	lsls	r4, r4, #9
 8001e60:	4307      	orrs	r7, r0
 8001e62:	0b24      	lsrs	r4, r4, #12
 8001e64:	e0ec      	b.n	8002040 <__aeabi_dsub+0x328>
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x154>
 8001e6a:	e329      	b.n	80024c0 <__aeabi_dsub+0x7a8>
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x15c>
 8001e72:	e0d6      	b.n	8002022 <__aeabi_dsub+0x30a>
 8001e74:	4659      	mov	r1, fp
 8001e76:	4311      	orrs	r1, r2
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x164>
 8001e7a:	e12e      	b.n	80020da <__aeabi_dsub+0x3c2>
 8001e7c:	1e59      	subs	r1, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x16c>
 8001e82:	e1e6      	b.n	8002252 <__aeabi_dsub+0x53a>
 8001e84:	42bb      	cmp	r3, r7
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x172>
 8001e88:	e182      	b.n	8002190 <__aeabi_dsub+0x478>
 8001e8a:	2701      	movs	r7, #1
 8001e8c:	000b      	movs	r3, r1
 8001e8e:	2938      	cmp	r1, #56	@ 0x38
 8001e90:	dc14      	bgt.n	8001ebc <__aeabi_dsub+0x1a4>
 8001e92:	2b1f      	cmp	r3, #31
 8001e94:	dd00      	ble.n	8001e98 <__aeabi_dsub+0x180>
 8001e96:	e23c      	b.n	8002312 <__aeabi_dsub+0x5fa>
 8001e98:	2720      	movs	r7, #32
 8001e9a:	1af9      	subs	r1, r7, r3
 8001e9c:	468c      	mov	ip, r1
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	4667      	mov	r7, ip
 8001ea2:	40b9      	lsls	r1, r7
 8001ea4:	000f      	movs	r7, r1
 8001ea6:	0011      	movs	r1, r2
 8001ea8:	40d9      	lsrs	r1, r3
 8001eaa:	430f      	orrs	r7, r1
 8001eac:	4661      	mov	r1, ip
 8001eae:	408a      	lsls	r2, r1
 8001eb0:	1e51      	subs	r1, r2, #1
 8001eb2:	418a      	sbcs	r2, r1
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	40d9      	lsrs	r1, r3
 8001eb8:	4317      	orrs	r7, r2
 8001eba:	1864      	adds	r4, r4, r1
 8001ebc:	183f      	adds	r7, r7, r0
 8001ebe:	4287      	cmp	r7, r0
 8001ec0:	4180      	sbcs	r0, r0
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1824      	adds	r4, r4, r0
 8001ec6:	0223      	lsls	r3, r4, #8
 8001ec8:	d400      	bmi.n	8001ecc <__aeabi_dsub+0x1b4>
 8001eca:	e0c6      	b.n	800205a <__aeabi_dsub+0x342>
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800207c <__aeabi_dsub+0x364>)
 8001ece:	3501      	adds	r5, #1
 8001ed0:	429d      	cmp	r5, r3
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_dsub+0x1be>
 8001ed4:	e0b2      	b.n	800203c <__aeabi_dsub+0x324>
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4b69      	ldr	r3, [pc, #420]	@ (8002080 <__aeabi_dsub+0x368>)
 8001eda:	087a      	lsrs	r2, r7, #1
 8001edc:	401c      	ands	r4, r3
 8001ede:	4039      	ands	r1, r7
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	07e7      	lsls	r7, r4, #31
 8001ee4:	4317      	orrs	r7, r2
 8001ee6:	0864      	lsrs	r4, r4, #1
 8001ee8:	e79e      	b.n	8001e28 <__aeabi_dsub+0x110>
 8001eea:	4b66      	ldr	r3, [pc, #408]	@ (8002084 <__aeabi_dsub+0x36c>)
 8001eec:	4311      	orrs	r1, r2
 8001eee:	468a      	mov	sl, r1
 8001ef0:	18eb      	adds	r3, r5, r3
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d028      	beq.n	8001f48 <__aeabi_dsub+0x230>
 8001ef6:	4566      	cmp	r6, ip
 8001ef8:	d02c      	beq.n	8001f54 <__aeabi_dsub+0x23c>
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d05b      	beq.n	8001fb6 <__aeabi_dsub+0x29e>
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x1ec>
 8001f02:	e12c      	b.n	800215e <__aeabi_dsub+0x446>
 8001f04:	465b      	mov	r3, fp
 8001f06:	4666      	mov	r6, ip
 8001f08:	075f      	lsls	r7, r3, #29
 8001f0a:	08d2      	lsrs	r2, r2, #3
 8001f0c:	4317      	orrs	r7, r2
 8001f0e:	08dd      	lsrs	r5, r3, #3
 8001f10:	003b      	movs	r3, r7
 8001f12:	432b      	orrs	r3, r5
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x200>
 8001f16:	e0e2      	b.n	80020de <__aeabi_dsub+0x3c6>
 8001f18:	2480      	movs	r4, #128	@ 0x80
 8001f1a:	0324      	lsls	r4, r4, #12
 8001f1c:	432c      	orrs	r4, r5
 8001f1e:	0324      	lsls	r4, r4, #12
 8001f20:	4d56      	ldr	r5, [pc, #344]	@ (800207c <__aeabi_dsub+0x364>)
 8001f22:	0b24      	lsrs	r4, r4, #12
 8001f24:	e08c      	b.n	8002040 <__aeabi_dsub+0x328>
 8001f26:	4659      	mov	r1, fp
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x216>
 8001f2c:	e0d5      	b.n	80020da <__aeabi_dsub+0x3c2>
 8001f2e:	1e59      	subs	r1, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x21e>
 8001f34:	e1b9      	b.n	80022aa <__aeabi_dsub+0x592>
 8001f36:	42bb      	cmp	r3, r7
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x224>
 8001f3a:	e1b1      	b.n	80022a0 <__aeabi_dsub+0x588>
 8001f3c:	2701      	movs	r7, #1
 8001f3e:	000b      	movs	r3, r1
 8001f40:	2938      	cmp	r1, #56	@ 0x38
 8001f42:	dd00      	ble.n	8001f46 <__aeabi_dsub+0x22e>
 8001f44:	e740      	b.n	8001dc8 <__aeabi_dsub+0xb0>
 8001f46:	e72a      	b.n	8001d9e <__aeabi_dsub+0x86>
 8001f48:	4661      	mov	r1, ip
 8001f4a:	2701      	movs	r7, #1
 8001f4c:	4079      	eors	r1, r7
 8001f4e:	468c      	mov	ip, r1
 8001f50:	4566      	cmp	r6, ip
 8001f52:	d1d2      	bne.n	8001efa <__aeabi_dsub+0x1e2>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x242>
 8001f58:	e0c5      	b.n	80020e6 <__aeabi_dsub+0x3ce>
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dsub+0x248>
 8001f5e:	e155      	b.n	800220c <__aeabi_dsub+0x4f4>
 8001f60:	464b      	mov	r3, r9
 8001f62:	0025      	movs	r5, r4
 8001f64:	4305      	orrs	r5, r0
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x252>
 8001f68:	e212      	b.n	8002390 <__aeabi_dsub+0x678>
 8001f6a:	1e59      	subs	r1, r3, #1
 8001f6c:	468c      	mov	ip, r1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x25c>
 8001f72:	e249      	b.n	8002408 <__aeabi_dsub+0x6f0>
 8001f74:	4d41      	ldr	r5, [pc, #260]	@ (800207c <__aeabi_dsub+0x364>)
 8001f76:	42ab      	cmp	r3, r5
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x264>
 8001f7a:	e28f      	b.n	800249c <__aeabi_dsub+0x784>
 8001f7c:	2701      	movs	r7, #1
 8001f7e:	2938      	cmp	r1, #56	@ 0x38
 8001f80:	dc11      	bgt.n	8001fa6 <__aeabi_dsub+0x28e>
 8001f82:	4663      	mov	r3, ip
 8001f84:	2b1f      	cmp	r3, #31
 8001f86:	dd00      	ble.n	8001f8a <__aeabi_dsub+0x272>
 8001f88:	e25b      	b.n	8002442 <__aeabi_dsub+0x72a>
 8001f8a:	4661      	mov	r1, ip
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	0027      	movs	r7, r4
 8001f90:	1a5b      	subs	r3, r3, r1
 8001f92:	0005      	movs	r5, r0
 8001f94:	4098      	lsls	r0, r3
 8001f96:	409f      	lsls	r7, r3
 8001f98:	40cd      	lsrs	r5, r1
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	40cc      	lsrs	r4, r1
 8001fa0:	432f      	orrs	r7, r5
 8001fa2:	4307      	orrs	r7, r0
 8001fa4:	44a3      	add	fp, r4
 8001fa6:	18bf      	adds	r7, r7, r2
 8001fa8:	4297      	cmp	r7, r2
 8001faa:	4192      	sbcs	r2, r2
 8001fac:	4252      	negs	r2, r2
 8001fae:	445a      	add	r2, fp
 8001fb0:	0014      	movs	r4, r2
 8001fb2:	464d      	mov	r5, r9
 8001fb4:	e787      	b.n	8001ec6 <__aeabi_dsub+0x1ae>
 8001fb6:	4f34      	ldr	r7, [pc, #208]	@ (8002088 <__aeabi_dsub+0x370>)
 8001fb8:	1c6b      	adds	r3, r5, #1
 8001fba:	423b      	tst	r3, r7
 8001fbc:	d000      	beq.n	8001fc0 <__aeabi_dsub+0x2a8>
 8001fbe:	e0b6      	b.n	800212e <__aeabi_dsub+0x416>
 8001fc0:	4659      	mov	r1, fp
 8001fc2:	0023      	movs	r3, r4
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	000f      	movs	r7, r1
 8001fc8:	4303      	orrs	r3, r0
 8001fca:	2d00      	cmp	r5, #0
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_dsub+0x2b8>
 8001fce:	e126      	b.n	800221e <__aeabi_dsub+0x506>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dsub+0x2be>
 8001fd4:	e1c0      	b.n	8002358 <__aeabi_dsub+0x640>
 8001fd6:	2900      	cmp	r1, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x2c4>
 8001fda:	e0a1      	b.n	8002120 <__aeabi_dsub+0x408>
 8001fdc:	1a83      	subs	r3, r0, r2
 8001fde:	4698      	mov	r8, r3
 8001fe0:	465b      	mov	r3, fp
 8001fe2:	4540      	cmp	r0, r8
 8001fe4:	41ad      	sbcs	r5, r5
 8001fe6:	1ae3      	subs	r3, r4, r3
 8001fe8:	426d      	negs	r5, r5
 8001fea:	1b5b      	subs	r3, r3, r5
 8001fec:	2580      	movs	r5, #128	@ 0x80
 8001fee:	042d      	lsls	r5, r5, #16
 8001ff0:	422b      	tst	r3, r5
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x2de>
 8001ff4:	e14b      	b.n	800228e <__aeabi_dsub+0x576>
 8001ff6:	465b      	mov	r3, fp
 8001ff8:	1a10      	subs	r0, r2, r0
 8001ffa:	4282      	cmp	r2, r0
 8001ffc:	4192      	sbcs	r2, r2
 8001ffe:	1b1c      	subs	r4, r3, r4
 8002000:	0007      	movs	r7, r0
 8002002:	2601      	movs	r6, #1
 8002004:	4663      	mov	r3, ip
 8002006:	4252      	negs	r2, r2
 8002008:	1aa4      	subs	r4, r4, r2
 800200a:	4327      	orrs	r7, r4
 800200c:	401e      	ands	r6, r3
 800200e:	2f00      	cmp	r7, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x2fc>
 8002012:	e142      	b.n	800229a <__aeabi_dsub+0x582>
 8002014:	422c      	tst	r4, r5
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x302>
 8002018:	e26d      	b.n	80024f6 <__aeabi_dsub+0x7de>
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <__aeabi_dsub+0x368>)
 800201c:	2501      	movs	r5, #1
 800201e:	401c      	ands	r4, r3
 8002020:	e71b      	b.n	8001e5a <__aeabi_dsub+0x142>
 8002022:	42bd      	cmp	r5, r7
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x310>
 8002026:	e13b      	b.n	80022a0 <__aeabi_dsub+0x588>
 8002028:	2701      	movs	r7, #1
 800202a:	2b38      	cmp	r3, #56	@ 0x38
 800202c:	dd00      	ble.n	8002030 <__aeabi_dsub+0x318>
 800202e:	e745      	b.n	8001ebc <__aeabi_dsub+0x1a4>
 8002030:	2780      	movs	r7, #128	@ 0x80
 8002032:	4659      	mov	r1, fp
 8002034:	043f      	lsls	r7, r7, #16
 8002036:	4339      	orrs	r1, r7
 8002038:	468b      	mov	fp, r1
 800203a:	e72a      	b.n	8001e92 <__aeabi_dsub+0x17a>
 800203c:	2400      	movs	r4, #0
 800203e:	2700      	movs	r7, #0
 8002040:	052d      	lsls	r5, r5, #20
 8002042:	4325      	orrs	r5, r4
 8002044:	07f6      	lsls	r6, r6, #31
 8002046:	4335      	orrs	r5, r6
 8002048:	0038      	movs	r0, r7
 800204a:	0029      	movs	r1, r5
 800204c:	b003      	add	sp, #12
 800204e:	bcf0      	pop	{r4, r5, r6, r7}
 8002050:	46bb      	mov	fp, r7
 8002052:	46b2      	mov	sl, r6
 8002054:	46a9      	mov	r9, r5
 8002056:	46a0      	mov	r8, r4
 8002058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205a:	077b      	lsls	r3, r7, #29
 800205c:	d004      	beq.n	8002068 <__aeabi_dsub+0x350>
 800205e:	230f      	movs	r3, #15
 8002060:	403b      	ands	r3, r7
 8002062:	2b04      	cmp	r3, #4
 8002064:	d000      	beq.n	8002068 <__aeabi_dsub+0x350>
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x120>
 8002068:	002b      	movs	r3, r5
 800206a:	08f8      	lsrs	r0, r7, #3
 800206c:	4a03      	ldr	r2, [pc, #12]	@ (800207c <__aeabi_dsub+0x364>)
 800206e:	0767      	lsls	r7, r4, #29
 8002070:	4307      	orrs	r7, r0
 8002072:	08e5      	lsrs	r5, r4, #3
 8002074:	4293      	cmp	r3, r2
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x362>
 8002078:	e74a      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 800207a:	e0a5      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 800207c:	000007ff 	.word	0x000007ff
 8002080:	ff7fffff 	.word	0xff7fffff
 8002084:	fffff801 	.word	0xfffff801
 8002088:	000007fe 	.word	0x000007fe
 800208c:	0038      	movs	r0, r7
 800208e:	f000 fb81 	bl	8002794 <__clzsi2>
 8002092:	0003      	movs	r3, r0
 8002094:	3318      	adds	r3, #24
 8002096:	2b1f      	cmp	r3, #31
 8002098:	dc00      	bgt.n	800209c <__aeabi_dsub+0x384>
 800209a:	e6a7      	b.n	8001dec <__aeabi_dsub+0xd4>
 800209c:	003a      	movs	r2, r7
 800209e:	3808      	subs	r0, #8
 80020a0:	4082      	lsls	r2, r0
 80020a2:	429d      	cmp	r5, r3
 80020a4:	dd00      	ble.n	80020a8 <__aeabi_dsub+0x390>
 80020a6:	e08a      	b.n	80021be <__aeabi_dsub+0x4a6>
 80020a8:	1b5b      	subs	r3, r3, r5
 80020aa:	1c58      	adds	r0, r3, #1
 80020ac:	281f      	cmp	r0, #31
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_dsub+0x39a>
 80020b0:	e1d8      	b.n	8002464 <__aeabi_dsub+0x74c>
 80020b2:	0017      	movs	r7, r2
 80020b4:	3b1f      	subs	r3, #31
 80020b6:	40df      	lsrs	r7, r3
 80020b8:	2820      	cmp	r0, #32
 80020ba:	d005      	beq.n	80020c8 <__aeabi_dsub+0x3b0>
 80020bc:	2340      	movs	r3, #64	@ 0x40
 80020be:	1a1b      	subs	r3, r3, r0
 80020c0:	409a      	lsls	r2, r3
 80020c2:	1e53      	subs	r3, r2, #1
 80020c4:	419a      	sbcs	r2, r3
 80020c6:	4317      	orrs	r7, r2
 80020c8:	2500      	movs	r5, #0
 80020ca:	2f00      	cmp	r7, #0
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x3b8>
 80020ce:	e0e5      	b.n	800229c <__aeabi_dsub+0x584>
 80020d0:	077b      	lsls	r3, r7, #29
 80020d2:	d000      	beq.n	80020d6 <__aeabi_dsub+0x3be>
 80020d4:	e6ab      	b.n	8001e2e <__aeabi_dsub+0x116>
 80020d6:	002c      	movs	r4, r5
 80020d8:	e7c6      	b.n	8002068 <__aeabi_dsub+0x350>
 80020da:	08c0      	lsrs	r0, r0, #3
 80020dc:	e7c6      	b.n	800206c <__aeabi_dsub+0x354>
 80020de:	2700      	movs	r7, #0
 80020e0:	2400      	movs	r4, #0
 80020e2:	4dd1      	ldr	r5, [pc, #836]	@ (8002428 <__aeabi_dsub+0x710>)
 80020e4:	e7ac      	b.n	8002040 <__aeabi_dsub+0x328>
 80020e6:	4fd1      	ldr	r7, [pc, #836]	@ (800242c <__aeabi_dsub+0x714>)
 80020e8:	1c6b      	adds	r3, r5, #1
 80020ea:	423b      	tst	r3, r7
 80020ec:	d171      	bne.n	80021d2 <__aeabi_dsub+0x4ba>
 80020ee:	0023      	movs	r3, r4
 80020f0:	4303      	orrs	r3, r0
 80020f2:	2d00      	cmp	r5, #0
 80020f4:	d000      	beq.n	80020f8 <__aeabi_dsub+0x3e0>
 80020f6:	e14e      	b.n	8002396 <__aeabi_dsub+0x67e>
 80020f8:	4657      	mov	r7, sl
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x3e8>
 80020fe:	e1b5      	b.n	800246c <__aeabi_dsub+0x754>
 8002100:	2f00      	cmp	r7, #0
 8002102:	d00d      	beq.n	8002120 <__aeabi_dsub+0x408>
 8002104:	1883      	adds	r3, r0, r2
 8002106:	4283      	cmp	r3, r0
 8002108:	4180      	sbcs	r0, r0
 800210a:	445c      	add	r4, fp
 800210c:	4240      	negs	r0, r0
 800210e:	1824      	adds	r4, r4, r0
 8002110:	0222      	lsls	r2, r4, #8
 8002112:	d500      	bpl.n	8002116 <__aeabi_dsub+0x3fe>
 8002114:	e1c8      	b.n	80024a8 <__aeabi_dsub+0x790>
 8002116:	001f      	movs	r7, r3
 8002118:	4698      	mov	r8, r3
 800211a:	4327      	orrs	r7, r4
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x408>
 800211e:	e0bc      	b.n	800229a <__aeabi_dsub+0x582>
 8002120:	4643      	mov	r3, r8
 8002122:	0767      	lsls	r7, r4, #29
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	431f      	orrs	r7, r3
 8002128:	08e5      	lsrs	r5, r4, #3
 800212a:	2300      	movs	r3, #0
 800212c:	e04c      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 800212e:	1a83      	subs	r3, r0, r2
 8002130:	4698      	mov	r8, r3
 8002132:	465b      	mov	r3, fp
 8002134:	4540      	cmp	r0, r8
 8002136:	41bf      	sbcs	r7, r7
 8002138:	1ae3      	subs	r3, r4, r3
 800213a:	427f      	negs	r7, r7
 800213c:	1bdb      	subs	r3, r3, r7
 800213e:	021f      	lsls	r7, r3, #8
 8002140:	d47c      	bmi.n	800223c <__aeabi_dsub+0x524>
 8002142:	4647      	mov	r7, r8
 8002144:	431f      	orrs	r7, r3
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x432>
 8002148:	e0a6      	b.n	8002298 <__aeabi_dsub+0x580>
 800214a:	001c      	movs	r4, r3
 800214c:	4647      	mov	r7, r8
 800214e:	e645      	b.n	8001ddc <__aeabi_dsub+0xc4>
 8002150:	4cb7      	ldr	r4, [pc, #732]	@ (8002430 <__aeabi_dsub+0x718>)
 8002152:	1aed      	subs	r5, r5, r3
 8002154:	4014      	ands	r4, r2
 8002156:	077b      	lsls	r3, r7, #29
 8002158:	d000      	beq.n	800215c <__aeabi_dsub+0x444>
 800215a:	e780      	b.n	800205e <__aeabi_dsub+0x346>
 800215c:	e784      	b.n	8002068 <__aeabi_dsub+0x350>
 800215e:	464b      	mov	r3, r9
 8002160:	0025      	movs	r5, r4
 8002162:	4305      	orrs	r5, r0
 8002164:	d066      	beq.n	8002234 <__aeabi_dsub+0x51c>
 8002166:	1e5f      	subs	r7, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d100      	bne.n	800216e <__aeabi_dsub+0x456>
 800216c:	e0fc      	b.n	8002368 <__aeabi_dsub+0x650>
 800216e:	4dae      	ldr	r5, [pc, #696]	@ (8002428 <__aeabi_dsub+0x710>)
 8002170:	42ab      	cmp	r3, r5
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x45e>
 8002174:	e15e      	b.n	8002434 <__aeabi_dsub+0x71c>
 8002176:	4666      	mov	r6, ip
 8002178:	2f38      	cmp	r7, #56	@ 0x38
 800217a:	dc00      	bgt.n	800217e <__aeabi_dsub+0x466>
 800217c:	e0b4      	b.n	80022e8 <__aeabi_dsub+0x5d0>
 800217e:	2001      	movs	r0, #1
 8002180:	1a17      	subs	r7, r2, r0
 8002182:	42ba      	cmp	r2, r7
 8002184:	4192      	sbcs	r2, r2
 8002186:	465b      	mov	r3, fp
 8002188:	4252      	negs	r2, r2
 800218a:	464d      	mov	r5, r9
 800218c:	1a9c      	subs	r4, r3, r2
 800218e:	e620      	b.n	8001dd2 <__aeabi_dsub+0xba>
 8002190:	0767      	lsls	r7, r4, #29
 8002192:	08c0      	lsrs	r0, r0, #3
 8002194:	4307      	orrs	r7, r0
 8002196:	08e5      	lsrs	r5, r4, #3
 8002198:	e6ba      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 800219a:	001f      	movs	r7, r3
 800219c:	4659      	mov	r1, fp
 800219e:	3f20      	subs	r7, #32
 80021a0:	40f9      	lsrs	r1, r7
 80021a2:	000f      	movs	r7, r1
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d005      	beq.n	80021b4 <__aeabi_dsub+0x49c>
 80021a8:	2140      	movs	r1, #64	@ 0x40
 80021aa:	1acb      	subs	r3, r1, r3
 80021ac:	4659      	mov	r1, fp
 80021ae:	4099      	lsls	r1, r3
 80021b0:	430a      	orrs	r2, r1
 80021b2:	4692      	mov	sl, r2
 80021b4:	4653      	mov	r3, sl
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	4193      	sbcs	r3, r2
 80021ba:	431f      	orrs	r7, r3
 80021bc:	e604      	b.n	8001dc8 <__aeabi_dsub+0xb0>
 80021be:	1aeb      	subs	r3, r5, r3
 80021c0:	4d9b      	ldr	r5, [pc, #620]	@ (8002430 <__aeabi_dsub+0x718>)
 80021c2:	4015      	ands	r5, r2
 80021c4:	076f      	lsls	r7, r5, #29
 80021c6:	08ed      	lsrs	r5, r5, #3
 80021c8:	032c      	lsls	r4, r5, #12
 80021ca:	055d      	lsls	r5, r3, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d6d      	lsrs	r5, r5, #21
 80021d0:	e736      	b.n	8002040 <__aeabi_dsub+0x328>
 80021d2:	4d95      	ldr	r5, [pc, #596]	@ (8002428 <__aeabi_dsub+0x710>)
 80021d4:	42ab      	cmp	r3, r5
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x4c2>
 80021d8:	e0d6      	b.n	8002388 <__aeabi_dsub+0x670>
 80021da:	1882      	adds	r2, r0, r2
 80021dc:	0021      	movs	r1, r4
 80021de:	4282      	cmp	r2, r0
 80021e0:	4180      	sbcs	r0, r0
 80021e2:	4459      	add	r1, fp
 80021e4:	4240      	negs	r0, r0
 80021e6:	1808      	adds	r0, r1, r0
 80021e8:	07c7      	lsls	r7, r0, #31
 80021ea:	0852      	lsrs	r2, r2, #1
 80021ec:	4317      	orrs	r7, r2
 80021ee:	0844      	lsrs	r4, r0, #1
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	d400      	bmi.n	80021f6 <__aeabi_dsub+0x4de>
 80021f4:	e185      	b.n	8002502 <__aeabi_dsub+0x7ea>
 80021f6:	220f      	movs	r2, #15
 80021f8:	001d      	movs	r5, r3
 80021fa:	403a      	ands	r2, r7
 80021fc:	2a04      	cmp	r2, #4
 80021fe:	d000      	beq.n	8002202 <__aeabi_dsub+0x4ea>
 8002200:	e61a      	b.n	8001e38 <__aeabi_dsub+0x120>
 8002202:	08ff      	lsrs	r7, r7, #3
 8002204:	0764      	lsls	r4, r4, #29
 8002206:	4327      	orrs	r7, r4
 8002208:	0905      	lsrs	r5, r0, #4
 800220a:	e7dd      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 800220c:	465b      	mov	r3, fp
 800220e:	08d2      	lsrs	r2, r2, #3
 8002210:	075f      	lsls	r7, r3, #29
 8002212:	4317      	orrs	r7, r2
 8002214:	08dd      	lsrs	r5, r3, #3
 8002216:	e67b      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 8002218:	2700      	movs	r7, #0
 800221a:	2400      	movs	r4, #0
 800221c:	e710      	b.n	8002040 <__aeabi_dsub+0x328>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d000      	beq.n	8002224 <__aeabi_dsub+0x50c>
 8002222:	e0d6      	b.n	80023d2 <__aeabi_dsub+0x6ba>
 8002224:	2900      	cmp	r1, #0
 8002226:	d000      	beq.n	800222a <__aeabi_dsub+0x512>
 8002228:	e12f      	b.n	800248a <__aeabi_dsub+0x772>
 800222a:	2480      	movs	r4, #128	@ 0x80
 800222c:	2600      	movs	r6, #0
 800222e:	4d7e      	ldr	r5, [pc, #504]	@ (8002428 <__aeabi_dsub+0x710>)
 8002230:	0324      	lsls	r4, r4, #12
 8002232:	e705      	b.n	8002040 <__aeabi_dsub+0x328>
 8002234:	4666      	mov	r6, ip
 8002236:	465c      	mov	r4, fp
 8002238:	08d0      	lsrs	r0, r2, #3
 800223a:	e717      	b.n	800206c <__aeabi_dsub+0x354>
 800223c:	465b      	mov	r3, fp
 800223e:	1a17      	subs	r7, r2, r0
 8002240:	42ba      	cmp	r2, r7
 8002242:	4192      	sbcs	r2, r2
 8002244:	1b1c      	subs	r4, r3, r4
 8002246:	2601      	movs	r6, #1
 8002248:	4663      	mov	r3, ip
 800224a:	4252      	negs	r2, r2
 800224c:	1aa4      	subs	r4, r4, r2
 800224e:	401e      	ands	r6, r3
 8002250:	e5c4      	b.n	8001ddc <__aeabi_dsub+0xc4>
 8002252:	1883      	adds	r3, r0, r2
 8002254:	4283      	cmp	r3, r0
 8002256:	4180      	sbcs	r0, r0
 8002258:	445c      	add	r4, fp
 800225a:	4240      	negs	r0, r0
 800225c:	1825      	adds	r5, r4, r0
 800225e:	022a      	lsls	r2, r5, #8
 8002260:	d400      	bmi.n	8002264 <__aeabi_dsub+0x54c>
 8002262:	e0da      	b.n	800241a <__aeabi_dsub+0x702>
 8002264:	4a72      	ldr	r2, [pc, #456]	@ (8002430 <__aeabi_dsub+0x718>)
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	4015      	ands	r5, r2
 800226a:	07ea      	lsls	r2, r5, #31
 800226c:	431a      	orrs	r2, r3
 800226e:	0869      	lsrs	r1, r5, #1
 8002270:	075b      	lsls	r3, r3, #29
 8002272:	d400      	bmi.n	8002276 <__aeabi_dsub+0x55e>
 8002274:	e14a      	b.n	800250c <__aeabi_dsub+0x7f4>
 8002276:	230f      	movs	r3, #15
 8002278:	4013      	ands	r3, r2
 800227a:	2b04      	cmp	r3, #4
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x568>
 800227e:	e0fc      	b.n	800247a <__aeabi_dsub+0x762>
 8002280:	1d17      	adds	r7, r2, #4
 8002282:	4297      	cmp	r7, r2
 8002284:	41a4      	sbcs	r4, r4
 8002286:	4264      	negs	r4, r4
 8002288:	2502      	movs	r5, #2
 800228a:	1864      	adds	r4, r4, r1
 800228c:	e6ec      	b.n	8002068 <__aeabi_dsub+0x350>
 800228e:	4647      	mov	r7, r8
 8002290:	001c      	movs	r4, r3
 8002292:	431f      	orrs	r7, r3
 8002294:	d000      	beq.n	8002298 <__aeabi_dsub+0x580>
 8002296:	e743      	b.n	8002120 <__aeabi_dsub+0x408>
 8002298:	2600      	movs	r6, #0
 800229a:	2500      	movs	r5, #0
 800229c:	2400      	movs	r4, #0
 800229e:	e6cf      	b.n	8002040 <__aeabi_dsub+0x328>
 80022a0:	08c0      	lsrs	r0, r0, #3
 80022a2:	0767      	lsls	r7, r4, #29
 80022a4:	4307      	orrs	r7, r0
 80022a6:	08e5      	lsrs	r5, r4, #3
 80022a8:	e632      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 80022aa:	1a87      	subs	r7, r0, r2
 80022ac:	465b      	mov	r3, fp
 80022ae:	42b8      	cmp	r0, r7
 80022b0:	4180      	sbcs	r0, r0
 80022b2:	1ae4      	subs	r4, r4, r3
 80022b4:	4240      	negs	r0, r0
 80022b6:	1a24      	subs	r4, r4, r0
 80022b8:	0223      	lsls	r3, r4, #8
 80022ba:	d428      	bmi.n	800230e <__aeabi_dsub+0x5f6>
 80022bc:	0763      	lsls	r3, r4, #29
 80022be:	08ff      	lsrs	r7, r7, #3
 80022c0:	431f      	orrs	r7, r3
 80022c2:	08e5      	lsrs	r5, r4, #3
 80022c4:	2301      	movs	r3, #1
 80022c6:	e77f      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x5b6>
 80022cc:	e673      	b.n	8001fb6 <__aeabi_dsub+0x29e>
 80022ce:	464b      	mov	r3, r9
 80022d0:	1b5f      	subs	r7, r3, r5
 80022d2:	003b      	movs	r3, r7
 80022d4:	2d00      	cmp	r5, #0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x5c2>
 80022d8:	e742      	b.n	8002160 <__aeabi_dsub+0x448>
 80022da:	2f38      	cmp	r7, #56	@ 0x38
 80022dc:	dd00      	ble.n	80022e0 <__aeabi_dsub+0x5c8>
 80022de:	e0ec      	b.n	80024ba <__aeabi_dsub+0x7a2>
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	000e      	movs	r6, r1
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431c      	orrs	r4, r3
 80022e8:	2f1f      	cmp	r7, #31
 80022ea:	dc25      	bgt.n	8002338 <__aeabi_dsub+0x620>
 80022ec:	2520      	movs	r5, #32
 80022ee:	0023      	movs	r3, r4
 80022f0:	1bed      	subs	r5, r5, r7
 80022f2:	0001      	movs	r1, r0
 80022f4:	40a8      	lsls	r0, r5
 80022f6:	40ab      	lsls	r3, r5
 80022f8:	40f9      	lsrs	r1, r7
 80022fa:	1e45      	subs	r5, r0, #1
 80022fc:	41a8      	sbcs	r0, r5
 80022fe:	430b      	orrs	r3, r1
 8002300:	40fc      	lsrs	r4, r7
 8002302:	4318      	orrs	r0, r3
 8002304:	465b      	mov	r3, fp
 8002306:	1b1b      	subs	r3, r3, r4
 8002308:	469b      	mov	fp, r3
 800230a:	e739      	b.n	8002180 <__aeabi_dsub+0x468>
 800230c:	4666      	mov	r6, ip
 800230e:	2501      	movs	r5, #1
 8002310:	e562      	b.n	8001dd8 <__aeabi_dsub+0xc0>
 8002312:	001f      	movs	r7, r3
 8002314:	4659      	mov	r1, fp
 8002316:	3f20      	subs	r7, #32
 8002318:	40f9      	lsrs	r1, r7
 800231a:	468c      	mov	ip, r1
 800231c:	2b20      	cmp	r3, #32
 800231e:	d005      	beq.n	800232c <__aeabi_dsub+0x614>
 8002320:	2740      	movs	r7, #64	@ 0x40
 8002322:	4659      	mov	r1, fp
 8002324:	1afb      	subs	r3, r7, r3
 8002326:	4099      	lsls	r1, r3
 8002328:	430a      	orrs	r2, r1
 800232a:	4692      	mov	sl, r2
 800232c:	4657      	mov	r7, sl
 800232e:	1e7b      	subs	r3, r7, #1
 8002330:	419f      	sbcs	r7, r3
 8002332:	4663      	mov	r3, ip
 8002334:	431f      	orrs	r7, r3
 8002336:	e5c1      	b.n	8001ebc <__aeabi_dsub+0x1a4>
 8002338:	003b      	movs	r3, r7
 800233a:	0025      	movs	r5, r4
 800233c:	3b20      	subs	r3, #32
 800233e:	40dd      	lsrs	r5, r3
 8002340:	2f20      	cmp	r7, #32
 8002342:	d004      	beq.n	800234e <__aeabi_dsub+0x636>
 8002344:	2340      	movs	r3, #64	@ 0x40
 8002346:	1bdb      	subs	r3, r3, r7
 8002348:	409c      	lsls	r4, r3
 800234a:	4320      	orrs	r0, r4
 800234c:	4680      	mov	r8, r0
 800234e:	4640      	mov	r0, r8
 8002350:	1e43      	subs	r3, r0, #1
 8002352:	4198      	sbcs	r0, r3
 8002354:	4328      	orrs	r0, r5
 8002356:	e713      	b.n	8002180 <__aeabi_dsub+0x468>
 8002358:	2900      	cmp	r1, #0
 800235a:	d09d      	beq.n	8002298 <__aeabi_dsub+0x580>
 800235c:	2601      	movs	r6, #1
 800235e:	4663      	mov	r3, ip
 8002360:	465c      	mov	r4, fp
 8002362:	4690      	mov	r8, r2
 8002364:	401e      	ands	r6, r3
 8002366:	e6db      	b.n	8002120 <__aeabi_dsub+0x408>
 8002368:	1a17      	subs	r7, r2, r0
 800236a:	465b      	mov	r3, fp
 800236c:	42ba      	cmp	r2, r7
 800236e:	4192      	sbcs	r2, r2
 8002370:	1b1c      	subs	r4, r3, r4
 8002372:	4252      	negs	r2, r2
 8002374:	1aa4      	subs	r4, r4, r2
 8002376:	0223      	lsls	r3, r4, #8
 8002378:	d4c8      	bmi.n	800230c <__aeabi_dsub+0x5f4>
 800237a:	0763      	lsls	r3, r4, #29
 800237c:	08ff      	lsrs	r7, r7, #3
 800237e:	431f      	orrs	r7, r3
 8002380:	4666      	mov	r6, ip
 8002382:	2301      	movs	r3, #1
 8002384:	08e5      	lsrs	r5, r4, #3
 8002386:	e71f      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 8002388:	001d      	movs	r5, r3
 800238a:	2400      	movs	r4, #0
 800238c:	2700      	movs	r7, #0
 800238e:	e657      	b.n	8002040 <__aeabi_dsub+0x328>
 8002390:	465c      	mov	r4, fp
 8002392:	08d0      	lsrs	r0, r2, #3
 8002394:	e66a      	b.n	800206c <__aeabi_dsub+0x354>
 8002396:	2b00      	cmp	r3, #0
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x684>
 800239a:	e737      	b.n	800220c <__aeabi_dsub+0x4f4>
 800239c:	4653      	mov	r3, sl
 800239e:	08c0      	lsrs	r0, r0, #3
 80023a0:	0767      	lsls	r7, r4, #29
 80023a2:	4307      	orrs	r7, r0
 80023a4:	08e5      	lsrs	r5, r4, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x694>
 80023aa:	e5b1      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	031b      	lsls	r3, r3, #12
 80023b0:	421d      	tst	r5, r3
 80023b2:	d008      	beq.n	80023c6 <__aeabi_dsub+0x6ae>
 80023b4:	4659      	mov	r1, fp
 80023b6:	08c8      	lsrs	r0, r1, #3
 80023b8:	4218      	tst	r0, r3
 80023ba:	d104      	bne.n	80023c6 <__aeabi_dsub+0x6ae>
 80023bc:	08d2      	lsrs	r2, r2, #3
 80023be:	0749      	lsls	r1, r1, #29
 80023c0:	430a      	orrs	r2, r1
 80023c2:	0017      	movs	r7, r2
 80023c4:	0005      	movs	r5, r0
 80023c6:	0f7b      	lsrs	r3, r7, #29
 80023c8:	00ff      	lsls	r7, r7, #3
 80023ca:	08ff      	lsrs	r7, r7, #3
 80023cc:	075b      	lsls	r3, r3, #29
 80023ce:	431f      	orrs	r7, r3
 80023d0:	e59e      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 80023d2:	08c0      	lsrs	r0, r0, #3
 80023d4:	0763      	lsls	r3, r4, #29
 80023d6:	4318      	orrs	r0, r3
 80023d8:	08e5      	lsrs	r5, r4, #3
 80023da:	2900      	cmp	r1, #0
 80023dc:	d053      	beq.n	8002486 <__aeabi_dsub+0x76e>
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	031b      	lsls	r3, r3, #12
 80023e2:	421d      	tst	r5, r3
 80023e4:	d00a      	beq.n	80023fc <__aeabi_dsub+0x6e4>
 80023e6:	4659      	mov	r1, fp
 80023e8:	08cc      	lsrs	r4, r1, #3
 80023ea:	421c      	tst	r4, r3
 80023ec:	d106      	bne.n	80023fc <__aeabi_dsub+0x6e4>
 80023ee:	2601      	movs	r6, #1
 80023f0:	4663      	mov	r3, ip
 80023f2:	0025      	movs	r5, r4
 80023f4:	08d0      	lsrs	r0, r2, #3
 80023f6:	0749      	lsls	r1, r1, #29
 80023f8:	4308      	orrs	r0, r1
 80023fa:	401e      	ands	r6, r3
 80023fc:	0f47      	lsrs	r7, r0, #29
 80023fe:	00c0      	lsls	r0, r0, #3
 8002400:	08c0      	lsrs	r0, r0, #3
 8002402:	077f      	lsls	r7, r7, #29
 8002404:	4307      	orrs	r7, r0
 8002406:	e583      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 8002408:	1883      	adds	r3, r0, r2
 800240a:	4293      	cmp	r3, r2
 800240c:	4192      	sbcs	r2, r2
 800240e:	445c      	add	r4, fp
 8002410:	4252      	negs	r2, r2
 8002412:	18a5      	adds	r5, r4, r2
 8002414:	022a      	lsls	r2, r5, #8
 8002416:	d500      	bpl.n	800241a <__aeabi_dsub+0x702>
 8002418:	e724      	b.n	8002264 <__aeabi_dsub+0x54c>
 800241a:	076f      	lsls	r7, r5, #29
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	431f      	orrs	r7, r3
 8002420:	08ed      	lsrs	r5, r5, #3
 8002422:	2301      	movs	r3, #1
 8002424:	e6d0      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	000007ff 	.word	0x000007ff
 800242c:	000007fe 	.word	0x000007fe
 8002430:	ff7fffff 	.word	0xff7fffff
 8002434:	465b      	mov	r3, fp
 8002436:	08d2      	lsrs	r2, r2, #3
 8002438:	075f      	lsls	r7, r3, #29
 800243a:	4666      	mov	r6, ip
 800243c:	4317      	orrs	r7, r2
 800243e:	08dd      	lsrs	r5, r3, #3
 8002440:	e566      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 8002442:	0025      	movs	r5, r4
 8002444:	3b20      	subs	r3, #32
 8002446:	40dd      	lsrs	r5, r3
 8002448:	4663      	mov	r3, ip
 800244a:	2b20      	cmp	r3, #32
 800244c:	d005      	beq.n	800245a <__aeabi_dsub+0x742>
 800244e:	2340      	movs	r3, #64	@ 0x40
 8002450:	4661      	mov	r1, ip
 8002452:	1a5b      	subs	r3, r3, r1
 8002454:	409c      	lsls	r4, r3
 8002456:	4320      	orrs	r0, r4
 8002458:	4680      	mov	r8, r0
 800245a:	4647      	mov	r7, r8
 800245c:	1e7b      	subs	r3, r7, #1
 800245e:	419f      	sbcs	r7, r3
 8002460:	432f      	orrs	r7, r5
 8002462:	e5a0      	b.n	8001fa6 <__aeabi_dsub+0x28e>
 8002464:	2120      	movs	r1, #32
 8002466:	2700      	movs	r7, #0
 8002468:	1a09      	subs	r1, r1, r0
 800246a:	e4d2      	b.n	8001e12 <__aeabi_dsub+0xfa>
 800246c:	2f00      	cmp	r7, #0
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x75a>
 8002470:	e713      	b.n	800229a <__aeabi_dsub+0x582>
 8002472:	465c      	mov	r4, fp
 8002474:	0017      	movs	r7, r2
 8002476:	2500      	movs	r5, #0
 8002478:	e5f6      	b.n	8002068 <__aeabi_dsub+0x350>
 800247a:	08d7      	lsrs	r7, r2, #3
 800247c:	0749      	lsls	r1, r1, #29
 800247e:	2302      	movs	r3, #2
 8002480:	430f      	orrs	r7, r1
 8002482:	092d      	lsrs	r5, r5, #4
 8002484:	e6a0      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 8002486:	0007      	movs	r7, r0
 8002488:	e542      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 800248a:	465b      	mov	r3, fp
 800248c:	2601      	movs	r6, #1
 800248e:	075f      	lsls	r7, r3, #29
 8002490:	08dd      	lsrs	r5, r3, #3
 8002492:	4663      	mov	r3, ip
 8002494:	08d2      	lsrs	r2, r2, #3
 8002496:	4317      	orrs	r7, r2
 8002498:	401e      	ands	r6, r3
 800249a:	e539      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 800249c:	465b      	mov	r3, fp
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	075f      	lsls	r7, r3, #29
 80024a2:	4317      	orrs	r7, r2
 80024a4:	08dd      	lsrs	r5, r3, #3
 80024a6:	e533      	b.n	8001f10 <__aeabi_dsub+0x1f8>
 80024a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <__aeabi_dsub+0x80c>)
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	4022      	ands	r2, r4
 80024ae:	0757      	lsls	r7, r2, #29
 80024b0:	0252      	lsls	r2, r2, #9
 80024b2:	2501      	movs	r5, #1
 80024b4:	431f      	orrs	r7, r3
 80024b6:	0b14      	lsrs	r4, r2, #12
 80024b8:	e5c2      	b.n	8002040 <__aeabi_dsub+0x328>
 80024ba:	000e      	movs	r6, r1
 80024bc:	2001      	movs	r0, #1
 80024be:	e65f      	b.n	8002180 <__aeabi_dsub+0x468>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <__aeabi_dsub+0x7c8>
 80024c4:	464b      	mov	r3, r9
 80024c6:	1b5b      	subs	r3, r3, r5
 80024c8:	469c      	mov	ip, r3
 80024ca:	2d00      	cmp	r5, #0
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x7b8>
 80024ce:	e548      	b.n	8001f62 <__aeabi_dsub+0x24a>
 80024d0:	2701      	movs	r7, #1
 80024d2:	2b38      	cmp	r3, #56	@ 0x38
 80024d4:	dd00      	ble.n	80024d8 <__aeabi_dsub+0x7c0>
 80024d6:	e566      	b.n	8001fa6 <__aeabi_dsub+0x28e>
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431c      	orrs	r4, r3
 80024de:	e550      	b.n	8001f82 <__aeabi_dsub+0x26a>
 80024e0:	1c6b      	adds	r3, r5, #1
 80024e2:	4d11      	ldr	r5, [pc, #68]	@ (8002528 <__aeabi_dsub+0x810>)
 80024e4:	422b      	tst	r3, r5
 80024e6:	d000      	beq.n	80024ea <__aeabi_dsub+0x7d2>
 80024e8:	e673      	b.n	80021d2 <__aeabi_dsub+0x4ba>
 80024ea:	4659      	mov	r1, fp
 80024ec:	0023      	movs	r3, r4
 80024ee:	4311      	orrs	r1, r2
 80024f0:	468a      	mov	sl, r1
 80024f2:	4303      	orrs	r3, r0
 80024f4:	e600      	b.n	80020f8 <__aeabi_dsub+0x3e0>
 80024f6:	0767      	lsls	r7, r4, #29
 80024f8:	08c0      	lsrs	r0, r0, #3
 80024fa:	2300      	movs	r3, #0
 80024fc:	4307      	orrs	r7, r0
 80024fe:	08e5      	lsrs	r5, r4, #3
 8002500:	e662      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 8002502:	0764      	lsls	r4, r4, #29
 8002504:	08ff      	lsrs	r7, r7, #3
 8002506:	4327      	orrs	r7, r4
 8002508:	0905      	lsrs	r5, r0, #4
 800250a:	e65d      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 800250c:	08d2      	lsrs	r2, r2, #3
 800250e:	0749      	lsls	r1, r1, #29
 8002510:	4311      	orrs	r1, r2
 8002512:	000f      	movs	r7, r1
 8002514:	2302      	movs	r3, #2
 8002516:	092d      	lsrs	r5, r5, #4
 8002518:	e656      	b.n	80021c8 <__aeabi_dsub+0x4b0>
 800251a:	0007      	movs	r7, r0
 800251c:	e5a4      	b.n	8002068 <__aeabi_dsub+0x350>
 800251e:	0038      	movs	r0, r7
 8002520:	e48f      	b.n	8001e42 <__aeabi_dsub+0x12a>
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	ff7fffff 	.word	0xff7fffff
 8002528:	000007fe 	.word	0x000007fe

0800252c <__aeabi_d2iz>:
 800252c:	000b      	movs	r3, r1
 800252e:	0002      	movs	r2, r0
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	4d16      	ldr	r5, [pc, #88]	@ (800258c <__aeabi_d2iz+0x60>)
 8002534:	030c      	lsls	r4, r1, #12
 8002536:	b082      	sub	sp, #8
 8002538:	0049      	lsls	r1, r1, #1
 800253a:	2000      	movs	r0, #0
 800253c:	9200      	str	r2, [sp, #0]
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	0b24      	lsrs	r4, r4, #12
 8002542:	0d49      	lsrs	r1, r1, #21
 8002544:	0fde      	lsrs	r6, r3, #31
 8002546:	42a9      	cmp	r1, r5
 8002548:	dd04      	ble.n	8002554 <__aeabi_d2iz+0x28>
 800254a:	4811      	ldr	r0, [pc, #68]	@ (8002590 <__aeabi_d2iz+0x64>)
 800254c:	4281      	cmp	r1, r0
 800254e:	dd03      	ble.n	8002558 <__aeabi_d2iz+0x2c>
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <__aeabi_d2iz+0x68>)
 8002552:	18f0      	adds	r0, r6, r3
 8002554:	b002      	add	sp, #8
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	2080      	movs	r0, #128	@ 0x80
 800255a:	0340      	lsls	r0, r0, #13
 800255c:	4320      	orrs	r0, r4
 800255e:	4c0e      	ldr	r4, [pc, #56]	@ (8002598 <__aeabi_d2iz+0x6c>)
 8002560:	1a64      	subs	r4, r4, r1
 8002562:	2c1f      	cmp	r4, #31
 8002564:	dd08      	ble.n	8002578 <__aeabi_d2iz+0x4c>
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <__aeabi_d2iz+0x70>)
 8002568:	1a5b      	subs	r3, r3, r1
 800256a:	40d8      	lsrs	r0, r3
 800256c:	0003      	movs	r3, r0
 800256e:	4258      	negs	r0, r3
 8002570:	2e00      	cmp	r6, #0
 8002572:	d1ef      	bne.n	8002554 <__aeabi_d2iz+0x28>
 8002574:	0018      	movs	r0, r3
 8002576:	e7ed      	b.n	8002554 <__aeabi_d2iz+0x28>
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <__aeabi_d2iz+0x74>)
 800257a:	9a00      	ldr	r2, [sp, #0]
 800257c:	469c      	mov	ip, r3
 800257e:	0003      	movs	r3, r0
 8002580:	4461      	add	r1, ip
 8002582:	408b      	lsls	r3, r1
 8002584:	40e2      	lsrs	r2, r4
 8002586:	4313      	orrs	r3, r2
 8002588:	e7f1      	b.n	800256e <__aeabi_d2iz+0x42>
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	000003fe 	.word	0x000003fe
 8002590:	0000041d 	.word	0x0000041d
 8002594:	7fffffff 	.word	0x7fffffff
 8002598:	00000433 	.word	0x00000433
 800259c:	00000413 	.word	0x00000413
 80025a0:	fffffbed 	.word	0xfffffbed

080025a4 <__aeabi_i2d>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d016      	beq.n	80025d8 <__aeabi_i2d+0x34>
 80025aa:	17c3      	asrs	r3, r0, #31
 80025ac:	18c5      	adds	r5, r0, r3
 80025ae:	405d      	eors	r5, r3
 80025b0:	0fc4      	lsrs	r4, r0, #31
 80025b2:	0028      	movs	r0, r5
 80025b4:	f000 f8ee 	bl	8002794 <__clzsi2>
 80025b8:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <__aeabi_i2d+0x58>)
 80025ba:	1a1b      	subs	r3, r3, r0
 80025bc:	055b      	lsls	r3, r3, #21
 80025be:	0d5b      	lsrs	r3, r3, #21
 80025c0:	280a      	cmp	r0, #10
 80025c2:	dc14      	bgt.n	80025ee <__aeabi_i2d+0x4a>
 80025c4:	0002      	movs	r2, r0
 80025c6:	002e      	movs	r6, r5
 80025c8:	3215      	adds	r2, #21
 80025ca:	4096      	lsls	r6, r2
 80025cc:	220b      	movs	r2, #11
 80025ce:	1a12      	subs	r2, r2, r0
 80025d0:	40d5      	lsrs	r5, r2
 80025d2:	032d      	lsls	r5, r5, #12
 80025d4:	0b2d      	lsrs	r5, r5, #12
 80025d6:	e003      	b.n	80025e0 <__aeabi_i2d+0x3c>
 80025d8:	2400      	movs	r4, #0
 80025da:	2300      	movs	r3, #0
 80025dc:	2500      	movs	r5, #0
 80025de:	2600      	movs	r6, #0
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	432b      	orrs	r3, r5
 80025e4:	07e4      	lsls	r4, r4, #31
 80025e6:	4323      	orrs	r3, r4
 80025e8:	0030      	movs	r0, r6
 80025ea:	0019      	movs	r1, r3
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
 80025ee:	380b      	subs	r0, #11
 80025f0:	4085      	lsls	r5, r0
 80025f2:	032d      	lsls	r5, r5, #12
 80025f4:	2600      	movs	r6, #0
 80025f6:	0b2d      	lsrs	r5, r5, #12
 80025f8:	e7f2      	b.n	80025e0 <__aeabi_i2d+0x3c>
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	0000041e 	.word	0x0000041e

08002600 <__aeabi_f2d>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	0242      	lsls	r2, r0, #9
 8002604:	0043      	lsls	r3, r0, #1
 8002606:	0fc4      	lsrs	r4, r0, #31
 8002608:	20fe      	movs	r0, #254	@ 0xfe
 800260a:	0e1b      	lsrs	r3, r3, #24
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	0a55      	lsrs	r5, r2, #9
 8002610:	4208      	tst	r0, r1
 8002612:	d00c      	beq.n	800262e <__aeabi_f2d+0x2e>
 8002614:	21e0      	movs	r1, #224	@ 0xe0
 8002616:	0089      	lsls	r1, r1, #2
 8002618:	468c      	mov	ip, r1
 800261a:	076d      	lsls	r5, r5, #29
 800261c:	0b12      	lsrs	r2, r2, #12
 800261e:	4463      	add	r3, ip
 8002620:	051b      	lsls	r3, r3, #20
 8002622:	4313      	orrs	r3, r2
 8002624:	07e4      	lsls	r4, r4, #31
 8002626:	4323      	orrs	r3, r4
 8002628:	0028      	movs	r0, r5
 800262a:	0019      	movs	r1, r3
 800262c:	bd70      	pop	{r4, r5, r6, pc}
 800262e:	2b00      	cmp	r3, #0
 8002630:	d114      	bne.n	800265c <__aeabi_f2d+0x5c>
 8002632:	2d00      	cmp	r5, #0
 8002634:	d01b      	beq.n	800266e <__aeabi_f2d+0x6e>
 8002636:	0028      	movs	r0, r5
 8002638:	f000 f8ac 	bl	8002794 <__clzsi2>
 800263c:	280a      	cmp	r0, #10
 800263e:	dc1c      	bgt.n	800267a <__aeabi_f2d+0x7a>
 8002640:	230b      	movs	r3, #11
 8002642:	002a      	movs	r2, r5
 8002644:	1a1b      	subs	r3, r3, r0
 8002646:	40da      	lsrs	r2, r3
 8002648:	0003      	movs	r3, r0
 800264a:	3315      	adds	r3, #21
 800264c:	409d      	lsls	r5, r3
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <__aeabi_f2d+0x88>)
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	1a1b      	subs	r3, r3, r0
 8002654:	055b      	lsls	r3, r3, #21
 8002656:	0b12      	lsrs	r2, r2, #12
 8002658:	0d5b      	lsrs	r3, r3, #21
 800265a:	e7e1      	b.n	8002620 <__aeabi_f2d+0x20>
 800265c:	2d00      	cmp	r5, #0
 800265e:	d009      	beq.n	8002674 <__aeabi_f2d+0x74>
 8002660:	0b13      	lsrs	r3, r2, #12
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	0312      	lsls	r2, r2, #12
 8002666:	431a      	orrs	r2, r3
 8002668:	076d      	lsls	r5, r5, #29
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <__aeabi_f2d+0x8c>)
 800266c:	e7d8      	b.n	8002620 <__aeabi_f2d+0x20>
 800266e:	2300      	movs	r3, #0
 8002670:	2200      	movs	r2, #0
 8002672:	e7d5      	b.n	8002620 <__aeabi_f2d+0x20>
 8002674:	2200      	movs	r2, #0
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <__aeabi_f2d+0x8c>)
 8002678:	e7d2      	b.n	8002620 <__aeabi_f2d+0x20>
 800267a:	0003      	movs	r3, r0
 800267c:	002a      	movs	r2, r5
 800267e:	3b0b      	subs	r3, #11
 8002680:	409a      	lsls	r2, r3
 8002682:	2500      	movs	r5, #0
 8002684:	e7e3      	b.n	800264e <__aeabi_f2d+0x4e>
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	00000389 	.word	0x00000389
 800268c:	000007ff 	.word	0x000007ff

08002690 <__aeabi_d2f>:
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002692:	004b      	lsls	r3, r1, #1
 8002694:	030f      	lsls	r7, r1, #12
 8002696:	0d5b      	lsrs	r3, r3, #21
 8002698:	4c3a      	ldr	r4, [pc, #232]	@ (8002784 <__aeabi_d2f+0xf4>)
 800269a:	0f45      	lsrs	r5, r0, #29
 800269c:	b083      	sub	sp, #12
 800269e:	0a7f      	lsrs	r7, r7, #9
 80026a0:	1c5e      	adds	r6, r3, #1
 80026a2:	432f      	orrs	r7, r5
 80026a4:	9000      	str	r0, [sp, #0]
 80026a6:	9101      	str	r1, [sp, #4]
 80026a8:	0fca      	lsrs	r2, r1, #31
 80026aa:	00c5      	lsls	r5, r0, #3
 80026ac:	4226      	tst	r6, r4
 80026ae:	d00b      	beq.n	80026c8 <__aeabi_d2f+0x38>
 80026b0:	4935      	ldr	r1, [pc, #212]	@ (8002788 <__aeabi_d2f+0xf8>)
 80026b2:	185c      	adds	r4, r3, r1
 80026b4:	2cfe      	cmp	r4, #254	@ 0xfe
 80026b6:	dd13      	ble.n	80026e0 <__aeabi_d2f+0x50>
 80026b8:	20ff      	movs	r0, #255	@ 0xff
 80026ba:	2300      	movs	r3, #0
 80026bc:	05c0      	lsls	r0, r0, #23
 80026be:	4318      	orrs	r0, r3
 80026c0:	07d2      	lsls	r2, r2, #31
 80026c2:	4310      	orrs	r0, r2
 80026c4:	b003      	add	sp, #12
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c8:	433d      	orrs	r5, r7
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <__aeabi_d2f+0x42>
 80026ce:	2000      	movs	r0, #0
 80026d0:	e7f4      	b.n	80026bc <__aeabi_d2f+0x2c>
 80026d2:	2d00      	cmp	r5, #0
 80026d4:	d0f0      	beq.n	80026b8 <__aeabi_d2f+0x28>
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	03db      	lsls	r3, r3, #15
 80026da:	20ff      	movs	r0, #255	@ 0xff
 80026dc:	433b      	orrs	r3, r7
 80026de:	e7ed      	b.n	80026bc <__aeabi_d2f+0x2c>
 80026e0:	2c00      	cmp	r4, #0
 80026e2:	dd0c      	ble.n	80026fe <__aeabi_d2f+0x6e>
 80026e4:	9b00      	ldr	r3, [sp, #0]
 80026e6:	00ff      	lsls	r7, r7, #3
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	4183      	sbcs	r3, r0
 80026ee:	0f69      	lsrs	r1, r5, #29
 80026f0:	433b      	orrs	r3, r7
 80026f2:	430b      	orrs	r3, r1
 80026f4:	0759      	lsls	r1, r3, #29
 80026f6:	d127      	bne.n	8002748 <__aeabi_d2f+0xb8>
 80026f8:	08db      	lsrs	r3, r3, #3
 80026fa:	b2e0      	uxtb	r0, r4
 80026fc:	e7de      	b.n	80026bc <__aeabi_d2f+0x2c>
 80026fe:	0021      	movs	r1, r4
 8002700:	3117      	adds	r1, #23
 8002702:	db31      	blt.n	8002768 <__aeabi_d2f+0xd8>
 8002704:	2180      	movs	r1, #128	@ 0x80
 8002706:	201e      	movs	r0, #30
 8002708:	0409      	lsls	r1, r1, #16
 800270a:	4339      	orrs	r1, r7
 800270c:	1b00      	subs	r0, r0, r4
 800270e:	281f      	cmp	r0, #31
 8002710:	dd2d      	ble.n	800276e <__aeabi_d2f+0xde>
 8002712:	2602      	movs	r6, #2
 8002714:	4276      	negs	r6, r6
 8002716:	1b34      	subs	r4, r6, r4
 8002718:	000e      	movs	r6, r1
 800271a:	40e6      	lsrs	r6, r4
 800271c:	0034      	movs	r4, r6
 800271e:	2820      	cmp	r0, #32
 8002720:	d004      	beq.n	800272c <__aeabi_d2f+0x9c>
 8002722:	481a      	ldr	r0, [pc, #104]	@ (800278c <__aeabi_d2f+0xfc>)
 8002724:	4684      	mov	ip, r0
 8002726:	4463      	add	r3, ip
 8002728:	4099      	lsls	r1, r3
 800272a:	430d      	orrs	r5, r1
 800272c:	002b      	movs	r3, r5
 800272e:	1e59      	subs	r1, r3, #1
 8002730:	418b      	sbcs	r3, r1
 8002732:	4323      	orrs	r3, r4
 8002734:	0759      	lsls	r1, r3, #29
 8002736:	d003      	beq.n	8002740 <__aeabi_d2f+0xb0>
 8002738:	210f      	movs	r1, #15
 800273a:	4019      	ands	r1, r3
 800273c:	2904      	cmp	r1, #4
 800273e:	d10b      	bne.n	8002758 <__aeabi_d2f+0xc8>
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	2000      	movs	r0, #0
 8002744:	0a5b      	lsrs	r3, r3, #9
 8002746:	e7b9      	b.n	80026bc <__aeabi_d2f+0x2c>
 8002748:	210f      	movs	r1, #15
 800274a:	4019      	ands	r1, r3
 800274c:	2904      	cmp	r1, #4
 800274e:	d104      	bne.n	800275a <__aeabi_d2f+0xca>
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	b2e0      	uxtb	r0, r4
 8002756:	e7b1      	b.n	80026bc <__aeabi_d2f+0x2c>
 8002758:	2400      	movs	r4, #0
 800275a:	3304      	adds	r3, #4
 800275c:	0159      	lsls	r1, r3, #5
 800275e:	d5f7      	bpl.n	8002750 <__aeabi_d2f+0xc0>
 8002760:	3401      	adds	r4, #1
 8002762:	2300      	movs	r3, #0
 8002764:	b2e0      	uxtb	r0, r4
 8002766:	e7a9      	b.n	80026bc <__aeabi_d2f+0x2c>
 8002768:	2000      	movs	r0, #0
 800276a:	2300      	movs	r3, #0
 800276c:	e7a6      	b.n	80026bc <__aeabi_d2f+0x2c>
 800276e:	4c08      	ldr	r4, [pc, #32]	@ (8002790 <__aeabi_d2f+0x100>)
 8002770:	191c      	adds	r4, r3, r4
 8002772:	002b      	movs	r3, r5
 8002774:	40a5      	lsls	r5, r4
 8002776:	40c3      	lsrs	r3, r0
 8002778:	40a1      	lsls	r1, r4
 800277a:	1e68      	subs	r0, r5, #1
 800277c:	4185      	sbcs	r5, r0
 800277e:	4329      	orrs	r1, r5
 8002780:	430b      	orrs	r3, r1
 8002782:	e7d7      	b.n	8002734 <__aeabi_d2f+0xa4>
 8002784:	000007fe 	.word	0x000007fe
 8002788:	fffffc80 	.word	0xfffffc80
 800278c:	fffffca2 	.word	0xfffffca2
 8002790:	fffffc82 	.word	0xfffffc82

08002794 <__clzsi2>:
 8002794:	211c      	movs	r1, #28
 8002796:	2301      	movs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	4298      	cmp	r0, r3
 800279c:	d301      	bcc.n	80027a2 <__clzsi2+0xe>
 800279e:	0c00      	lsrs	r0, r0, #16
 80027a0:	3910      	subs	r1, #16
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	4298      	cmp	r0, r3
 80027a6:	d301      	bcc.n	80027ac <__clzsi2+0x18>
 80027a8:	0a00      	lsrs	r0, r0, #8
 80027aa:	3908      	subs	r1, #8
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	4298      	cmp	r0, r3
 80027b0:	d301      	bcc.n	80027b6 <__clzsi2+0x22>
 80027b2:	0900      	lsrs	r0, r0, #4
 80027b4:	3904      	subs	r1, #4
 80027b6:	a202      	add	r2, pc, #8	@ (adr r2, 80027c0 <__clzsi2+0x2c>)
 80027b8:	5c10      	ldrb	r0, [r2, r0]
 80027ba:	1840      	adds	r0, r0, r1
 80027bc:	4770      	bx	lr
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	02020304 	.word	0x02020304
 80027c4:	01010101 	.word	0x01010101
	...

080027d0 <calculate_crc_smbus>:

/**
 * Calculate CRC-8 SMBus using polynomial X^8 + X^2 + X + 1 (0x07)
 */

uint8_t calculate_crc_smbus(uint32_t raw_angle, uint8_t status) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	000a      	movs	r2, r1
 80027da:	1cfb      	adds	r3, r7, #3
 80027dc:	701a      	strb	r2, [r3, #0]
    uint32_t data = ((raw_angle & 0x1FFFFF) << 3) | (status & 0x07); // Combine angle and status
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4a2e      	ldr	r2, [pc, #184]	@ (800289c <calculate_crc_smbus+0xcc>)
 80027e4:	401a      	ands	r2, r3
 80027e6:	1cfb      	adds	r3, r7, #3
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2107      	movs	r1, #7
 80027ec:	400b      	ands	r3, r1
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
    uint8_t data_bytes[3] = {
        (data >> 16) & 0xFF,
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	0c1b      	lsrs	r3, r3, #16
    uint8_t data_bytes[3] = {
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	210c      	movs	r1, #12
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	701a      	strb	r2, [r3, #0]
        (data >> 8) & 0xFF,
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	0a1b      	lsrs	r3, r3, #8
    uint8_t data_bytes[3] = {
 8002802:	b2da      	uxtb	r2, r3
 8002804:	187b      	adds	r3, r7, r1
 8002806:	705a      	strb	r2, [r3, #1]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	187b      	adds	r3, r7, r1
 800280e:	709a      	strb	r2, [r3, #2]
        data & 0xFF
    };

    uint8_t crc = CRC8_INITIAL_VALUE;
 8002810:	231f      	movs	r3, #31
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]

    for (size_t i = 0; i < 3; i++) {
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e034      	b.n	8002888 <calculate_crc_smbus+0xb8>
        crc ^= data_bytes[i]; // XOR the current data byte into the CRC
 800281e:	230c      	movs	r3, #12
 8002820:	18fa      	adds	r2, r7, r3
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	18d3      	adds	r3, r2, r3
 8002826:	7819      	ldrb	r1, [r3, #0]
 8002828:	221f      	movs	r2, #31
 800282a:	18bb      	adds	r3, r7, r2
 800282c:	18ba      	adds	r2, r7, r2
 800282e:	7812      	ldrb	r2, [r2, #0]
 8002830:	404a      	eors	r2, r1
 8002832:	701a      	strb	r2, [r3, #0]
        for (uint8_t bit = 0; bit < 8; bit++) {
 8002834:	2317      	movs	r3, #23
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e01c      	b.n	8002878 <calculate_crc_smbus+0xa8>
            if (crc & 0x80) {
 800283e:	211f      	movs	r1, #31
 8002840:	187b      	adds	r3, r7, r1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b25b      	sxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	da0a      	bge.n	8002860 <calculate_crc_smbus+0x90>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	18db      	adds	r3, r3, r3
 8002852:	b25b      	sxtb	r3, r3
 8002854:	2207      	movs	r2, #7
 8002856:	4053      	eors	r3, r2
 8002858:	b25a      	sxtb	r2, r3
 800285a:	187b      	adds	r3, r7, r1
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e005      	b.n	800286c <calculate_crc_smbus+0x9c>
            } else {
                crc <<= 1;
 8002860:	231f      	movs	r3, #31
 8002862:	18fa      	adds	r2, r7, r3
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	18db      	adds	r3, r3, r3
 800286a:	7013      	strb	r3, [r2, #0]
        for (uint8_t bit = 0; bit < 8; bit++) {
 800286c:	2117      	movs	r1, #23
 800286e:	187b      	adds	r3, r7, r1
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	187b      	adds	r3, r7, r1
 8002874:	3201      	adds	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	2317      	movs	r3, #23
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b07      	cmp	r3, #7
 8002880:	d9dd      	bls.n	800283e <calculate_crc_smbus+0x6e>
    for (size_t i = 0; i < 3; i++) {
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	3301      	adds	r3, #1
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d9c7      	bls.n	800281e <calculate_crc_smbus+0x4e>
            }
        }
    }

    return crc;
 800288e:	231f      	movs	r3, #31
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b008      	add	sp, #32
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00fffff8 	.word	0x00fffff8

080028a0 <mt6835_update_counts>:
//    // If CRC fails, return 0 (indicating an error)
//    return 0;
//}

int mt6835_update_counts(SPI_HandleTypeDef *hspi)
{
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	b089      	sub	sp, #36	@ 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    uint8_t data[4] = {0};
 80028a8:	230c      	movs	r3, #12
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    // Example command: high nibble might be operation, low nibble might be register
    uint8_t command[2] = {
 80028b0:	2108      	movs	r1, #8
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	22e8      	movs	r2, #232	@ 0xe8
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	801a      	strh	r2, [r3, #0]
        (uint8_t)(MT6835_OP_ANGLE << 4),
        MT6835_REG_ANGLE1
    };

    // 1) Transmit the command
    HAL_StatusTypeDef spiStatus = HAL_SPI_Transmit(hspi, command, 2, SPI_1_TIMEOUT);
 80028ba:	221b      	movs	r2, #27
 80028bc:	18be      	adds	r6, r7, r2
 80028be:	1879      	adds	r1, r7, r1
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	2303      	movs	r3, #3
 80028c4:	2202      	movs	r2, #2
 80028c6:	f005 fa73 	bl	8007db0 <HAL_SPI_Transmit>
 80028ca:	0003      	movs	r3, r0
 80028cc:	7033      	strb	r3, [r6, #0]
    if (spiStatus != HAL_OK) {
 80028ce:	221b      	movs	r2, #27
 80028d0:	18bb      	adds	r3, r7, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <mt6835_update_counts+0x3e>
        return spiStatus; // HAL_TIMEOUT or HAL_ERROR
 80028d8:	18bb      	adds	r3, r7, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	e094      	b.n	8002a08 <mt6835_update_counts+0x168>
    }

    // 2) Receive the data (4 bytes)
    spiStatus = HAL_SPI_Receive(hspi, data, 6, SPI_1_TIMEOUT);
 80028de:	221b      	movs	r2, #27
 80028e0:	18be      	adds	r6, r7, r2
 80028e2:	230c      	movs	r3, #12
 80028e4:	18f9      	adds	r1, r7, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	2303      	movs	r3, #3
 80028ea:	2206      	movs	r2, #6
 80028ec:	f005 fbc0 	bl	8008070 <HAL_SPI_Receive>
 80028f0:	0003      	movs	r3, r0
 80028f2:	7033      	strb	r3, [r6, #0]
    if (spiStatus != HAL_OK) {
 80028f4:	221b      	movs	r2, #27
 80028f6:	18bb      	adds	r3, r7, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <mt6835_update_counts+0x64>
        return spiStatus;
 80028fe:	18bb      	adds	r3, r7, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	e081      	b.n	8002a08 <mt6835_update_counts+0x168>
    //  data[2] => low bits of angle (upper 5 bits) + status in lower 3 bits
    //  data[3] => 8-bit CRC

    // Extract raw 21-bit angle
    //   (Note: mask with 0x1FFFFF as a safeguard)
    uint32_t raw_counts = ((uint32_t)data[0] << 13) & 0x1FFFFF;
 8002904:	200c      	movs	r0, #12
 8002906:	183b      	adds	r3, r7, r0
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	035b      	lsls	r3, r3, #13
 800290c:	02db      	lsls	r3, r3, #11
 800290e:	0adb      	lsrs	r3, r3, #11
 8002910:	617b      	str	r3, [r7, #20]
    raw_counts         |= ((uint32_t)data[1] << 5)  & 0x1FFFFF;
 8002912:	183b      	adds	r3, r7, r0
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	02db      	lsls	r3, r3, #11
 800291a:	0adb      	lsrs	r3, r3, #11
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
    raw_counts         |= (((uint32_t)data[2] >> 3) & 0x1F);
 8002922:	183b      	adds	r3, r7, r0
 8002924:	789b      	ldrb	r3, [r3, #2]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	001a      	movs	r2, r3
 800292c:	231f      	movs	r3, #31
 800292e:	4013      	ands	r3, r2
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

    // Extract status
    uint8_t statusBits = data[2] & 0x07; // lower 3 bits
 8002936:	183b      	adds	r3, r7, r0
 8002938:	789a      	ldrb	r2, [r3, #2]
 800293a:	2313      	movs	r3, #19
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2107      	movs	r1, #7
 8002940:	400a      	ands	r2, r1
 8002942:	701a      	strb	r2, [r3, #0]
    // Extract CRC
    uint8_t crc_received   = data[3];
 8002944:	2212      	movs	r2, #18
 8002946:	18bb      	adds	r3, r7, r2
 8002948:	183a      	adds	r2, r7, r0
 800294a:	78d2      	ldrb	r2, [r2, #3]
 800294c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_calculated = calculate_crc_smbus(raw_counts, statusBits);
 800294e:	2111      	movs	r1, #17
 8002950:	187e      	adds	r6, r7, r1
 8002952:	2313      	movs	r3, #19
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	0011      	movs	r1, r2
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff ff37 	bl	80027d0 <calculate_crc_smbus>
 8002962:	0003      	movs	r3, r0
 8002964:	7033      	strb	r3, [r6, #0]

    // Verify CRC
    if (crc_received != crc_calculated) {
 8002966:	2212      	movs	r2, #18
 8002968:	18ba      	adds	r2, r7, r2
 800296a:	2111      	movs	r1, #17
 800296c:	187b      	adds	r3, r7, r1
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <mt6835_update_counts+0xda>
        return HAL_ERROR;  // CRC mismatch
 8002976:	2301      	movs	r3, #1
 8002978:	e046      	b.n	8002a08 <mt6835_update_counts+0x168>
    }

    // Update warnings
    rotationOverspeedWarning = (statusBits & 0x01) ? 1 : 0;
 800297a:	2113      	movs	r1, #19
 800297c:	187b      	adds	r3, r7, r1
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <mt6835_update_counts+0x170>)
 8002988:	701a      	strb	r2, [r3, #0]
    weakMagneticFieldWarning = (statusBits & 0x02) ? 1 : 0;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	105b      	asrs	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2201      	movs	r2, #1
 8002994:	4013      	ands	r3, r2
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <mt6835_update_counts+0x174>)
 800299a:	701a      	strb	r2, [r3, #0]
    underVoltageWarning      = (statusBits & 0x04) ? 1 : 0;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	109b      	asrs	r3, r3, #2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <mt6835_update_counts+0x178>)
 80029ac:	701a      	strb	r2, [r3, #0]

    // 1) Adjust 'delta' for rollovers
    static uint32_t previousSingleTurn = 0;  // track last 21-bit reading
    int32_t delta = (int32_t)raw_counts - (int32_t)previousSingleTurn;
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <mt6835_update_counts+0x17c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	61fb      	str	r3, [r7, #28]

    // If delta is too large => we rolled under
    if (delta > HALF_RANGE) {
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	035b      	lsls	r3, r3, #13
 80029be:	429a      	cmp	r2, r3
 80029c0:	dd05      	ble.n	80029ce <mt6835_update_counts+0x12e>
        // e.g., new reading is near 0, old reading near max => negative rollover
        delta -= FULL_RANGE;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4a16      	ldr	r2, [pc, #88]	@ (8002a20 <mt6835_update_counts+0x180>)
 80029c6:	4694      	mov	ip, r2
 80029c8:	4463      	add	r3, ip
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e009      	b.n	80029e2 <mt6835_update_counts+0x142>
    }
    // If delta is too negative => we rolled over
    else if (delta < -HALF_RANGE) {
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <mt6835_update_counts+0x184>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	da05      	bge.n	80029e2 <mt6835_update_counts+0x142>
        // e.g., new reading near max, old reading near 0 => positive rollover
        delta += FULL_RANGE;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	0392      	lsls	r2, r2, #14
 80029dc:	4694      	mov	ip, r2
 80029de:	4463      	add	r3, ip
 80029e0:	61fb      	str	r3, [r7, #28]
    }

    // 2) Accumulate the delta into 'multiTurnSensorCounts'
    //    so that multiTurnSensorCounts now holds the absolute total.
    multiTurnSensorCounts += delta;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	001c      	movs	r4, r3
 80029e6:	17db      	asrs	r3, r3, #31
 80029e8:	001d      	movs	r5, r3
 80029ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <mt6835_update_counts+0x188>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	1912      	adds	r2, r2, r4
 80029f2:	416b      	adcs	r3, r5
 80029f4:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <mt6835_update_counts+0x188>)
 80029f6:	600a      	str	r2, [r1, #0]
 80029f8:	604b      	str	r3, [r1, #4]

    previousSingleTurn = raw_counts;
 80029fa:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <mt6835_update_counts+0x17c>)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]
    singleTurnSensorCounts = raw_counts;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <mt6835_update_counts+0x18c>)
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]

    // If we got here => success
    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b009      	add	sp, #36	@ 0x24
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a10:	20000158 	.word	0x20000158
 8002a14:	20000159 	.word	0x20000159
 8002a18:	2000015a 	.word	0x2000015a
 8002a1c:	2000015c 	.word	0x2000015c
 8002a20:	ffe00000 	.word	0xffe00000
 8002a24:	fff00000 	.word	0xfff00000
 8002a28:	20000150 	.word	0x20000150
 8002a2c:	2000014c 	.word	0x2000014c

08002a30 <get_counts_single_turn>:

uint32_t get_counts_single_turn(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
    return singleTurnSensorCounts;
 8002a34:	4b02      	ldr	r3, [pc, #8]	@ (8002a40 <get_counts_single_turn+0x10>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	2000014c 	.word	0x2000014c

08002a44 <get_counts_multi_turn>:

int64_t get_counts_multi_turn(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
    return multiTurnSensorCounts;
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <get_counts_multi_turn+0x14>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
}
 8002a4e:	0010      	movs	r0, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000150 	.word	0x20000150

08002a5c <handle_error_blink>:
//static ErrorCode s_currentError = ENCODER_STATUS_OK;
static bool s_isBlinking = 0;
static bool error_occoured = false;

ErrorCode handle_error_blink(ErrorCode errorStatus)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	0002      	movs	r2, r0
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	701a      	strb	r2, [r3, #0]

	// Simulate the snippet logic
	if (errorStatus == ENCODER_STATUS_OK && !error_occoured)
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <handle_error_blink+0x26>
 8002a70:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <handle_error_blink+0x98>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2201      	movs	r2, #1
 8002a76:	4053      	eors	r3, r2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <handle_error_blink+0x26>
	{
		return ENCODER_STATUS_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e033      	b.n	8002aea <handle_error_blink+0x8e>
	}
	error_occoured = true;
 8002a82:	4b1c      	ldr	r3, [pc, #112]	@ (8002af4 <handle_error_blink+0x98>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
	if (errorStatus == ENCODER_STATUS_NO_CANBUS)
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d110      	bne.n	8002ab2 <handle_error_blink+0x56>
	{
		if (!s_isBlinking)
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <handle_error_blink+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2201      	movs	r2, #1
 8002a96:	4053      	eors	r3, r2
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01d      	beq.n	8002ada <handle_error_blink+0x7e>
		{
			blink_led_morse_init("SOS", 0.33f);
 8002a9e:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <handle_error_blink+0xa0>)
 8002aa0:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <handle_error_blink+0xa4>)
 8002aa2:	1c11      	adds	r1, r2, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 ff2b 	bl	8003900 <blink_led_morse_init>
			s_isBlinking = true;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <handle_error_blink+0x9c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e013      	b.n	8002ada <handle_error_blink+0x7e>
		}
	}
	else if (errorStatus == ENCODER_STATUS_CAN_TX_FIFO_FULL)
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10f      	bne.n	8002ada <handle_error_blink+0x7e>
	{
		if (!s_isBlinking)
 8002aba:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <handle_error_blink+0x9c>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4053      	eors	r3, r2
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <handle_error_blink+0x7e>
		{
			blink_led_morse_init("SOS", 0.1f);
 8002ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <handle_error_blink+0xa8>)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <handle_error_blink+0xa4>)
 8002acc:	1c11      	adds	r1, r2, #0
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 ff16 	bl	8003900 <blink_led_morse_init>
			s_isBlinking = true;
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <handle_error_blink+0x9c>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
		}

	}

	if (blink_led_morse_process())
 8002ada:	f000 ff2b 	bl	8003934 <blink_led_morse_process>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d002      	beq.n	8002ae8 <handle_error_blink+0x8c>
	{
		s_isBlinking = false;
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <handle_error_blink+0x9c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]

	}
	return ENCODER_STATUS_ERROR;
 8002ae8:	2304      	movs	r3, #4
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	20000161 	.word	0x20000161
 8002af8:	20000160 	.word	0x20000160
 8002afc:	3ea8f5c3 	.word	0x3ea8f5c3
 8002b00:	08009bd8 	.word	0x08009bd8
 8002b04:	3dcccccd 	.word	0x3dcccccd

08002b08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b0c:	f3bf 8f4f 	dsb	sy
}
 8002b10:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b12:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <__NVIC_SystemReset+0x1c>)
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <__NVIC_SystemReset+0x20>)
 8002b16:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b18:	f3bf 8f4f 	dsb	sy
}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	e7fd      	b.n	8002b1e <__NVIC_SystemReset+0x16>
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	e000ed00 	.word	0xe000ed00
 8002b28:	05fa0004 	.word	0x05fa0004

08002b2c <HAL_FDCAN_RxFifo0Callback>:
/***************************************************************************************************
 *
 *   HAL_FDCAN_RxFifo0Callback()
 *
 **************************************************************************************************/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d100      	bne.n	8002b40 <HAL_FDCAN_RxFifo0Callback+0x14>
 8002b3e:	e0c4      	b.n	8002cca <HAL_FDCAN_RxFifo0Callback+0x19e>
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData)
 8002b40:	4b63      	ldr	r3, [pc, #396]	@ (8002cd0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002b42:	4a64      	ldr	r2, [pc, #400]	@ (8002cd4 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	2140      	movs	r1, #64	@ 0x40
 8002b48:	f002 ff6a 	bl	8005a20 <HAL_FDCAN_GetRxMessage>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_FDCAN_RxFifo0Callback+0x28>
				!= HAL_OK) {
			Error_Handler();
 8002b50:	f000 fe98 	bl	8003884 <Error_Handler>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f003 f876 	bl	8005c4c <HAL_FDCAN_ActivateNotification>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_FDCAN_RxFifo0Callback+0x3c>
		FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
			Error_Handler();
 8002b64:	f000 fe8e 	bl	8003884 <Error_Handler>
		}
		// update heartbeat counter
		if (RxHeader.Identifier == ROBORIO_CAN_ID) {
 8002b68:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd4 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002cd8 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d105      	bne.n	8002b7e <HAL_FDCAN_RxFifo0Callback+0x52>
			lastHeartbeatTime = HAL_GetTick();
 8002b72:	f001 fd77 	bl	8004664 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	4b58      	ldr	r3, [pc, #352]	@ (8002cdc <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8002b7a:	601a      	str	r2, [r3, #0]

			return;
 8002b7c:	e0a5      	b.n	8002cca <HAL_FDCAN_RxFifo0Callback+0x19e>
		}

		if (RxData[0] == 41) {
 8002b7e:	4b54      	ldr	r3, [pc, #336]	@ (8002cd0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b29      	cmp	r3, #41	@ 0x29
 8002b84:	d117      	bne.n	8002bb6 <HAL_FDCAN_RxFifo0Callback+0x8a>
			device_id = RxData[2];
 8002b86:	4b52      	ldr	r3, [pc, #328]	@ (8002cd0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002b88:	789b      	ldrb	r3, [r3, #2]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	4b54      	ldr	r3, [pc, #336]	@ (8002ce0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8002b8e:	601a      	str	r2, [r3, #0]
			TxHeader.Identifier = BASE_ID + device_id;
 8002b90:	4a54      	ldr	r2, [pc, #336]	@ (8002ce4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8002b92:	4b53      	ldr	r3, [pc, #332]	@ (8002ce0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	001a      	movs	r2, r3
 8002b9a:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002b9c:	601a      	str	r2, [r3, #0]

			//FLASH_PageErase(FLASH_BANK_1, 0x7E);
			writeData = TxHeader.Identifier;  // Example 64-bit data
 8002b9e:	4b52      	ldr	r3, [pc, #328]	@ (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	001c      	movs	r4, r3
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	001d      	movs	r5, r3
 8002ba8:	4b50      	ldr	r3, [pc, #320]	@ (8002cec <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8002baa:	601c      	str	r4, [r3, #0]
 8002bac:	605d      	str	r5, [r3, #4]
			towr = 1;
 8002bae:	4b50      	ldr	r3, [pc, #320]	@ (8002cf0 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e089      	b.n	8002cca <HAL_FDCAN_RxFifo0Callback+0x19e>

		} else if (RxData[0] == 42) {
 8002bb6:	4b46      	ldr	r3, [pc, #280]	@ (8002cd0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bbc:	d103      	bne.n	8002bc6 <HAL_FDCAN_RxFifo0Callback+0x9a>
			pooptest = 1;
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e081      	b.n	8002cca <HAL_FDCAN_RxFifo0Callback+0x19e>

		} else if (RxData[0] == 43) {
 8002bc6:	4b42      	ldr	r3, [pc, #264]	@ (8002cd0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b2b      	cmp	r3, #43	@ 0x2b
 8002bcc:	d10a      	bne.n	8002be4 <HAL_FDCAN_RxFifo0Callback+0xb8>
			HAL_FLASH_Unlock();
 8002bce:	f003 fbe5 	bl	800639c <HAL_FLASH_Unlock>
			FLASH_PageErase(FLASH_BANK_1, 0x7E);
 8002bd2:	217e      	movs	r1, #126	@ 0x7e
 8002bd4:	2004      	movs	r0, #4
 8002bd6:	f003 fc95 	bl	8006504 <FLASH_PageErase>
			HAL_FLASH_Lock();
 8002bda:	f003 fc03 	bl	80063e4 <HAL_FLASH_Lock>
			HAL_NVIC_SystemReset();
 8002bde:	f002 fcb0 	bl	8005542 <HAL_NVIC_SystemReset>
 8002be2:	e072      	b.n	8002cca <HAL_FDCAN_RxFifo0Callback+0x19e>

		}
		// This is the command for query all devices
		else if (RxData[0] == 44) {
 8002be4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b2c      	cmp	r3, #44	@ 0x2c
 8002bea:	d16e      	bne.n	8002cca <HAL_FDCAN_RxFifo0Callback+0x19e>
			uint32_t uid[3];

			uid[0] = HAL_GetUIDw0();
 8002bec:	f001 fd68 	bl	80046c0 <HAL_GetUIDw0>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	2414      	movs	r4, #20
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	601a      	str	r2, [r3, #0]
			uid[1] = HAL_GetUIDw1();
 8002bf8:	f001 fd6c 	bl	80046d4 <HAL_GetUIDw1>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	605a      	str	r2, [r3, #4]
			uid[2] = HAL_GetUIDw2();
 8002c02:	f001 fd71 	bl	80046e8 <HAL_GetUIDw2>
 8002c06:	0002      	movs	r2, r0
 8002c08:	0021      	movs	r1, r4
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	609a      	str	r2, [r3, #8]
			// send as device 0 even if multiple devices with conflict
			// Declare a new 8-bit array for debug purposes
			uint8_t uidBytes[12]; // 12 bytes (since 3 * 32 bits = 96 bits = 12 bytes)

			// Populate the 8-bit array with the values from the 32-bit UID array
			uidBytes[0] = (uint8_t) (uid[0] >> 24);
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e1b      	lsrs	r3, r3, #24
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	2008      	movs	r0, #8
 8002c18:	183b      	adds	r3, r7, r0
 8002c1a:	701a      	strb	r2, [r3, #0]
			uidBytes[1] = (uint8_t) (uid[0] >> 16);
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	705a      	strb	r2, [r3, #1]
			uidBytes[2] = (uint8_t) (uid[0] >> 8);
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	709a      	strb	r2, [r3, #2]
			uidBytes[3] = (uint8_t) (uid[0]);
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	70da      	strb	r2, [r3, #3]

			uidBytes[4] = (uint8_t) (uid[1] >> 24);
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	0e1b      	lsrs	r3, r3, #24
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	711a      	strb	r2, [r3, #4]
			uidBytes[5] = (uint8_t) (uid[1] >> 16);
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	183b      	adds	r3, r7, r0
 8002c54:	715a      	strb	r2, [r3, #5]
			uidBytes[6] = (uint8_t) (uid[1] >> 8);
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	719a      	strb	r2, [r3, #6]
			uidBytes[7] = (uint8_t) (uid[1]);
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	71da      	strb	r2, [r3, #7]

			uidBytes[8] = (uint8_t) (uid[2] >> 24);
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	0e1b      	lsrs	r3, r3, #24
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	183b      	adds	r3, r7, r0
 8002c76:	721a      	strb	r2, [r3, #8]
			uidBytes[9] = (uint8_t) (uid[2] >> 16);
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	183b      	adds	r3, r7, r0
 8002c82:	725a      	strb	r2, [r3, #9]
			uidBytes[10] = (uint8_t) (uid[2] >> 8);
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	183b      	adds	r3, r7, r0
 8002c8e:	729a      	strb	r2, [r3, #10]
			uidBytes[11] = (uint8_t) (uid[2]);
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	0001      	movs	r1, r0
 8002c98:	183b      	adds	r3, r7, r0
 8002c9a:	72da      	strb	r2, [r3, #11]

			TxHeader.DataLength = 8;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	60da      	str	r2, [r3, #12]
			TxHeader.Identifier = BASE_ID + device_id_index;
 8002ca2:	4a10      	ldr	r2, [pc, #64]	@ (8002ce4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8002ca4:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	18d3      	adds	r3, r2, r3
 8002caa:	001a      	movs	r2, r3
 8002cac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002cae:	601a      	str	r2, [r3, #0]

			// Now pass the 8-bit array to the Tx FIFO queue function
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, uidBytes);
 8002cb0:	187a      	adds	r2, r7, r1
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f002 fe6d 	bl	8005996 <HAL_FDCAN_AddMessageToTxFifoQ>

			TxHeader.Identifier = BASE_ID + device_id;
 8002cbc:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8002cc8:	601a      	str	r2, [r3, #0]

		}

	}

} /* Emd pf HAL_FDCAN_RxFifo0Callback */
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b008      	add	sp, #32
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	200007b4 	.word	0x200007b4
 8002cd4:	2000074c 	.word	0x2000074c
 8002cd8:	01011840 	.word	0x01011840
 8002cdc:	20000724 	.word	0x20000724
 8002ce0:	2000070c 	.word	0x2000070c
 8002ce4:	0a080000 	.word	0x0a080000
 8002ce8:	20000728 	.word	0x20000728
 8002cec:	20000718 	.word	0x20000718
 8002cf0:	20000714 	.word	0x20000714
 8002cf4:	20000004 	.word	0x20000004
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	200001c8 	.word	0x200001c8

08002d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b099      	sub	sp, #100	@ 0x64
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef canStatus = HAL_ERROR;
 8002d06:	232f      	movs	r3, #47	@ 0x2f
 8002d08:	2230      	movs	r2, #48	@ 0x30
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	19da      	adds	r2, r3, r7
 8002d0e:	2301      	movs	r3, #1
 8002d10:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d12:	f001 fc2b 	bl	800456c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d16:	f000 f99d 	bl	8003054 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d1a:	f000 fd45 	bl	80037a8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8002d1e:	f000 fa5b 	bl	80031d8 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002d22:	f000 fb2f 	bl	8003384 <MX_SPI1_Init>
  MX_ADC1_Init();
 8002d26:	f000 f9f1 	bl	800310c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002d2a:	f000 fc07 	bl	800353c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d2e:	f000 fc85 	bl	800363c <MX_TIM4_Init>
  MX_I2C1_Init();
 8002d32:	f000 fae7 	bl	8003304 <MX_I2C1_Init>
  MX_USB_DRD_FS_PCD_Init();
 8002d36:	f000 fd01 	bl	800373c <MX_USB_DRD_FS_PCD_Init>
  MX_TIM2_Init();
 8002d3a:	f000 fb9f 	bl	800347c <MX_TIM2_Init>
  MX_SPI2_Init();
 8002d3e:	f000 fb5f 	bl	8003400 <MX_SPI2_Init>
//		Error_Handler();  // Fail-safe if setup fails
//	}

	// Call the hue cycling function
	// Start PWM on all timer channels
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002d42:	4bb3      	ldr	r3, [pc, #716]	@ (8003010 <main+0x310>)
 8002d44:	210c      	movs	r1, #12
 8002d46:	0018      	movs	r0, r3
 8002d48:	f005 ff4a 	bl	8008be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002d4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003014 <main+0x314>)
 8002d4e:	2108      	movs	r1, #8
 8002d50:	0018      	movs	r0, r3
 8002d52:	f005 ff45 	bl	8008be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002d56:	4bb0      	ldr	r3, [pc, #704]	@ (8003018 <main+0x318>)
 8002d58:	210c      	movs	r1, #12
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f005 ff40 	bl	8008be0 <HAL_TIM_PWM_Start>
	//FLASH_EraseInitTypeDef EraseInitStruct;
	//uint32_t PageError;
	// Unlock Flash

	// Read back from Flash
	uint64_t readData = *((uint64_t*) flashAddress);
 8002d60:	4bae      	ldr	r3, [pc, #696]	@ (800301c <main+0x31c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	653a      	str	r2, [r7, #80]	@ 0x50
 8002d6a:	657b      	str	r3, [r7, #84]	@ 0x54
//
//		hue += hue_increment;
//		HAL_Delay(5); // Delay 10 ms to achieve 1-second total duration
//	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8002d6c:	4bac      	ldr	r3, [pc, #688]	@ (8003020 <main+0x320>)
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f002 fdeb 	bl	800594a <HAL_FDCAN_Start>
 8002d74:	1e03      	subs	r3, r0, #0
 8002d76:	d001      	beq.n	8002d7c <main+0x7c>
		Error_Handler();
 8002d78:	f000 fd84 	bl	8003884 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8002d7c:	4ba8      	ldr	r3, [pc, #672]	@ (8003020 <main+0x320>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2101      	movs	r1, #1
 8002d82:	0018      	movs	r0, r3
 8002d84:	f002 ff62 	bl	8005c4c <HAL_FDCAN_ActivateNotification>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <main+0x90>
			0) != HAL_OK) {
		Error_Handler();
 8002d8c:	f000 fd7a 	bl	8003884 <Error_Handler>
	}
	if ((uint32_t) readData == 0xffffffff) {
 8002d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d92:	3301      	adds	r3, #1
 8002d94:	d104      	bne.n	8002da0 <main+0xa0>
		TxHeader.Identifier = BASE_ID;
 8002d96:	4ba3      	ldr	r3, [pc, #652]	@ (8003024 <main+0x324>)
 8002d98:	001a      	movs	r2, r3
 8002d9a:	4ba3      	ldr	r3, [pc, #652]	@ (8003028 <main+0x328>)
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <main+0xa6>
	} else {
		TxHeader.Identifier = (uint32_t) readData;
 8002da0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002da2:	4ba1      	ldr	r3, [pc, #644]	@ (8003028 <main+0x328>)
 8002da4:	601a      	str	r2, [r3, #0]
	}

	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002da6:	4aa0      	ldr	r2, [pc, #640]	@ (8003028 <main+0x328>)
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	6053      	str	r3, [r2, #4]

	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002dae:	4a9e      	ldr	r2, [pc, #632]	@ (8003028 <main+0x328>)
 8002db0:	2300      	movs	r3, #0
 8002db2:	6093      	str	r3, [r2, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002db4:	4a9c      	ldr	r2, [pc, #624]	@ (8003028 <main+0x328>)
 8002db6:	2308      	movs	r3, #8
 8002db8:	60d3      	str	r3, [r2, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002dba:	4a9b      	ldr	r2, [pc, #620]	@ (8003028 <main+0x328>)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6113      	str	r3, [r2, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002dc0:	4a99      	ldr	r2, [pc, #612]	@ (8003028 <main+0x328>)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6153      	str	r3, [r2, #20]

	//TxHeader.FDFormat            = FDCAN_FD_CAN;
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;    //dont use fd
 8002dc6:	4a98      	ldr	r2, [pc, #608]	@ (8003028 <main+0x328>)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6193      	str	r3, [r2, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002dcc:	4a96      	ldr	r2, [pc, #600]	@ (8003028 <main+0x328>)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61d3      	str	r3, [r2, #28]
	TxHeader.MessageMarker = 0;
 8002dd2:	4a95      	ldr	r2, [pc, #596]	@ (8003028 <main+0x328>)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6213      	str	r3, [r2, #32]

	// ADC
	HAL_ADC_Start(&hadc1);
 8002dd8:	4b94      	ldr	r3, [pc, #592]	@ (800302c <main+0x32c>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f001 ff82 	bl	8004ce4 <HAL_ADC_Start>

	// start CAN IC
	// Enable CAN transceiver by setting EN and STB_N HIGH
	HAL_GPIO_WritePin(CAN_ENABLE_GPIO_Port, CAN_ENABLE_Pin, GPIO_PIN_SET); // EN HIGH
 8002de0:	4b93      	ldr	r3, [pc, #588]	@ (8003030 <main+0x330>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	2120      	movs	r1, #32
 8002de6:	0018      	movs	r0, r3
 8002de8:	f003 fd41 	bl	800686e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_NSTANDBY_GPIO_Port, CAN_NSTANDBY_Pin, GPIO_PIN_SET); // STB_N HIGH
 8002dec:	4b90      	ldr	r3, [pc, #576]	@ (8003030 <main+0x330>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	2108      	movs	r1, #8
 8002df2:	0018      	movs	r0, r3
 8002df4:	f003 fd3b 	bl	800686e <HAL_GPIO_WritePin>

	// Check if ERR_N is low, indicating an error or flag set
	int err_flag = HAL_GPIO_ReadPin(CAN_NERROR_GPIO_Port, CAN_NERROR_Pin);
 8002df8:	4b8d      	ldr	r3, [pc, #564]	@ (8003030 <main+0x330>)
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f003 fd19 	bl	8006834 <HAL_GPIO_ReadPin>
 8002e02:	0003      	movs	r3, r0
 8002e04:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (err_flag == GPIO_PIN_RESET) // ERR_N is LOW
 8002e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <main+0x148>
			{
		// Clear flags by toggling STB_N or EN based on the datasheet
		HAL_GPIO_WritePin(CAN_NSTANDBY_GPIO_Port, CAN_NSTANDBY_Pin,
 8002e0c:	4b88      	ldr	r3, [pc, #544]	@ (8003030 <main+0x330>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2108      	movs	r1, #8
 8002e12:	0018      	movs	r0, r3
 8002e14:	f003 fd2b 	bl	800686e <HAL_GPIO_WritePin>
				GPIO_PIN_RESET); // STB_N LOW
		HAL_Delay(10); // Allow some stabilization time
 8002e18:	200a      	movs	r0, #10
 8002e1a:	f001 fc2d 	bl	8004678 <HAL_Delay>
		HAL_GPIO_WritePin(CAN_NSTANDBY_GPIO_Port, CAN_NSTANDBY_Pin,
 8002e1e:	4b84      	ldr	r3, [pc, #528]	@ (8003030 <main+0x330>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	2108      	movs	r1, #8
 8002e24:	0018      	movs	r0, r3
 8002e26:	f003 fd22 	bl	800686e <HAL_GPIO_WritePin>
				GPIO_PIN_SET);   // STB_N HIGH

		// Optionally toggle EN if STB_N toggle doesn't clear the flag
		HAL_GPIO_WritePin(CAN_ENABLE_GPIO_Port, CAN_ENABLE_Pin, GPIO_PIN_RESET); // EN LOW
 8002e2a:	4b81      	ldr	r3, [pc, #516]	@ (8003030 <main+0x330>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2120      	movs	r1, #32
 8002e30:	0018      	movs	r0, r3
 8002e32:	f003 fd1c 	bl	800686e <HAL_GPIO_WritePin>
		HAL_Delay(10); // Allow stabilization
 8002e36:	200a      	movs	r0, #10
 8002e38:	f001 fc1e 	bl	8004678 <HAL_Delay>
		HAL_GPIO_WritePin(CAN_ENABLE_GPIO_Port, CAN_ENABLE_Pin, GPIO_PIN_SET); // EN HIGH
 8002e3c:	4b7c      	ldr	r3, [pc, #496]	@ (8003030 <main+0x330>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2120      	movs	r1, #32
 8002e42:	0018      	movs	r0, r3
 8002e44:	f003 fd13 	bl	800686e <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uint32_t currentTime = HAL_GetTick();
 8002e48:	f001 fc0c 	bl	8004664 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
//
//		}

		{

			if (towr == 1) {
 8002e50:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <main+0x334>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10e      	bne.n	8002e76 <main+0x176>
				towr = 0;
 8002e58:	4a76      	ldr	r2, [pc, #472]	@ (8003034 <main+0x334>)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6013      	str	r3, [r2, #0]

				// my page erase thing messes thjis up
				HAL_FLASH_Unlock();
 8002e5e:	f003 fa9d 	bl	800639c <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, flashAddress,
 8002e62:	4b6e      	ldr	r3, [pc, #440]	@ (800301c <main+0x31c>)
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	4b74      	ldr	r3, [pc, #464]	@ (8003038 <main+0x338>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f003 fa47 	bl	8006300 <HAL_FLASH_Program>
						writeData);
				HAL_FLASH_Lock();
 8002e72:	f003 fab7 	bl	80063e4 <HAL_FLASH_Lock>
			// Read the angle and set LED hue
			//encAngle = mt6835_read_angle(&hspi1);

			// Prepare data for CAN transmission
			// Read the angle as counts
			mt6835_update_counts(&hspi1);
 8002e76:	4b71      	ldr	r3, [pc, #452]	@ (800303c <main+0x33c>)
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff fd11 	bl	80028a0 <mt6835_update_counts>
			get_counts_single_turn();
 8002e7e:	f7ff fdd7 	bl	8002a30 <get_counts_single_turn>
			//mt6835_read_counts(&hspi1);

			int64_t multiTurnCounts = get_counts_multi_turn();
 8002e82:	f7ff fddf 	bl	8002a44 <get_counts_multi_turn>
 8002e86:	0002      	movs	r2, r0
 8002e88:	000b      	movs	r3, r1
 8002e8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e8c:	647b      	str	r3, [r7, #68]	@ 0x44
			uint32_t singleTurnCounts = get_counts_single_turn();
 8002e8e:	f7ff fdcf 	bl	8002a30 <get_counts_single_turn>
 8002e92:	0003      	movs	r3, r0
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// Prepare 8-byte CAN message for the full 64-bit value
			TxData[0] = (uint8_t) ((multiTurnCounts >> 56) & 0xFF);
 8002e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e98:	161b      	asrs	r3, r3, #24
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9e:	17db      	asrs	r3, r3, #31
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	7e3b      	ldrb	r3, [r7, #24]
 8002ea4:	4a66      	ldr	r2, [pc, #408]	@ (8003040 <main+0x340>)
 8002ea6:	7013      	strb	r3, [r2, #0]
			TxData[1] = (uint8_t) ((multiTurnCounts >> 48) & 0xFF);
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eaa:	141b      	asrs	r3, r3, #16
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb0:	17db      	asrs	r3, r3, #31
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	7c3b      	ldrb	r3, [r7, #16]
 8002eb6:	4a62      	ldr	r2, [pc, #392]	@ (8003040 <main+0x340>)
 8002eb8:	7053      	strb	r3, [r2, #1]
			TxData[2] = (uint8_t) ((multiTurnCounts >> 40) & 0xFF);
 8002eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebc:	121b      	asrs	r3, r3, #8
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec2:	17db      	asrs	r3, r3, #31
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	7a3b      	ldrb	r3, [r7, #8]
 8002ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8003040 <main+0x340>)
 8002eca:	7093      	strb	r3, [r2, #2]
			TxData[3] = (uint8_t) ((multiTurnCounts >> 32) & 0xFF);
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ece:	001b      	movs	r3, r3
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed4:	17db      	asrs	r3, r3, #31
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	783b      	ldrb	r3, [r7, #0]
 8002eda:	4a59      	ldr	r2, [pc, #356]	@ (8003040 <main+0x340>)
 8002edc:	70d3      	strb	r3, [r2, #3]
			TxData[4] = (uint8_t) ((multiTurnCounts >> 24) & 0xFF);
 8002ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee4:	0e1b      	lsrs	r3, r3, #24
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	4313      	orrs	r3, r2
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef0:	161b      	asrs	r3, r3, #24
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef4:	2328      	movs	r3, #40	@ 0x28
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4a51      	ldr	r2, [pc, #324]	@ (8003040 <main+0x340>)
 8002efc:	7113      	strb	r3, [r2, #4]
			TxData[5] = (uint8_t) ((multiTurnCounts >> 16) & 0xFF);
 8002efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f10:	141b      	asrs	r3, r3, #16
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	2320      	movs	r3, #32
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	4a49      	ldr	r2, [pc, #292]	@ (8003040 <main+0x340>)
 8002f1c:	7153      	strb	r3, [r2, #5]
			TxData[6] = (uint8_t) ((multiTurnCounts >> 8) & 0xFF);
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f20:	061a      	lsls	r2, r3, #24
 8002f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f24:	0a1d      	lsrs	r5, r3, #8
 8002f26:	4315      	orrs	r5, r2
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	121e      	asrs	r6, r3, #8
 8002f2c:	b2eb      	uxtb	r3, r5
 8002f2e:	4a44      	ldr	r2, [pc, #272]	@ (8003040 <main+0x340>)
 8002f30:	7193      	strb	r3, [r2, #6]
			TxData[7] = (uint8_t) (multiTurnCounts & 0xFF);
 8002f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f36:	1c13      	adds	r3, r2, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4a41      	ldr	r2, [pc, #260]	@ (8003040 <main+0x340>)
 8002f3c:	71d3      	strb	r3, [r2, #7]

			// Add message to CAN Tx FIFO queue
			TxHeader.Identifier = BASE_ID + device_id;
 8002f3e:	4a39      	ldr	r2, [pc, #228]	@ (8003024 <main+0x324>)
 8002f40:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <main+0x344>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	18d3      	adds	r3, r2, r3
 8002f46:	001a      	movs	r2, r3
 8002f48:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <main+0x328>)
 8002f4a:	601a      	str	r2, [r3, #0]

			// returns HAL_Error if fifo queue is full or CAN is not initialized correctly
			// HAL_OK otherwise
			canStatus = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
 8002f4c:	232f      	movs	r3, #47	@ 0x2f
 8002f4e:	2230      	movs	r2, #48	@ 0x30
 8002f50:	189b      	adds	r3, r3, r2
 8002f52:	19dc      	adds	r4, r3, r7
 8002f54:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <main+0x340>)
 8002f56:	4934      	ldr	r1, [pc, #208]	@ (8003028 <main+0x328>)
 8002f58:	4b31      	ldr	r3, [pc, #196]	@ (8003020 <main+0x320>)
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f002 fd1b 	bl	8005996 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002f60:	0003      	movs	r3, r0
 8002f62:	7023      	strb	r3, [r4, #0]
					TxData);

			//this is required for auto reboot when can bus disconnects
			if (canStatus != HAL_OK) {
 8002f64:	232f      	movs	r3, #47	@ 0x2f
 8002f66:	2230      	movs	r2, #48	@ 0x30
 8002f68:	189b      	adds	r3, r3, r2
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00e      	beq.n	8002f90 <main+0x290>

				if ((currentTime - lastHeartbeatTime) > HEARTBEAT_TIMEOUT) {
 8002f72:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <main+0x348>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f78:	1a9a      	subs	r2, r3, r2
 8002f7a:	23fa      	movs	r3, #250	@ 0xfa
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d903      	bls.n	8002f8a <main+0x28a>
					errorStatus = ENCODER_STATUS_NO_CANBUS;
 8002f82:	4a32      	ldr	r2, [pc, #200]	@ (800304c <main+0x34c>)
 8002f84:	2302      	movs	r3, #2
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e002      	b.n	8002f90 <main+0x290>
				} else {
					errorStatus = ENCODER_STATUS_CAN_TX_FIFO_FULL;
 8002f8a:	4a30      	ldr	r2, [pc, #192]	@ (800304c <main+0x34c>)
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]
				}
			}

			if (handle_error_blink(errorStatus) == ENCODER_STATUS_OK) {
 8002f90:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <main+0x34c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff fd60 	bl	8002a5c <handle_error_blink>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d115      	bne.n	8002fcc <main+0x2cc>
				set_led_hue((float) singleTurnCounts / CPR, 1.0);
 8002fa0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fa2:	f7fe f875 	bl	8001090 <__aeabi_ui2f>
 8002fa6:	1c04      	adds	r4, r0, #0
 8002fa8:	2380      	movs	r3, #128	@ 0x80
 8002faa:	039b      	lsls	r3, r3, #14
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7fe f81f 	bl	8000ff0 <__aeabi_i2f>
 8002fb2:	1c03      	adds	r3, r0, #0
 8002fb4:	1c19      	adds	r1, r3, #0
 8002fb6:	1c20      	adds	r0, r4, #0
 8002fb8:	f7fd fa6e 	bl	8000498 <__aeabi_fdiv>
 8002fbc:	1c03      	adds	r3, r0, #0
 8002fbe:	1c1a      	adds	r2, r3, #0
 8002fc0:	23fe      	movs	r3, #254	@ 0xfe
 8002fc2:	059b      	lsls	r3, r3, #22
 8002fc4:	1c19      	adds	r1, r3, #0
 8002fc6:	1c10      	adds	r0, r2, #0
 8002fc8:	f000 ff3c 	bl	8003e44 <set_led_hue>
//			pooptest = 1;
//		}
//
//

		if (proxMode) {
 8002fcc:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <main+0x350>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <main+0x2ee>
			// Poll for ADC conversion completion
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8002fd4:	4b15      	ldr	r3, [pc, #84]	@ (800302c <main+0x32c>)
 8002fd6:	2164      	movs	r1, #100	@ 0x64
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f001 fed1 	bl	8004d80 <HAL_ADC_PollForConversion>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d105      	bne.n	8002fee <main+0x2ee>
				// Get the ADC value. Between 4095 and 0
				int adcValue = HAL_ADC_GetValue(&hadc1);
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <main+0x32c>)
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 ff5f 	bl	8004ea8 <HAL_ADC_GetValue>
 8002fea:	0003      	movs	r3, r0
 8002fec:	63bb      	str	r3, [r7, #56]	@ 0x38

			}
		}

		// currentTime is time at START of the loop
		uint32_t loopTime = HAL_GetTick() - currentTime;
 8002fee:	f001 fb39 	bl	8004664 <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	637b      	str	r3, [r7, #52]	@ 0x34
		if (loopTime > TARGET_LOOP_TIME) {
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	4293      	cmp	r3, r2
 8003002:	d800      	bhi.n	8003006 <main+0x306>
 8003004:	e720      	b.n	8002e48 <main+0x148>
			errorStatus = ENCODER_STATUS_LOOP_OVERRUN;
 8003006:	4a11      	ldr	r2, [pc, #68]	@ (800304c <main+0x34c>)
 8003008:	2303      	movs	r3, #3
 800300a:	6013      	str	r3, [r2, #0]
	while (1) {
 800300c:	e71c      	b.n	8002e48 <main+0x148>
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	20000348 	.word	0x20000348
 8003014:	20000394 	.word	0x20000394
 8003018:	200003e0 	.word	0x200003e0
 800301c:	20000008 	.word	0x20000008
 8003020:	200001c8 	.word	0x200001c8
 8003024:	0a080000 	.word	0x0a080000
 8003028:	20000728 	.word	0x20000728
 800302c:	20000164 	.word	0x20000164
 8003030:	50000400 	.word	0x50000400
 8003034:	20000714 	.word	0x20000714
 8003038:	20000718 	.word	0x20000718
 800303c:	20000280 	.word	0x20000280
 8003040:	20000774 	.word	0x20000774
 8003044:	2000070c 	.word	0x2000070c
 8003048:	20000724 	.word	0x20000724
 800304c:	20000720 	.word	0x20000720
 8003050:	20000710 	.word	0x20000710

08003054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b095      	sub	sp, #84	@ 0x54
 8003058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800305a:	2414      	movs	r4, #20
 800305c:	193b      	adds	r3, r7, r4
 800305e:	0018      	movs	r0, r3
 8003060:	233c      	movs	r3, #60	@ 0x3c
 8003062:	001a      	movs	r2, r3
 8003064:	2100      	movs	r1, #0
 8003066:	f006 fd77 	bl	8009b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	0018      	movs	r0, r3
 800306e:	2310      	movs	r3, #16
 8003070:	001a      	movs	r2, r3
 8003072:	2100      	movs	r1, #0
 8003074:	f006 fd70 	bl	8009b58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	0018      	movs	r0, r3
 800307e:	f003 fe7b 	bl	8006d78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8003082:	193b      	adds	r3, r7, r4
 8003084:	2221      	movs	r2, #33	@ 0x21
 8003086:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2280      	movs	r2, #128	@ 0x80
 800308c:	0252      	lsls	r2, r2, #9
 800308e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003090:	193b      	adds	r3, r7, r4
 8003092:	2280      	movs	r2, #128	@ 0x80
 8003094:	03d2      	lsls	r2, r2, #15
 8003096:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003098:	0021      	movs	r1, r4
 800309a:	187b      	adds	r3, r7, r1
 800309c:	2202      	movs	r2, #2
 800309e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	2203      	movs	r2, #3
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	2200      	movs	r2, #0
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2208      	movs	r2, #8
 80030b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	0292      	lsls	r2, r2, #10
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	0492      	lsls	r2, r2, #18
 80030c0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	0592      	lsls	r2, r2, #22
 80030c8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	0018      	movs	r0, r3
 80030ce:	f003 fe93 	bl	8006df8 <HAL_RCC_OscConfig>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d001      	beq.n	80030da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80030d6:	f000 fbd5 	bl	8003884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2207      	movs	r2, #7
 80030de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	2202      	movs	r2, #2
 80030e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	2102      	movs	r1, #2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f004 f9de 	bl	80074b8 <HAL_RCC_ClockConfig>
 80030fc:	1e03      	subs	r3, r0, #0
 80030fe:	d001      	beq.n	8003104 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003100:	f000 fbc0 	bl	8003884 <Error_Handler>
  }
}
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b015      	add	sp, #84	@ 0x54
 800310a:	bd90      	pop	{r4, r7, pc}

0800310c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	0018      	movs	r0, r3
 8003116:	230c      	movs	r3, #12
 8003118:	001a      	movs	r2, r3
 800311a:	2100      	movs	r1, #0
 800311c:	f006 fd1c 	bl	8009b58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003120:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003122:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <MX_ADC1_Init+0xc8>)
 8003124:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003126:	4b2a      	ldr	r3, [pc, #168]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003128:	2280      	movs	r2, #128	@ 0x80
 800312a:	05d2      	lsls	r2, r2, #23
 800312c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003134:	4b26      	ldr	r3, [pc, #152]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800313a:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003140:	4b23      	ldr	r3, [pc, #140]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003142:	2204      	movs	r2, #4
 8003144:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003146:	4b22      	ldr	r3, [pc, #136]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003148:	2200      	movs	r2, #0
 800314a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800314c:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 800314e:	2200      	movs	r2, #0
 8003150:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003154:	2201      	movs	r2, #1
 8003156:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 800315a:	2201      	movs	r2, #1
 800315c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800315e:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003160:	2200      	movs	r2, #0
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003164:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003166:	2200      	movs	r2, #0
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800316a:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 800316c:	222c      	movs	r2, #44	@ 0x2c
 800316e:	2100      	movs	r1, #0
 8003170:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003172:	4b17      	ldr	r3, [pc, #92]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003178:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 800317a:	2200      	movs	r2, #0
 800317c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800317e:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003180:	2200      	movs	r2, #0
 8003182:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003186:	223c      	movs	r2, #60	@ 0x3c
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800318c:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 800318e:	2200      	movs	r2, #0
 8003190:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003192:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 8003194:	0018      	movs	r0, r3
 8003196:	f001 fbfd 	bl	8004994 <HAL_ADC_Init>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d001      	beq.n	80031a2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800319e:	f000 fb71 	bl	8003884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b4:	1d3a      	adds	r2, r7, #4
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <MX_ADC1_Init+0xc4>)
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f001 fe80 	bl	8004ec0 <HAL_ADC_ConfigChannel>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d001      	beq.n	80031c8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80031c4:	f000 fb5e 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b004      	add	sp, #16
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000164 	.word	0x20000164
 80031d4:	40012400 	.word	0x40012400

080031d8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	@ 0x38
 80031dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80031de:	4b44      	ldr	r3, [pc, #272]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80031e0:	4a44      	ldr	r2, [pc, #272]	@ (80032f4 <MX_FDCAN1_Init+0x11c>)
 80031e2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80031e4:	4b42      	ldr	r3, [pc, #264]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80031ea:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80031f0:	4b3f      	ldr	r3, [pc, #252]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80031f6:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80031fc:	4b3c      	ldr	r3, [pc, #240]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80031fe:	2200      	movs	r2, #0
 8003200:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003202:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003204:	2200      	movs	r2, #0
 8003206:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003208:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 800320a:	2201      	movs	r2, #1
 800320c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 31;
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003210:	221f      	movs	r2, #31
 8003212:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 54;
 8003214:	4b36      	ldr	r3, [pc, #216]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003216:	2236      	movs	r2, #54	@ 0x36
 8003218:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 9;
 800321a:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 800321c:	2209      	movs	r2, #9
 800321e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003220:	4b33      	ldr	r3, [pc, #204]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003222:	2201      	movs	r2, #1
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003226:	4b32      	ldr	r3, [pc, #200]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003228:	2201      	movs	r2, #1
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 32;
 800322c:	4b30      	ldr	r3, [pc, #192]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 800322e:	2220      	movs	r2, #32
 8003230:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8003232:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003234:	2203      	movs	r2, #3
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003238:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 800323a:	2200      	movs	r2, #0
 800323c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 2;
 800323e:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003240:	2202      	movs	r2, #2
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003244:	4b2a      	ldr	r3, [pc, #168]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003246:	2200      	movs	r2, #0
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800324a:	4b29      	ldr	r3, [pc, #164]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 800324c:	0018      	movs	r0, r3
 800324e:	f002 f989 	bl	8005564 <HAL_FDCAN_Init>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d001      	beq.n	800325a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8003256:	f000 fb15 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800325a:	2118      	movs	r1, #24
 800325c:	187b      	adds	r3, r7, r1
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	05d2      	lsls	r2, r2, #23
 8003262:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
	//sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]

	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2201      	movs	r2, #1
 8003274:	60da      	str	r2, [r3, #12]

	// Accept only ID 0xA080000
	sFilterConfig.FilterID1 = 0xA070000;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <MX_FDCAN1_Init+0x120>)
 800327a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0xA090000 + 32;
 800327c:	187b      	adds	r3, r7, r1
 800327e:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <MX_FDCAN1_Init+0x124>)
 8003280:	615a      	str	r2, [r3, #20]

	//sFilterConfig.RxBufferIndex = 0;
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8003282:	187a      	adds	r2, r7, r1
 8003284:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 8003286:	0011      	movs	r1, r2
 8003288:	0018      	movs	r0, r3
 800328a:	f002 fad1 	bl	8005830 <HAL_FDCAN_ConfigFilter>
 800328e:	1e03      	subs	r3, r0, #0
 8003290:	d001      	beq.n	8003296 <MX_FDCAN1_Init+0xbe>
		/* Filter configuration Error */
		Error_Handler();
 8003292:	f000 faf7 	bl	8003884 <Error_Handler>
	}

	FDCAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.IdType = FDCAN_EXTENDED_ID;
 8003296:	003b      	movs	r3, r7
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	05d2      	lsls	r2, r2, #23
 800329c:	601a      	str	r2, [r3, #0]
	sFilterConfig2.FilterIndex = 1;
 800329e:	003b      	movs	r3, r7
 80032a0:	2201      	movs	r2, #1
 80032a2:	605a      	str	r2, [r3, #4]
	sFilterConfig2.FilterType = FDCAN_FILTER_DUAL;
 80032a4:	003b      	movs	r3, r7
 80032a6:	2201      	movs	r2, #1
 80032a8:	609a      	str	r2, [r3, #8]

	sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80032aa:	003b      	movs	r3, r7
 80032ac:	2201      	movs	r2, #1
 80032ae:	60da      	str	r2, [r3, #12]

	sFilterConfig2.FilterID1 = ROBORIO_CAN_ID;
 80032b0:	003b      	movs	r3, r7
 80032b2:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <MX_FDCAN1_Init+0x128>)
 80032b4:	611a      	str	r2, [r3, #16]
	sFilterConfig2.FilterID2 = 0x0;
 80032b6:	003b      	movs	r3, r7
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig2) != HAL_OK) {
 80032bc:	003a      	movs	r2, r7
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f002 fab4 	bl	8005830 <HAL_FDCAN_ConfigFilter>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d001      	beq.n	80032d0 <MX_FDCAN1_Init+0xf8>
		/* Filter configuration Error */
		Error_Handler();
 80032cc:	f000 fada 	bl	8003884 <Error_Handler>
//															 FDCAN_REJECT_REMOTE) != HAL_OK)
//	{
//		Error_Handler();
//	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT,
 80032d0:	4807      	ldr	r0, [pc, #28]	@ (80032f0 <MX_FDCAN1_Init+0x118>)
 80032d2:	2301      	movs	r3, #1
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	2202      	movs	r2, #2
 80032da:	2102      	movs	r1, #2
 80032dc:	f002 fb05 	bl	80058ea <HAL_FDCAN_ConfigGlobalFilter>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <MX_FDCAN1_Init+0x110>
	FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK) {
		Error_Handler();
 80032e4:	f000 face 	bl	8003884 <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 80032e8:	46c0      	nop			@ (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b00c      	add	sp, #48	@ 0x30
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200001c8 	.word	0x200001c8
 80032f4:	40006400 	.word	0x40006400
 80032f8:	0a070000 	.word	0x0a070000
 80032fc:	0a090020 	.word	0x0a090020
 8003300:	01011840 	.word	0x01011840

08003304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003308:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <MX_I2C1_Init+0x74>)
 800330a:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <MX_I2C1_Init+0x78>)
 800330c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 800330e:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003310:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <MX_I2C1_Init+0x7c>)
 8003312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003314:	4b18      	ldr	r3, [pc, #96]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <MX_I2C1_Init+0x74>)
 800331c:	2201      	movs	r2, #1
 800331e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003320:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800332c:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <MX_I2C1_Init+0x74>)
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003332:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003334:	2200      	movs	r2, #0
 8003336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003338:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <MX_I2C1_Init+0x74>)
 800333a:	2200      	movs	r2, #0
 800333c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800333e:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003340:	0018      	movs	r0, r3
 8003342:	f003 fab1 	bl	80068a8 <HAL_I2C_Init>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800334a:	f000 fa9b 	bl	8003884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003350:	2100      	movs	r1, #0
 8003352:	0018      	movs	r0, r3
 8003354:	f003 fb4e 	bl	80069f4 <HAL_I2CEx_ConfigAnalogFilter>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800335c:	f000 fa92 	bl	8003884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <MX_I2C1_Init+0x74>)
 8003362:	2100      	movs	r1, #0
 8003364:	0018      	movs	r0, r3
 8003366:	f003 fb91 	bl	8006a8c <HAL_I2CEx_ConfigDigitalFilter>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800336e:	f000 fa89 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000022c 	.word	0x2000022c
 800337c:	40005400 	.word	0x40005400
 8003380:	00c12166 	.word	0x00c12166

08003384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003388:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <MX_SPI1_Init+0x74>)
 800338a:	4a1c      	ldr	r2, [pc, #112]	@ (80033fc <MX_SPI1_Init+0x78>)
 800338c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800338e:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <MX_SPI1_Init+0x74>)
 8003390:	2282      	movs	r2, #130	@ 0x82
 8003392:	0052      	lsls	r2, r2, #1
 8003394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003396:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <MX_SPI1_Init+0x74>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800339c:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <MX_SPI1_Init+0x74>)
 800339e:	22e0      	movs	r2, #224	@ 0xe0
 80033a0:	00d2      	lsls	r2, r2, #3
 80033a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80033a4:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033a6:	2202      	movs	r2, #2
 80033a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033b2:	2280      	movs	r2, #128	@ 0x80
 80033b4:	02d2      	lsls	r2, r2, #11
 80033b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033ba:	2220      	movs	r2, #32
 80033bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033d2:	2207      	movs	r2, #7
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033e2:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <MX_SPI1_Init+0x74>)
 80033e4:	0018      	movs	r0, r3
 80033e6:	f004 fc2b 	bl	8007c40 <HAL_SPI_Init>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d001      	beq.n	80033f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80033ee:	f000 fa49 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000280 	.word	0x20000280
 80033fc:	40013000 	.word	0x40013000

08003400 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <MX_SPI2_Init+0x78>)
 8003408:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <MX_SPI2_Init+0x74>)
 800340c:	2282      	movs	r2, #130	@ 0x82
 800340e:	0052      	lsls	r2, r2, #1
 8003410:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003412:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003418:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <MX_SPI2_Init+0x74>)
 800341a:	22e0      	movs	r2, #224	@ 0xe0
 800341c:	00d2      	lsls	r2, r2, #3
 800341e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003422:	2202      	movs	r2, #2
 8003424:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003426:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003428:	2201      	movs	r2, #1
 800342a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <MX_SPI2_Init+0x74>)
 800342e:	2280      	movs	r2, #128	@ 0x80
 8003430:	0092      	lsls	r2, r2, #2
 8003432:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003436:	2230      	movs	r2, #48	@ 0x30
 8003438:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <MX_SPI2_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003446:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003448:	2200      	movs	r2, #0
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <MX_SPI2_Init+0x74>)
 800344e:	2207      	movs	r2, #7
 8003450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003452:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <MX_SPI2_Init+0x74>)
 800345a:	2200      	movs	r2, #0
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800345e:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <MX_SPI2_Init+0x74>)
 8003460:	0018      	movs	r0, r3
 8003462:	f004 fbed 	bl	8007c40 <HAL_SPI_Init>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800346a:	f000 fa0b 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	200002e4 	.word	0x200002e4
 8003478:	40003800 	.word	0x40003800

0800347c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	@ 0x28
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003482:	231c      	movs	r3, #28
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	0018      	movs	r0, r3
 8003488:	230c      	movs	r3, #12
 800348a:	001a      	movs	r2, r3
 800348c:	2100      	movs	r1, #0
 800348e:	f006 fb63 	bl	8009b58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003492:	003b      	movs	r3, r7
 8003494:	0018      	movs	r0, r3
 8003496:	231c      	movs	r3, #28
 8003498:	001a      	movs	r2, r3
 800349a:	2100      	movs	r1, #0
 800349c:	f006 fb5c 	bl	8009b58 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034a0:	4b24      	ldr	r3, [pc, #144]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	05d2      	lsls	r2, r2, #23
 80034a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 80034a8:	4b22      	ldr	r3, [pc, #136]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034aa:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <MX_TIM2_Init+0xbc>)
 80034ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 80034b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034b6:	22fe      	movs	r2, #254	@ 0xfe
 80034b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034c8:	0018      	movs	r0, r3
 80034ca:	f005 fb31 	bl	8008b30 <HAL_TIM_PWM_Init>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80034d2:	f000 f9d7 	bl	8003884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d6:	211c      	movs	r1, #28
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034e4:	187a      	adds	r2, r7, r1
 80034e6:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <MX_TIM2_Init+0xb8>)
 80034e8:	0011      	movs	r1, r2
 80034ea:	0018      	movs	r0, r3
 80034ec:	f006 fa5a 	bl	80099a4 <HAL_TIMEx_MasterConfigSynchronization>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80034f4:	f000 f9c6 	bl	8003884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f8:	003b      	movs	r3, r7
 80034fa:	2260      	movs	r2, #96	@ 0x60
 80034fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80034fe:	003b      	movs	r3, r7
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003504:	003b      	movs	r3, r7
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800350a:	003b      	movs	r3, r7
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003510:	0039      	movs	r1, r7
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <MX_TIM2_Init+0xb8>)
 8003514:	220c      	movs	r2, #12
 8003516:	0018      	movs	r0, r3
 8003518:	f005 fc52 	bl	8008dc0 <HAL_TIM_PWM_ConfigChannel>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003520:	f000 f9b0 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <MX_TIM2_Init+0xb8>)
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fee0 	bl	80042ec <HAL_TIM_MspPostInit>

}
 800352c:	46c0      	nop			@ (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b00a      	add	sp, #40	@ 0x28
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000348 	.word	0x20000348
 8003538:	0000063f 	.word	0x0000063f

0800353c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08e      	sub	sp, #56	@ 0x38
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003542:	2328      	movs	r3, #40	@ 0x28
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	0018      	movs	r0, r3
 8003548:	2310      	movs	r3, #16
 800354a:	001a      	movs	r2, r3
 800354c:	2100      	movs	r1, #0
 800354e:	f006 fb03 	bl	8009b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003552:	231c      	movs	r3, #28
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	0018      	movs	r0, r3
 8003558:	230c      	movs	r3, #12
 800355a:	001a      	movs	r2, r3
 800355c:	2100      	movs	r1, #0
 800355e:	f006 fafb 	bl	8009b58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003562:	003b      	movs	r3, r7
 8003564:	0018      	movs	r0, r3
 8003566:	231c      	movs	r3, #28
 8003568:	001a      	movs	r2, r3
 800356a:	2100      	movs	r1, #0
 800356c:	f006 faf4 	bl	8009b58 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003570:	4b2f      	ldr	r3, [pc, #188]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003572:	4a30      	ldr	r2, [pc, #192]	@ (8003634 <MX_TIM3_Init+0xf8>)
 8003574:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8003576:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003578:	4a2f      	ldr	r2, [pc, #188]	@ (8003638 <MX_TIM3_Init+0xfc>)
 800357a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <MX_TIM3_Init+0xf4>)
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8003582:	4b2b      	ldr	r3, [pc, #172]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003584:	22fe      	movs	r2, #254	@ 0xfe
 8003586:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003588:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <MX_TIM3_Init+0xf4>)
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800358e:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003594:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003596:	0018      	movs	r0, r3
 8003598:	f005 fa72 	bl	8008a80 <HAL_TIM_Base_Init>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80035a0:	f000 f970 	bl	8003884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a4:	2128      	movs	r1, #40	@ 0x28
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2280      	movs	r2, #128	@ 0x80
 80035aa:	0152      	lsls	r2, r2, #5
 80035ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035ae:	187a      	adds	r2, r7, r1
 80035b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <MX_TIM3_Init+0xf4>)
 80035b2:	0011      	movs	r1, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f005 fd03 	bl	8008fc0 <HAL_TIM_ConfigClockSource>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80035be:	f000 f961 	bl	8003884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <MX_TIM3_Init+0xf4>)
 80035c4:	0018      	movs	r0, r3
 80035c6:	f005 fab3 	bl	8008b30 <HAL_TIM_PWM_Init>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80035ce:	f000 f959 	bl	8003884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d2:	211c      	movs	r1, #28
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035e0:	187a      	adds	r2, r7, r1
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <MX_TIM3_Init+0xf4>)
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f006 f9dc 	bl	80099a4 <HAL_TIMEx_MasterConfigSynchronization>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80035f0:	f000 f948 	bl	8003884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f4:	003b      	movs	r3, r7
 80035f6:	2260      	movs	r2, #96	@ 0x60
 80035f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80035fa:	003b      	movs	r3, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003600:	003b      	movs	r3, r7
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003606:	003b      	movs	r3, r7
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800360c:	0039      	movs	r1, r7
 800360e:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003610:	2208      	movs	r2, #8
 8003612:	0018      	movs	r0, r3
 8003614:	f005 fbd4 	bl	8008dc0 <HAL_TIM_PWM_ConfigChannel>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800361c:	f000 f932 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <MX_TIM3_Init+0xf4>)
 8003622:	0018      	movs	r0, r3
 8003624:	f000 fe62 	bl	80042ec <HAL_TIM_MspPostInit>

}
 8003628:	46c0      	nop			@ (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b00e      	add	sp, #56	@ 0x38
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000394 	.word	0x20000394
 8003634:	40000400 	.word	0x40000400
 8003638:	0000063f 	.word	0x0000063f

0800363c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	@ 0x38
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003642:	2328      	movs	r3, #40	@ 0x28
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	0018      	movs	r0, r3
 8003648:	2310      	movs	r3, #16
 800364a:	001a      	movs	r2, r3
 800364c:	2100      	movs	r1, #0
 800364e:	f006 fa83 	bl	8009b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003652:	231c      	movs	r3, #28
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	0018      	movs	r0, r3
 8003658:	230c      	movs	r3, #12
 800365a:	001a      	movs	r2, r3
 800365c:	2100      	movs	r1, #0
 800365e:	f006 fa7b 	bl	8009b58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003662:	003b      	movs	r3, r7
 8003664:	0018      	movs	r0, r3
 8003666:	231c      	movs	r3, #28
 8003668:	001a      	movs	r2, r3
 800366a:	2100      	movs	r1, #0
 800366c:	f006 fa74 	bl	8009b58 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003670:	4b2f      	ldr	r3, [pc, #188]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003672:	4a30      	ldr	r2, [pc, #192]	@ (8003734 <MX_TIM4_Init+0xf8>)
 8003674:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8003676:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003678:	4a2f      	ldr	r2, [pc, #188]	@ (8003738 <MX_TIM4_Init+0xfc>)
 800367a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367c:	4b2c      	ldr	r3, [pc, #176]	@ (8003730 <MX_TIM4_Init+0xf4>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8003682:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003684:	22fe      	movs	r2, #254	@ 0xfe
 8003686:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003688:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <MX_TIM4_Init+0xf4>)
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368e:	4b28      	ldr	r3, [pc, #160]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003694:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003696:	0018      	movs	r0, r3
 8003698:	f005 f9f2 	bl	8008a80 <HAL_TIM_Base_Init>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80036a0:	f000 f8f0 	bl	8003884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036a4:	2128      	movs	r1, #40	@ 0x28
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2280      	movs	r2, #128	@ 0x80
 80036aa:	0152      	lsls	r2, r2, #5
 80036ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036ae:	187a      	adds	r2, r7, r1
 80036b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003730 <MX_TIM4_Init+0xf4>)
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f005 fc83 	bl	8008fc0 <HAL_TIM_ConfigClockSource>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80036be:	f000 f8e1 	bl	8003884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <MX_TIM4_Init+0xf4>)
 80036c4:	0018      	movs	r0, r3
 80036c6:	f005 fa33 	bl	8008b30 <HAL_TIM_PWM_Init>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80036ce:	f000 f8d9 	bl	8003884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d2:	211c      	movs	r1, #28
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036e0:	187a      	adds	r2, r7, r1
 80036e2:	4b13      	ldr	r3, [pc, #76]	@ (8003730 <MX_TIM4_Init+0xf4>)
 80036e4:	0011      	movs	r1, r2
 80036e6:	0018      	movs	r0, r3
 80036e8:	f006 f95c 	bl	80099a4 <HAL_TIMEx_MasterConfigSynchronization>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80036f0:	f000 f8c8 	bl	8003884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f4:	003b      	movs	r3, r7
 80036f6:	2260      	movs	r2, #96	@ 0x60
 80036f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80036fa:	003b      	movs	r3, r7
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003700:	003b      	movs	r3, r7
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003706:	003b      	movs	r3, r7
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800370c:	0039      	movs	r1, r7
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003710:	220c      	movs	r2, #12
 8003712:	0018      	movs	r0, r3
 8003714:	f005 fb54 	bl	8008dc0 <HAL_TIM_PWM_ConfigChannel>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 800371c:	f000 f8b2 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <MX_TIM4_Init+0xf4>)
 8003722:	0018      	movs	r0, r3
 8003724:	f000 fde2 	bl	80042ec <HAL_TIM_MspPostInit>

}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b00e      	add	sp, #56	@ 0x38
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200003e0 	.word	0x200003e0
 8003734:	40000800 	.word	0x40000800
 8003738:	0000063f 	.word	0x0000063f

0800373c <MX_USB_DRD_FS_PCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_DRD_FS_PCD_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8003740:	4b17      	ldr	r3, [pc, #92]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003742:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <MX_USB_DRD_FS_PCD_Init+0x68>)
 8003744:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8003746:	4b16      	ldr	r3, [pc, #88]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003748:	2208      	movs	r2, #8
 800374a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800374c:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800374e:	2208      	movs	r2, #8
 8003750:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003754:	2202      	movs	r2, #2
 8003756:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003758:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800375a:	2202      	movs	r2, #2
 800375c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003760:	2200      	movs	r2, #0
 8003762:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003766:	2200      	movs	r2, #0
 8003768:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800376c:	2200      	movs	r2, #0
 800376e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003772:	2200      	movs	r2, #0
 8003774:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003778:	2200      	movs	r2, #0
 800377a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800377e:	2200      	movs	r2, #0
 8003780:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8003782:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003784:	2200      	movs	r2, #0
 8003786:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800378a:	0018      	movs	r0, r3
 800378c:	f003 f9ca 	bl	8006b24 <HAL_PCD_Init>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 8003794:	f000 f876 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	2000042c 	.word	0x2000042c
 80037a4:	40005c00 	.word	0x40005c00

080037a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b08b      	sub	sp, #44	@ 0x2c
 80037ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ae:	2414      	movs	r4, #20
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	0018      	movs	r0, r3
 80037b4:	2314      	movs	r3, #20
 80037b6:	001a      	movs	r2, r3
 80037b8:	2100      	movs	r1, #0
 80037ba:	f006 f9cd 	bl	8009b58 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037be:	4b2e      	ldr	r3, [pc, #184]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037c4:	2120      	movs	r1, #32
 80037c6:	430a      	orrs	r2, r1
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80037ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	2220      	movs	r2, #32
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037da:	4b27      	ldr	r3, [pc, #156]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037dc:	2101      	movs	r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80037e2:	4b25      	ldr	r3, [pc, #148]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e6:	2201      	movs	r2, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f2:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037f4:	2102      	movs	r1, #2
 80037f6:	430a      	orrs	r2, r1
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80037fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <MX_GPIO_Init+0xd0>)
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fe:	2202      	movs	r2, #2
 8003800:	4013      	ands	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003806:	4b1c      	ldr	r3, [pc, #112]	@ (8003878 <MX_GPIO_Init+0xd0>)
 8003808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800380a:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <MX_GPIO_Init+0xd0>)
 800380c:	2108      	movs	r1, #8
 800380e:	430a      	orrs	r2, r1
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34
 8003812:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <MX_GPIO_Init+0xd0>)
 8003814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003816:	2208      	movs	r2, #8
 8003818:	4013      	ands	r3, r2
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAL_EN_Pin|GPIO_PIN_12|CAN_NSTANDBY_Pin|CAN_ENABLE_Pin, GPIO_PIN_RESET);
 800381e:	4917      	ldr	r1, [pc, #92]	@ (800387c <MX_GPIO_Init+0xd4>)
 8003820:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <MX_GPIO_Init+0xd8>)
 8003822:	2200      	movs	r2, #0
 8003824:	0018      	movs	r0, r3
 8003826:	f003 f822 	bl	800686e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAL_EN_Pin PB12 CAN_NSTANDBY_Pin CAN_ENABLE_Pin */
  GPIO_InitStruct.Pin = CAL_EN_Pin|GPIO_PIN_12|CAN_NSTANDBY_Pin|CAN_ENABLE_Pin;
 800382a:	193b      	adds	r3, r7, r4
 800382c:	4a13      	ldr	r2, [pc, #76]	@ (800387c <MX_GPIO_Init+0xd4>)
 800382e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003830:	193b      	adds	r3, r7, r4
 8003832:	2201      	movs	r2, #1
 8003834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	193b      	adds	r3, r7, r4
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383c:	193b      	adds	r3, r7, r4
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003842:	193b      	adds	r3, r7, r4
 8003844:	4a0e      	ldr	r2, [pc, #56]	@ (8003880 <MX_GPIO_Init+0xd8>)
 8003846:	0019      	movs	r1, r3
 8003848:	0010      	movs	r0, r2
 800384a:	f002 fe87 	bl	800655c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_NERROR_Pin */
  GPIO_InitStruct.Pin = CAN_NERROR_Pin;
 800384e:	0021      	movs	r1, r4
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2280      	movs	r2, #128	@ 0x80
 8003854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	187b      	adds	r3, r7, r1
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CAN_NERROR_GPIO_Port, &GPIO_InitStruct);
 8003862:	187b      	adds	r3, r7, r1
 8003864:	4a06      	ldr	r2, [pc, #24]	@ (8003880 <MX_GPIO_Init+0xd8>)
 8003866:	0019      	movs	r1, r3
 8003868:	0010      	movs	r0, r2
 800386a:	f002 fe77 	bl	800655c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b00b      	add	sp, #44	@ 0x2c
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	40021000 	.word	0x40021000
 800387c:	0000102c 	.word	0x0000102c
 8003880:	50000400 	.word	0x50000400

08003884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	uint32_t elapsed_time = 0;  // Track elapsed time in milliseconds
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]

	while (1) {
		// Blink the LED
		set_led_rgb(255, 0, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	20ff      	movs	r0, #255	@ 0xff
 8003894:	f000 fa80 	bl	8003d98 <set_led_rgb>
		HAL_Delay(500);
 8003898:	23fa      	movs	r3, #250	@ 0xfa
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	0018      	movs	r0, r3
 800389e:	f000 feeb 	bl	8004678 <HAL_Delay>

		set_led_rgb(0, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	2000      	movs	r0, #0
 80038a8:	f000 fa76 	bl	8003d98 <set_led_rgb>
		HAL_Delay(500);
 80038ac:	23fa      	movs	r3, #250	@ 0xfa
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 fee1 	bl	8004678 <HAL_Delay>

		// Increment elapsed time
		elapsed_time += 1000; // 500ms + 500ms per loop iteration
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	22fa      	movs	r2, #250	@ 0xfa
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4694      	mov	ip, r2
 80038be:	4463      	add	r3, ip
 80038c0:	607b      	str	r3, [r7, #4]

		// Reset the chip after 10 seconds (10,000 milliseconds)
		if (elapsed_time >= 10000) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a02      	ldr	r2, [pc, #8]	@ (80038d0 <Error_Handler+0x4c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d9e1      	bls.n	800388e <Error_Handler+0xa>
			// Trigger a system reset
			NVIC_SystemReset();
 80038ca:	f7ff f91d 	bl	8002b08 <__NVIC_SystemReset>
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	0000270f 	.word	0x0000270f

080038d4 <is_delay_elapsed>:
 * @param duration    Desired delay in milliseconds.
 * @return true       If the desired delay has elapsed.
 * @return false      Otherwise.
 */
static bool is_delay_elapsed(uint32_t start_time, uint32_t duration)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
    uint32_t now = HAL_GetTick();
 80038de:	f000 fec1 	bl	8004664 <HAL_GetTick>
 80038e2:	0003      	movs	r3, r0
 80038e4:	60fb      	str	r3, [r7, #12]
    return ( (now - start_time) >= duration );
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad1      	subs	r1, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	4291      	cmp	r1, r2
 80038f2:	415b      	adcs	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <blink_led_morse_init>:

void blink_led_morse_init(const char *message, float hue2)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    // Initialize the context with the provided message and hue
    ctx.message   = message;
 800390a:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <blink_led_morse_init+0x30>)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
    ctx.morse_ptr = NULL;
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <blink_led_morse_init+0x30>)
 8003912:	2200      	movs	r2, #0
 8003914:	605a      	str	r2, [r3, #4]
    ctx.timestamp = 0;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <blink_led_morse_init+0x30>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
    ctx.state     = MORSE_STATE_IDLE;
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <blink_led_morse_init+0x30>)
 800391e:	2200      	movs	r2, #0
 8003920:	731a      	strb	r2, [r3, #12]

    ctx.hue       = hue2;
 8003922:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <blink_led_morse_init+0x30>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	611a      	str	r2, [r3, #16]
    //ctx.hue       = 0.33;
}
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200007f4 	.word	0x200007f4

08003934 <blink_led_morse_process>:

bool blink_led_morse_process(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
    // If we are already done, just return true immediately
    if (ctx.state == MORSE_STATE_DONE) {
 800393a:	4b64      	ldr	r3, [pc, #400]	@ (8003acc <blink_led_morse_process+0x198>)
 800393c:	7b1b      	ldrb	r3, [r3, #12]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d101      	bne.n	8003946 <blink_led_morse_process+0x12>
        return true;
 8003942:	2301      	movs	r3, #1
 8003944:	e0be      	b.n	8003ac4 <blink_led_morse_process+0x190>
    }

    switch (ctx.state)
 8003946:	4b61      	ldr	r3, [pc, #388]	@ (8003acc <blink_led_morse_process+0x198>)
 8003948:	7b1b      	ldrb	r3, [r3, #12]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d900      	bls.n	8003950 <blink_led_morse_process+0x1c>
 800394e:	e0ac      	b.n	8003aaa <blink_led_morse_process+0x176>
 8003950:	009a      	lsls	r2, r3, #2
 8003952:	4b5f      	ldr	r3, [pc, #380]	@ (8003ad0 <blink_led_morse_process+0x19c>)
 8003954:	18d3      	adds	r3, r2, r3
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	469f      	mov	pc, r3
        //   - If end of string, go to DONE
        //   - Otherwise, get the Morse code for that character
        //----------------------------------------------------------------------
        case MORSE_STATE_IDLE:
        {
            char c = *ctx.message++;
 800395a:	4b5c      	ldr	r3, [pc, #368]	@ (8003acc <blink_led_morse_process+0x198>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <blink_led_morse_process+0x198>)
 8003962:	6011      	str	r1, [r2, #0]
 8003964:	1dfa      	adds	r2, r7, #7
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	7013      	strb	r3, [r2, #0]
            if (c == '\0') {
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <blink_led_morse_process+0x46>
                // Reached the end of the message
                ctx.state = MORSE_STATE_DONE;
 8003972:	4b56      	ldr	r3, [pc, #344]	@ (8003acc <blink_led_morse_process+0x198>)
 8003974:	2205      	movs	r2, #5
 8003976:	731a      	strb	r2, [r3, #12]
                break;
 8003978:	e09e      	b.n	8003ab8 <blink_led_morse_process+0x184>
            }

            if (c == ' ') {
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b20      	cmp	r3, #32
 8003980:	d108      	bne.n	8003994 <blink_led_morse_process+0x60>
                // Space indicates new word (or separation)
                ctx.timestamp = HAL_GetTick();
 8003982:	f000 fe6f 	bl	8004664 <HAL_GetTick>
 8003986:	0002      	movs	r2, r0
 8003988:	4b50      	ldr	r3, [pc, #320]	@ (8003acc <blink_led_morse_process+0x198>)
 800398a:	609a      	str	r2, [r3, #8]
                ctx.state     = MORSE_STATE_LETTER_PAUSE;
 800398c:	4b4f      	ldr	r3, [pc, #316]	@ (8003acc <blink_led_morse_process+0x198>)
 800398e:	2204      	movs	r2, #4
 8003990:	731a      	strb	r2, [r3, #12]
                ctx.morse_ptr = get_morse_code(c);

                // Move to handle the first Morse symbol (dot or dash)
                ctx.state = MORSE_STATE_NEXT_SYMBOL;
            }
            break;
 8003992:	e091      	b.n	8003ab8 <blink_led_morse_process+0x184>
                c = (char)toupper((int)c);
 8003994:	1dfb      	adds	r3, r7, #7
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <blink_led_morse_process+0x1a0>)
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	001a      	movs	r2, r3
 80039a6:	2303      	movs	r3, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d102      	bne.n	80039b4 <blink_led_morse_process+0x80>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3b20      	subs	r3, #32
 80039b2:	e000      	b.n	80039b6 <blink_led_morse_process+0x82>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1dfa      	adds	r2, r7, #7
 80039b8:	7013      	strb	r3, [r2, #0]
                ctx.morse_ptr = get_morse_code(c);
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 f88a 	bl	8003ad8 <get_morse_code>
 80039c4:	0002      	movs	r2, r0
 80039c6:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <blink_led_morse_process+0x198>)
 80039c8:	605a      	str	r2, [r3, #4]
                ctx.state = MORSE_STATE_NEXT_SYMBOL;
 80039ca:	4b40      	ldr	r3, [pc, #256]	@ (8003acc <blink_led_morse_process+0x198>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	731a      	strb	r2, [r3, #12]
            break;
 80039d0:	e072      	b.n	8003ab8 <blink_led_morse_process+0x184>
        // MORSE_STATE_NEXT_SYMBOL:
        //   - If we reached end of Morse string, letter pause
        //   - Otherwise, turn LED on for dot/dash
        //----------------------------------------------------------------------
        case MORSE_STATE_NEXT_SYMBOL:
            if (ctx.morse_ptr == NULL || *ctx.morse_ptr == '\0') {
 80039d2:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <blink_led_morse_process+0x198>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <blink_led_morse_process+0xb0>
 80039da:	4b3c      	ldr	r3, [pc, #240]	@ (8003acc <blink_led_morse_process+0x198>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <blink_led_morse_process+0xc2>
                // No more symbols in this letter
                ctx.timestamp = HAL_GetTick();
 80039e4:	f000 fe3e 	bl	8004664 <HAL_GetTick>
 80039e8:	0002      	movs	r2, r0
 80039ea:	4b38      	ldr	r3, [pc, #224]	@ (8003acc <blink_led_morse_process+0x198>)
 80039ec:	609a      	str	r2, [r3, #8]
                ctx.state     = MORSE_STATE_LETTER_PAUSE;
 80039ee:	4b37      	ldr	r3, [pc, #220]	@ (8003acc <blink_led_morse_process+0x198>)
 80039f0:	2204      	movs	r2, #4
 80039f2:	731a      	strb	r2, [r3, #12]

                // Record time, move to SYMBOL_ON
                ctx.timestamp = HAL_GetTick();
                ctx.state     = MORSE_STATE_SYMBOL_ON;
            }
            break;
 80039f4:	e060      	b.n	8003ab8 <blink_led_morse_process+0x184>
                set_led_hue(ctx.hue, 1.0f);
 80039f6:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <blink_led_morse_process+0x198>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	22fe      	movs	r2, #254	@ 0xfe
 80039fc:	0592      	lsls	r2, r2, #22
 80039fe:	1c11      	adds	r1, r2, #0
 8003a00:	1c18      	adds	r0, r3, #0
 8003a02:	f000 fa1f 	bl	8003e44 <set_led_hue>
                ctx.timestamp = HAL_GetTick();
 8003a06:	f000 fe2d 	bl	8004664 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a0e:	609a      	str	r2, [r3, #8]
                ctx.state     = MORSE_STATE_SYMBOL_ON;
 8003a10:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a12:	2202      	movs	r2, #2
 8003a14:	731a      	strb	r2, [r3, #12]
            break;
 8003a16:	e04f      	b.n	8003ab8 <blink_led_morse_process+0x184>
        //   - Wait until dot/dash ON time is finished
        //   - Then turn LED off and do inter-symbol pause
        //----------------------------------------------------------------------
        case MORSE_STATE_SYMBOL_ON:
        {
            bool is_dot  = (*ctx.morse_ptr == '.');
 8003a18:	4b2c      	ldr	r3, [pc, #176]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	200f      	movs	r0, #15
 8003a20:	183b      	adds	r3, r7, r0
 8003a22:	3a2e      	subs	r2, #46	@ 0x2e
 8003a24:	4251      	negs	r1, r2
 8003a26:	414a      	adcs	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]
            uint32_t needed = is_dot ? DOT_DURATION : DASH_DURATION;
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <blink_led_morse_process+0x102>
 8003a32:	23c8      	movs	r3, #200	@ 0xc8
 8003a34:	e001      	b.n	8003a3a <blink_led_morse_process+0x106>
 8003a36:	2396      	movs	r3, #150	@ 0x96
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]

            if (is_delay_elapsed(ctx.timestamp, needed)) {
 8003a3c:	4b23      	ldr	r3, [pc, #140]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff ff45 	bl	80038d4 <is_delay_elapsed>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d02f      	beq.n	8003aae <blink_led_morse_process+0x17a>
                // Time's up for the current symbol. Turn off LED
                set_led_hue(0.0f, 0.0f);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	1c11      	adds	r1, r2, #0
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	f000 f9f5 	bl	8003e44 <set_led_hue>

                // Move to SYMBOL_OFF
                ctx.timestamp = HAL_GetTick();
 8003a5a:	f000 fe03 	bl	8004664 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a62:	609a      	str	r2, [r3, #8]
                ctx.state     = MORSE_STATE_SYMBOL_OFF;
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a66:	2203      	movs	r2, #3
 8003a68:	731a      	strb	r2, [r3, #12]
            }
            break;
 8003a6a:	e020      	b.n	8003aae <blink_led_morse_process+0x17a>
        // MORSE_STATE_SYMBOL_OFF:
        //   - Inter-symbol pause
        //   - When done, move to next symbol (ctx.morse_ptr++)
        //----------------------------------------------------------------------
        case MORSE_STATE_SYMBOL_OFF:
            if (is_delay_elapsed(ctx.timestamp, SYMBOL_PAUSE)) {
 8003a6c:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	21c8      	movs	r1, #200	@ 0xc8
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7ff ff2e 	bl	80038d4 <is_delay_elapsed>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d01a      	beq.n	8003ab2 <blink_led_morse_process+0x17e>
                // Advance to next dot/dash in the same letter
                ctx.morse_ptr++;
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a84:	605a      	str	r2, [r3, #4]
                ctx.state = MORSE_STATE_NEXT_SYMBOL;
 8003a86:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	731a      	strb	r2, [r3, #12]
            }
            break;
 8003a8c:	e011      	b.n	8003ab2 <blink_led_morse_process+0x17e>
        // MORSE_STATE_LETTER_PAUSE:
        //   - Wait the letter pause
        //   - Then go back to IDLE for next character
        //----------------------------------------------------------------------
        case MORSE_STATE_LETTER_PAUSE:
            if (is_delay_elapsed(ctx.timestamp, LETTER_PAUSE)) {
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <blink_led_morse_process+0x198>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2296      	movs	r2, #150	@ 0x96
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	0011      	movs	r1, r2
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff ff1b 	bl	80038d4 <is_delay_elapsed>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d009      	beq.n	8003ab6 <blink_led_morse_process+0x182>
                ctx.state = MORSE_STATE_IDLE;
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <blink_led_morse_process+0x198>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	731a      	strb	r2, [r3, #12]
            }
            break;
 8003aa8:	e005      	b.n	8003ab6 <blink_led_morse_process+0x182>
        //   - We’re finished. We'll never leave this state unless re-initialized
        //----------------------------------------------------------------------
        case MORSE_STATE_DONE:
        default:
            // Do nothing
            break;
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	e004      	b.n	8003ab8 <blink_led_morse_process+0x184>
            break;
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	e002      	b.n	8003ab8 <blink_led_morse_process+0x184>
            break;
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	e000      	b.n	8003ab8 <blink_led_morse_process+0x184>
            break;
 8003ab6:	46c0      	nop			@ (mov r8, r8)
    }

    // Return true if we've finished blinking the entire message
    return (ctx.state == MORSE_STATE_DONE);
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <blink_led_morse_process+0x198>)
 8003aba:	7b1b      	ldrb	r3, [r3, #12]
 8003abc:	3b05      	subs	r3, #5
 8003abe:	425a      	negs	r2, r3
 8003ac0:	4153      	adcs	r3, r2
 8003ac2:	b2db      	uxtb	r3, r3
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b004      	add	sp, #16
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	200007f4 	.word	0x200007f4
 8003ad0:	08009d84 	.word	0x08009d84
 8003ad4:	08009e54 	.word	0x08009e54

08003ad8 <get_morse_code>:

const char* get_morse_code(char c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	0002      	movs	r2, r0
 8003ae0:	1dfb      	adds	r3, r7, #7
 8003ae2:	701a      	strb	r2, [r3, #0]
        "---..", // 8
        "----."  // 9
    };

    // If it's A-Z
    if (c >= 'A' && c <= 'Z') {
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b40      	cmp	r3, #64	@ 0x40
 8003aea:	d90b      	bls.n	8003b04 <get_morse_code+0x2c>
 8003aec:	1dfb      	adds	r3, r7, #7
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b5a      	cmp	r3, #90	@ 0x5a
 8003af2:	d807      	bhi.n	8003b04 <get_morse_code+0x2c>
        return morse_table[c - 'A'];
 8003af4:	1dfb      	adds	r3, r7, #7
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	3b41      	subs	r3, #65	@ 0x41
 8003afa:	001a      	movs	r2, r3
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <get_morse_code+0x58>)
 8003afe:	0092      	lsls	r2, r2, #2
 8003b00:	58d3      	ldr	r3, [r2, r3]
 8003b02:	e010      	b.n	8003b26 <get_morse_code+0x4e>
    }
    // If it's 0-9
    if (c >= '0' && c <= '9') {
 8003b04:	1dfb      	adds	r3, r7, #7
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b2f      	cmp	r3, #47	@ 0x2f
 8003b0a:	d90b      	bls.n	8003b24 <get_morse_code+0x4c>
 8003b0c:	1dfb      	adds	r3, r7, #7
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b39      	cmp	r3, #57	@ 0x39
 8003b12:	d807      	bhi.n	8003b24 <get_morse_code+0x4c>
        return morse_table[(c - '0') + 26];
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	3b16      	subs	r3, #22
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <get_morse_code+0x58>)
 8003b1e:	0092      	lsls	r2, r2, #2
 8003b20:	58d3      	ldr	r3, [r2, r3]
 8003b22:	e000      	b.n	8003b26 <get_morse_code+0x4e>
    }

    // Unknown character or punctuation -> no Morse output
    return "";
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <get_morse_code+0x5c>)
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b002      	add	sp, #8
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	2000000c 	.word	0x2000000c
 8003b34:	08009bdc 	.word	0x08009bdc

08003b38 <hue_to_rgb>:
#include "rgb_led.h"
//#include "main.h"

// Function to convert hue (0 to 1) to RGB values
void hue_to_rgb(float hue, int *r, int *g, int *b)
{
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b092      	sub	sp, #72	@ 0x48
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6178      	str	r0, [r7, #20]
 8003b40:	6139      	str	r1, [r7, #16]
 8003b42:	60fa      	str	r2, [r7, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
	if (hue < 0.0 || hue > 1.0)
 8003b46:	2100      	movs	r1, #0
 8003b48:	6978      	ldr	r0, [r7, #20]
 8003b4a:	f7fc fc65 	bl	8000418 <__aeabi_fcmplt>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d106      	bne.n	8003b60 <hue_to_rgb+0x28>
 8003b52:	21fe      	movs	r1, #254	@ 0xfe
 8003b54:	0589      	lsls	r1, r1, #22
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7fc fc72 	bl	8000440 <__aeabi_fcmpgt>
 8003b5c:	1e03      	subs	r3, r0, #0
 8003b5e:	d00a      	beq.n	8003b76 <hue_to_rgb+0x3e>
	{
		// Clamp hue between 0 and 1
		hue = (hue < 0.0) ? 0.0 : 1.0;
 8003b60:	2100      	movs	r1, #0
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7fc fc58 	bl	8000418 <__aeabi_fcmplt>
 8003b68:	1e03      	subs	r3, r0, #0
 8003b6a:	d001      	beq.n	8003b70 <hue_to_rgb+0x38>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e001      	b.n	8003b74 <hue_to_rgb+0x3c>
 8003b70:	23fe      	movs	r3, #254	@ 0xfe
 8003b72:	059b      	lsls	r3, r3, #22
 8003b74:	617b      	str	r3, [r7, #20]
	}

	float h = hue * 360.0; // Convert to 0-360 degrees
 8003b76:	4983      	ldr	r1, [pc, #524]	@ (8003d84 <hue_to_rgb+0x24c>)
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	f7fc fe5b 	bl	8000834 <__aeabi_fmul>
 8003b7e:	1c03      	adds	r3, r0, #0
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
	float s = 1.0; // Full saturation
 8003b82:	23fe      	movs	r3, #254	@ 0xfe
 8003b84:	059b      	lsls	r3, r3, #22
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
	float v = 1.0; // Full value
 8003b88:	23fe      	movs	r3, #254	@ 0xfe
 8003b8a:	059b      	lsls	r3, r3, #22
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30

	int i = (int) (h / 60.0) % 6;
 8003b8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b90:	f7fe fd36 	bl	8002600 <__aeabi_f2d>
 8003b94:	2200      	movs	r2, #0
 8003b96:	4b7c      	ldr	r3, [pc, #496]	@ (8003d88 <hue_to_rgb+0x250>)
 8003b98:	f7fd fac0 	bl	800111c <__aeabi_ddiv>
 8003b9c:	0002      	movs	r2, r0
 8003b9e:	000b      	movs	r3, r1
 8003ba0:	0010      	movs	r0, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	f7fe fcc2 	bl	800252c <__aeabi_d2iz>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	2106      	movs	r1, #6
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7fc fc1b 	bl	80003e8 <__aeabi_idivmod>
 8003bb2:	000b      	movs	r3, r1
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float f = (h / 60.0) - i;
 8003bb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bb8:	f7fe fd22 	bl	8002600 <__aeabi_f2d>
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4b72      	ldr	r3, [pc, #456]	@ (8003d88 <hue_to_rgb+0x250>)
 8003bc0:	f7fd faac 	bl	800111c <__aeabi_ddiv>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	000b      	movs	r3, r1
 8003bc8:	0014      	movs	r4, r2
 8003bca:	001d      	movs	r5, r3
 8003bcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bce:	f7fe fce9 	bl	80025a4 <__aeabi_i2d>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	000b      	movs	r3, r1
 8003bd6:	0020      	movs	r0, r4
 8003bd8:	0029      	movs	r1, r5
 8003bda:	f7fe f89d 	bl	8001d18 <__aeabi_dsub>
 8003bde:	0002      	movs	r2, r0
 8003be0:	000b      	movs	r3, r1
 8003be2:	0010      	movs	r0, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	f7fe fd53 	bl	8002690 <__aeabi_d2f>
 8003bea:	1c03      	adds	r3, r0, #0
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
	float p = v * (1.0 - s);
 8003bee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bf0:	f7fe fd06 	bl	8002600 <__aeabi_f2d>
 8003bf4:	0004      	movs	r4, r0
 8003bf6:	000d      	movs	r5, r1
 8003bf8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003bfa:	f7fe fd01 	bl	8002600 <__aeabi_f2d>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	000b      	movs	r3, r1
 8003c02:	2000      	movs	r0, #0
 8003c04:	4961      	ldr	r1, [pc, #388]	@ (8003d8c <hue_to_rgb+0x254>)
 8003c06:	f7fe f887 	bl	8001d18 <__aeabi_dsub>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	000b      	movs	r3, r1
 8003c0e:	0020      	movs	r0, r4
 8003c10:	0029      	movs	r1, r5
 8003c12:	f7fd fd9b 	bl	800174c <__aeabi_dmul>
 8003c16:	0002      	movs	r2, r0
 8003c18:	000b      	movs	r3, r1
 8003c1a:	0010      	movs	r0, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	f7fe fd37 	bl	8002690 <__aeabi_d2f>
 8003c22:	1c03      	adds	r3, r0, #0
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
	float q = v * (1.0 - f * s);
 8003c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c28:	f7fe fcea 	bl	8002600 <__aeabi_f2d>
 8003c2c:	0004      	movs	r4, r0
 8003c2e:	000d      	movs	r5, r1
 8003c30:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c34:	f7fc fdfe 	bl	8000834 <__aeabi_fmul>
 8003c38:	1c03      	adds	r3, r0, #0
 8003c3a:	1c18      	adds	r0, r3, #0
 8003c3c:	f7fe fce0 	bl	8002600 <__aeabi_f2d>
 8003c40:	0002      	movs	r2, r0
 8003c42:	000b      	movs	r3, r1
 8003c44:	2000      	movs	r0, #0
 8003c46:	4951      	ldr	r1, [pc, #324]	@ (8003d8c <hue_to_rgb+0x254>)
 8003c48:	f7fe f866 	bl	8001d18 <__aeabi_dsub>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	000b      	movs	r3, r1
 8003c50:	0020      	movs	r0, r4
 8003c52:	0029      	movs	r1, r5
 8003c54:	f7fd fd7a 	bl	800174c <__aeabi_dmul>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	000b      	movs	r3, r1
 8003c5c:	0010      	movs	r0, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	f7fe fd16 	bl	8002690 <__aeabi_d2f>
 8003c64:	1c03      	adds	r3, r0, #0
 8003c66:	623b      	str	r3, [r7, #32]
	float t = v * (1.0 - (1.0 - f) * s);
 8003c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c6a:	f7fe fcc9 	bl	8002600 <__aeabi_f2d>
 8003c6e:	0004      	movs	r4, r0
 8003c70:	000d      	movs	r5, r1
 8003c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c74:	f7fe fcc4 	bl	8002600 <__aeabi_f2d>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	000b      	movs	r3, r1
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	4943      	ldr	r1, [pc, #268]	@ (8003d8c <hue_to_rgb+0x254>)
 8003c80:	f7fe f84a 	bl	8001d18 <__aeabi_dsub>
 8003c84:	0002      	movs	r2, r0
 8003c86:	000b      	movs	r3, r1
 8003c88:	603a      	str	r2, [r7, #0]
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c8e:	f7fe fcb7 	bl	8002600 <__aeabi_f2d>
 8003c92:	0002      	movs	r2, r0
 8003c94:	000b      	movs	r3, r1
 8003c96:	6838      	ldr	r0, [r7, #0]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	f7fd fd57 	bl	800174c <__aeabi_dmul>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	000b      	movs	r3, r1
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	4939      	ldr	r1, [pc, #228]	@ (8003d8c <hue_to_rgb+0x254>)
 8003ca6:	f7fe f837 	bl	8001d18 <__aeabi_dsub>
 8003caa:	0002      	movs	r2, r0
 8003cac:	000b      	movs	r3, r1
 8003cae:	0020      	movs	r0, r4
 8003cb0:	0029      	movs	r1, r5
 8003cb2:	f7fd fd4b 	bl	800174c <__aeabi_dmul>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	000b      	movs	r3, r1
 8003cba:	0010      	movs	r0, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	f7fe fce7 	bl	8002690 <__aeabi_d2f>
 8003cc2:	1c03      	adds	r3, r0, #0
 8003cc4:	61fb      	str	r3, [r7, #28]

	float r_f, g_f, b_f;
	switch (i)
 8003cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d82f      	bhi.n	8003d2c <hue_to_rgb+0x1f4>
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	009a      	lsls	r2, r3, #2
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8003d90 <hue_to_rgb+0x258>)
 8003cd2:	18d3      	adds	r3, r2, r3
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	469f      	mov	pc, r3
	{
	case 0:
		r_f = v;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
		g_f = t;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	643b      	str	r3, [r7, #64]	@ 0x40
		b_f = p;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8003ce4:	e029      	b.n	8003d3a <hue_to_rgb+0x202>
	case 1:
		r_f = q;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	647b      	str	r3, [r7, #68]	@ 0x44
		g_f = v;
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	643b      	str	r3, [r7, #64]	@ 0x40
		b_f = p;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8003cf2:	e022      	b.n	8003d3a <hue_to_rgb+0x202>
	case 2:
		r_f = p;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	647b      	str	r3, [r7, #68]	@ 0x44
		g_f = v;
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	643b      	str	r3, [r7, #64]	@ 0x40
		b_f = t;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8003d00:	e01b      	b.n	8003d3a <hue_to_rgb+0x202>
	case 3:
		r_f = p;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	647b      	str	r3, [r7, #68]	@ 0x44
		g_f = q;
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	643b      	str	r3, [r7, #64]	@ 0x40
		b_f = v;
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8003d0e:	e014      	b.n	8003d3a <hue_to_rgb+0x202>
	case 4:
		r_f = t;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	647b      	str	r3, [r7, #68]	@ 0x44
		g_f = p;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	643b      	str	r3, [r7, #64]	@ 0x40
		b_f = v;
 8003d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8003d1c:	e00d      	b.n	8003d3a <hue_to_rgb+0x202>
	case 5:
		r_f = v;
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
		g_f = p;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40
		b_f = q;
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8003d2a:	e006      	b.n	8003d3a <hue_to_rgb+0x202>
	default:
		r_f = g_f = b_f = 0; // Should never reach here
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
		break;
 8003d38:	46c0      	nop			@ (mov r8, r8)
	}

	// Convert to 0-255 range and assign to output
	*r = (int) (r_f * 255);
 8003d3a:	4916      	ldr	r1, [pc, #88]	@ (8003d94 <hue_to_rgb+0x25c>)
 8003d3c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d3e:	f7fc fd79 	bl	8000834 <__aeabi_fmul>
 8003d42:	1c03      	adds	r3, r0, #0
 8003d44:	1c18      	adds	r0, r3, #0
 8003d46:	f7fd f933 	bl	8000fb0 <__aeabi_f2iz>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	601a      	str	r2, [r3, #0]
	*g = (int) (g_f * 255);
 8003d50:	4910      	ldr	r1, [pc, #64]	@ (8003d94 <hue_to_rgb+0x25c>)
 8003d52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003d54:	f7fc fd6e 	bl	8000834 <__aeabi_fmul>
 8003d58:	1c03      	adds	r3, r0, #0
 8003d5a:	1c18      	adds	r0, r3, #0
 8003d5c:	f7fd f928 	bl	8000fb0 <__aeabi_f2iz>
 8003d60:	0002      	movs	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]
	*b = (int) (b_f * 255);
 8003d66:	490b      	ldr	r1, [pc, #44]	@ (8003d94 <hue_to_rgb+0x25c>)
 8003d68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d6a:	f7fc fd63 	bl	8000834 <__aeabi_fmul>
 8003d6e:	1c03      	adds	r3, r0, #0
 8003d70:	1c18      	adds	r0, r3, #0
 8003d72:	f7fd f91d 	bl	8000fb0 <__aeabi_f2iz>
 8003d76:	0002      	movs	r2, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	601a      	str	r2, [r3, #0]

	return;
 8003d7c:	46c0      	nop			@ (mov r8, r8)
}
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b012      	add	sp, #72	@ 0x48
 8003d82:	bdb0      	pop	{r4, r5, r7, pc}
 8003d84:	43b40000 	.word	0x43b40000
 8003d88:	404e0000 	.word	0x404e0000
 8003d8c:	3ff00000 	.word	0x3ff00000
 8003d90:	08009d98 	.word	0x08009d98
 8003d94:	437f0000 	.word	0x437f0000

08003d98 <set_led_rgb>:
		HAL_Delay(10); // Delay 10 ms to achieve 1-second total duration
	}
}

void set_led_rgb(uint8_t red, uint8_t green, uint8_t blue)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	0004      	movs	r4, r0
 8003da0:	0008      	movs	r0, r1
 8003da2:	0011      	movs	r1, r2
 8003da4:	1dfb      	adds	r3, r7, #7
 8003da6:	1c22      	adds	r2, r4, #0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	1dbb      	adds	r3, r7, #6
 8003dac:	1c02      	adds	r2, r0, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	1d7b      	adds	r3, r7, #5
 8003db2:	1c0a      	adds	r2, r1, #0
 8003db4:	701a      	strb	r2, [r3, #0]
    // Scale factors for color brightness adjustment
    float green_scale = 1.2; // Green is brighter, so scale it down more
 8003db6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <set_led_rgb+0x98>)
 8003db8:	60fb      	str	r3, [r7, #12]
    float blue_scale = 1.1;  // Blue is slightly brighter, scale it down slightly
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <set_led_rgb+0x9c>)
 8003dbc:	60bb      	str	r3, [r7, #8]
//    int test1 = TIM2->CCR4; // Scaled green PWM value
//    int test2 = TIM3->CCR3; // Scaled blue PWM value
//    int test3 = TIM4->CCR4; // Scaled red PWM value

    // Compute scaled PWM values
    TIM2->CCR4 = (uint8_t)(255 - (green / green_scale));  // Green channel
 8003dbe:	1dbb      	adds	r3, r7, #6
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fd f914 	bl	8000ff0 <__aeabi_i2f>
 8003dc8:	1c03      	adds	r3, r0, #0
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	1c18      	adds	r0, r3, #0
 8003dce:	f7fc fb63 	bl	8000498 <__aeabi_fdiv>
 8003dd2:	1c03      	adds	r3, r0, #0
 8003dd4:	1c19      	adds	r1, r3, #0
 8003dd6:	4818      	ldr	r0, [pc, #96]	@ (8003e38 <set_led_rgb+0xa0>)
 8003dd8:	f7fc fe86 	bl	8000ae8 <__aeabi_fsub>
 8003ddc:	1c03      	adds	r3, r0, #0
 8003dde:	1c18      	adds	r0, r3, #0
 8003de0:	f7fc fb42 	bl	8000468 <__aeabi_f2uiz>
 8003de4:	0003      	movs	r3, r0
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	2380      	movs	r3, #128	@ 0x80
 8003dea:	05db      	lsls	r3, r3, #23
 8003dec:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3->CCR3 = (uint8_t)(255 - (blue / blue_scale));    // Blue channel
 8003dee:	1d7b      	adds	r3, r7, #5
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fd f8fc 	bl	8000ff0 <__aeabi_i2f>
 8003df8:	1c03      	adds	r3, r0, #0
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	1c18      	adds	r0, r3, #0
 8003dfe:	f7fc fb4b 	bl	8000498 <__aeabi_fdiv>
 8003e02:	1c03      	adds	r3, r0, #0
 8003e04:	1c19      	adds	r1, r3, #0
 8003e06:	480c      	ldr	r0, [pc, #48]	@ (8003e38 <set_led_rgb+0xa0>)
 8003e08:	f7fc fe6e 	bl	8000ae8 <__aeabi_fsub>
 8003e0c:	1c03      	adds	r3, r0, #0
 8003e0e:	1c18      	adds	r0, r3, #0
 8003e10:	f7fc fb2a 	bl	8000468 <__aeabi_f2uiz>
 8003e14:	0003      	movs	r3, r0
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b08      	ldr	r3, [pc, #32]	@ (8003e3c <set_led_rgb+0xa4>)
 8003e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = (uint8_t)(255 - red);                   // Red channel (no scaling)
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <set_led_rgb+0xa8>)
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
    //test1 = TIM4->CCR4;




}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b005      	add	sp, #20
 8003e2e:	bd90      	pop	{r4, r7, pc}
 8003e30:	3f99999a 	.word	0x3f99999a
 8003e34:	3f8ccccd 	.word	0x3f8ccccd
 8003e38:	437f0000 	.word	0x437f0000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800

08003e44 <set_led_hue>:



// Function to set the LED color using hue and brightness (both between 0 and 1)
void set_led_hue(float hue, float brightness)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    int r, g, b;

    // Convert hue to RGB values
    hue_to_rgb(hue, &r, &g, &b);
 8003e4e:	230c      	movs	r3, #12
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	2210      	movs	r2, #16
 8003e54:	18ba      	adds	r2, r7, r2
 8003e56:	2114      	movs	r1, #20
 8003e58:	1879      	adds	r1, r7, r1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fe6c 	bl	8003b38 <hue_to_rgb>

    // Apply brightness scaling
    r = (int)(r * brightness);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7fd f8c4 	bl	8000ff0 <__aeabi_i2f>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	1c18      	adds	r0, r3, #0
 8003e6e:	f7fc fce1 	bl	8000834 <__aeabi_fmul>
 8003e72:	1c03      	adds	r3, r0, #0
 8003e74:	1c18      	adds	r0, r3, #0
 8003e76:	f7fd f89b 	bl	8000fb0 <__aeabi_f2iz>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	617b      	str	r3, [r7, #20]
    g = (int)(g * brightness);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fd f8b5 	bl	8000ff0 <__aeabi_i2f>
 8003e86:	1c03      	adds	r3, r0, #0
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	1c18      	adds	r0, r3, #0
 8003e8c:	f7fc fcd2 	bl	8000834 <__aeabi_fmul>
 8003e90:	1c03      	adds	r3, r0, #0
 8003e92:	1c18      	adds	r0, r3, #0
 8003e94:	f7fd f88c 	bl	8000fb0 <__aeabi_f2iz>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	613b      	str	r3, [r7, #16]
    b = (int)(b * brightness);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fd f8a6 	bl	8000ff0 <__aeabi_i2f>
 8003ea4:	1c03      	adds	r3, r0, #0
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	1c18      	adds	r0, r3, #0
 8003eaa:	f7fc fcc3 	bl	8000834 <__aeabi_fmul>
 8003eae:	1c03      	adds	r3, r0, #0
 8003eb0:	1c18      	adds	r0, r3, #0
 8003eb2:	f7fd f87d 	bl	8000fb0 <__aeabi_f2iz>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	60fb      	str	r3, [r7, #12]

    // Set the RGB PWM outputs (active-low for sink configuration)
    set_led_rgb((uint8_t)r, (uint8_t)g, (uint8_t)b);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	b2d1      	uxtb	r1, r2
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff ff66 	bl	8003d98 <set_led_rgb>
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b006      	add	sp, #24
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <HAL_MspInit+0x4c>)
 8003edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ede:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <HAL_MspInit+0x4c>)
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <HAL_MspInit+0x4c>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2201      	movs	r2, #1
 8003eec:	4013      	ands	r3, r2
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_MspInit+0x4c>)
 8003ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <HAL_MspInit+0x4c>)
 8003ef8:	2180      	movs	r1, #128	@ 0x80
 8003efa:	0549      	lsls	r1, r1, #21
 8003efc:	430a      	orrs	r2, r1
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <HAL_MspInit+0x4c>)
 8003f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	055b      	lsls	r3, r3, #21
 8003f08:	4013      	ands	r3, r2
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003f0e:	23c0      	movs	r3, #192	@ 0xc0
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 fbf2 	bl	80046fc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000

08003f24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b08b      	sub	sp, #44	@ 0x2c
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	2414      	movs	r4, #20
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	0018      	movs	r0, r3
 8003f32:	2314      	movs	r3, #20
 8003f34:	001a      	movs	r2, r3
 8003f36:	2100      	movs	r1, #0
 8003f38:	f005 fe0e 	bl	8009b58 <memset>
  if(hadc->Instance==ADC1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <HAL_ADC_MspInit+0x80>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d129      	bne.n	8003f9a <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003f46:	4b18      	ldr	r3, [pc, #96]	@ (8003fa8 <HAL_ADC_MspInit+0x84>)
 8003f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4a:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <HAL_ADC_MspInit+0x84>)
 8003f4c:	2180      	movs	r1, #128	@ 0x80
 8003f4e:	0349      	lsls	r1, r1, #13
 8003f50:	430a      	orrs	r2, r1
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <HAL_ADC_MspInit+0x84>)
 8003f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	035b      	lsls	r3, r3, #13
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f62:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <HAL_ADC_MspInit+0x84>)
 8003f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <HAL_ADC_MspInit+0x84>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <HAL_ADC_MspInit+0x84>)
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	2201      	movs	r2, #1
 8003f74:	4013      	ands	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8003f7a:	193b      	adds	r3, r7, r4
 8003f7c:	2221      	movs	r2, #33	@ 0x21
 8003f7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	2203      	movs	r2, #3
 8003f84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8c:	193a      	adds	r2, r7, r4
 8003f8e:	23a0      	movs	r3, #160	@ 0xa0
 8003f90:	05db      	lsls	r3, r3, #23
 8003f92:	0011      	movs	r1, r2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f002 fae1 	bl	800655c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b00b      	add	sp, #44	@ 0x2c
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	40012400 	.word	0x40012400
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b09d      	sub	sp, #116	@ 0x74
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	235c      	movs	r3, #92	@ 0x5c
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	0018      	movs	r0, r3
 8003fba:	2314      	movs	r3, #20
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f005 fdca 	bl	8009b58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fc4:	2410      	movs	r4, #16
 8003fc6:	193b      	adds	r3, r7, r4
 8003fc8:	0018      	movs	r0, r3
 8003fca:	234c      	movs	r3, #76	@ 0x4c
 8003fcc:	001a      	movs	r2, r3
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f005 fdc2 	bl	8009b58 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	@ (8004074 <HAL_FDCAN_MspInit+0xc8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d146      	bne.n	800406c <HAL_FDCAN_MspInit+0xc0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	2280      	movs	r2, #128	@ 0x80
 8003fe2:	0492      	lsls	r2, r2, #18
 8003fe4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003fe6:	193b      	adds	r3, r7, r4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fec:	193b      	adds	r3, r7, r4
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f003 fbea 	bl	80077c8 <HAL_RCCEx_PeriphCLKConfig>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003ff8:	f7ff fc44 	bl	8003884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8004078 <HAL_FDCAN_MspInit+0xcc>)
 8003ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <HAL_FDCAN_MspInit+0xcc>)
 8004002:	2180      	movs	r1, #128	@ 0x80
 8004004:	0149      	lsls	r1, r1, #5
 8004006:	430a      	orrs	r2, r1
 8004008:	63da      	str	r2, [r3, #60]	@ 0x3c
 800400a:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <HAL_FDCAN_MspInit+0xcc>)
 800400c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	015b      	lsls	r3, r3, #5
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004018:	4b17      	ldr	r3, [pc, #92]	@ (8004078 <HAL_FDCAN_MspInit+0xcc>)
 800401a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800401c:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <HAL_FDCAN_MspInit+0xcc>)
 800401e:	2108      	movs	r1, #8
 8004020:	430a      	orrs	r2, r1
 8004022:	635a      	str	r2, [r3, #52]	@ 0x34
 8004024:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <HAL_FDCAN_MspInit+0xcc>)
 8004026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004028:	2208      	movs	r2, #8
 800402a:	4013      	ands	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004030:	215c      	movs	r1, #92	@ 0x5c
 8004032:	187b      	adds	r3, r7, r1
 8004034:	2203      	movs	r2, #3
 8004036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	187b      	adds	r3, r7, r1
 800403a:	2202      	movs	r2, #2
 800403c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	187b      	adds	r3, r7, r1
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2203      	movs	r2, #3
 800404e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004050:	187b      	adds	r3, r7, r1
 8004052:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <HAL_FDCAN_MspInit+0xd0>)
 8004054:	0019      	movs	r1, r3
 8004056:	0010      	movs	r0, r2
 8004058:	f002 fa80 	bl	800655c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 800405c:	2200      	movs	r2, #0
 800405e:	2100      	movs	r1, #0
 8004060:	2015      	movs	r0, #21
 8004062:	f001 fa49 	bl	80054f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8004066:	2015      	movs	r0, #21
 8004068:	f001 fa5b 	bl	8005522 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b01d      	add	sp, #116	@ 0x74
 8004072:	bd90      	pop	{r4, r7, pc}
 8004074:	40006400 	.word	0x40006400
 8004078:	40021000 	.word	0x40021000
 800407c:	50000c00 	.word	0x50000c00

08004080 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b09d      	sub	sp, #116	@ 0x74
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004088:	235c      	movs	r3, #92	@ 0x5c
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	0018      	movs	r0, r3
 800408e:	2314      	movs	r3, #20
 8004090:	001a      	movs	r2, r3
 8004092:	2100      	movs	r1, #0
 8004094:	f005 fd60 	bl	8009b58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004098:	2410      	movs	r4, #16
 800409a:	193b      	adds	r3, r7, r4
 800409c:	0018      	movs	r0, r3
 800409e:	234c      	movs	r3, #76	@ 0x4c
 80040a0:	001a      	movs	r2, r3
 80040a2:	2100      	movs	r1, #0
 80040a4:	f005 fd58 	bl	8009b58 <memset>
  if(hi2c->Instance==I2C1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_I2C_MspInit+0xbc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d13f      	bne.n	8004132 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	2220      	movs	r2, #32
 80040b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	2200      	movs	r2, #0
 80040bc:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	0018      	movs	r0, r3
 80040c2:	f003 fb81 	bl	80077c8 <HAL_RCCEx_PeriphCLKConfig>
 80040c6:	1e03      	subs	r3, r0, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80040ca:	f7ff fbdb 	bl	8003884 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <HAL_I2C_MspInit+0xc0>)
 80040d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_I2C_MspInit+0xc0>)
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80040da:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <HAL_I2C_MspInit+0xc0>)
 80040dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040de:	2201      	movs	r2, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040e6:	215c      	movs	r1, #92	@ 0x5c
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	22c0      	movs	r2, #192	@ 0xc0
 80040ec:	00d2      	lsls	r2, r2, #3
 80040ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	2212      	movs	r2, #18
 80040f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004102:	187b      	adds	r3, r7, r1
 8004104:	2206      	movs	r2, #6
 8004106:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004108:	187a      	adds	r2, r7, r1
 800410a:	23a0      	movs	r3, #160	@ 0xa0
 800410c:	05db      	lsls	r3, r3, #23
 800410e:	0011      	movs	r1, r2
 8004110:	0018      	movs	r0, r3
 8004112:	f002 fa23 	bl	800655c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_I2C_MspInit+0xc0>)
 8004118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <HAL_I2C_MspInit+0xc0>)
 800411c:	2180      	movs	r1, #128	@ 0x80
 800411e:	0389      	lsls	r1, r1, #14
 8004120:	430a      	orrs	r2, r1
 8004122:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_I2C_MspInit+0xc0>)
 8004126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	039b      	lsls	r3, r3, #14
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b01d      	add	sp, #116	@ 0x74
 8004138:	bd90      	pop	{r4, r7, pc}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	40005400 	.word	0x40005400
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b08d      	sub	sp, #52	@ 0x34
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	241c      	movs	r4, #28
 800414e:	193b      	adds	r3, r7, r4
 8004150:	0018      	movs	r0, r3
 8004152:	2314      	movs	r3, #20
 8004154:	001a      	movs	r2, r3
 8004156:	2100      	movs	r1, #0
 8004158:	f005 fcfe 	bl	8009b58 <memset>
  if(hspi->Instance==SPI1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a37      	ldr	r2, [pc, #220]	@ (8004240 <HAL_SPI_MspInit+0xfc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d131      	bne.n	80041ca <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004166:	4b37      	ldr	r3, [pc, #220]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 8004168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800416a:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 800416c:	2180      	movs	r1, #128	@ 0x80
 800416e:	0149      	lsls	r1, r1, #5
 8004170:	430a      	orrs	r2, r1
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40
 8004174:	4b33      	ldr	r3, [pc, #204]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 8004176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004182:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 8004184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004186:	4b2f      	ldr	r3, [pc, #188]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 8004188:	2101      	movs	r1, #1
 800418a:	430a      	orrs	r2, r1
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34
 800418e:	4b2d      	ldr	r3, [pc, #180]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	2201      	movs	r2, #1
 8004194:	4013      	ands	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800419a:	0021      	movs	r1, r4
 800419c:	187b      	adds	r3, r7, r1
 800419e:	22d2      	movs	r2, #210	@ 0xd2
 80041a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	187b      	adds	r3, r7, r1
 80041a4:	2202      	movs	r2, #2
 80041a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2200      	movs	r2, #0
 80041b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ba:	187a      	adds	r2, r7, r1
 80041bc:	23a0      	movs	r3, #160	@ 0xa0
 80041be:	05db      	lsls	r3, r3, #23
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f002 f9ca 	bl	800655c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80041c8:	e035      	b.n	8004236 <HAL_SPI_MspInit+0xf2>
  else if(hspi->Instance==SPI2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_SPI_MspInit+0x104>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d130      	bne.n	8004236 <HAL_SPI_MspInit+0xf2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 80041d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 80041da:	2180      	movs	r1, #128	@ 0x80
 80041dc:	01c9      	lsls	r1, r1, #7
 80041de:	430a      	orrs	r2, r1
 80041e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041e2:	4b18      	ldr	r3, [pc, #96]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 80041e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041e6:	2380      	movs	r3, #128	@ 0x80
 80041e8:	01db      	lsls	r3, r3, #7
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f0:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 80041f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f4:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 80041f6:	2102      	movs	r1, #2
 80041f8:	430a      	orrs	r2, r1
 80041fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80041fc:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_SPI_MspInit+0x100>)
 80041fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004200:	2202      	movs	r2, #2
 8004202:	4013      	ands	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004208:	211c      	movs	r1, #28
 800420a:	187b      	adds	r3, r7, r1
 800420c:	22e0      	movs	r2, #224	@ 0xe0
 800420e:	0212      	lsls	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004212:	187b      	adds	r3, r7, r1
 8004214:	2202      	movs	r2, #2
 8004216:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	187b      	adds	r3, r7, r1
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	187b      	adds	r3, r7, r1
 8004220:	2200      	movs	r2, #0
 8004222:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004224:	187b      	adds	r3, r7, r1
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422a:	187b      	adds	r3, r7, r1
 800422c:	4a07      	ldr	r2, [pc, #28]	@ (800424c <HAL_SPI_MspInit+0x108>)
 800422e:	0019      	movs	r1, r3
 8004230:	0010      	movs	r0, r2
 8004232:	f002 f993 	bl	800655c <HAL_GPIO_Init>
}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	b00d      	add	sp, #52	@ 0x34
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	40013000 	.word	0x40013000
 8004244:	40021000 	.word	0x40021000
 8004248:	40003800 	.word	0x40003800
 800424c:	50000400 	.word	0x50000400

08004250 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	05db      	lsls	r3, r3, #23
 8004260:	429a      	cmp	r2, r3
 8004262:	d10b      	bne.n	800427c <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004264:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <HAL_TIM_PWM_MspInit+0x34>)
 8004266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_TIM_PWM_MspInit+0x34>)
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004270:	4b04      	ldr	r3, [pc, #16]	@ (8004284 <HAL_TIM_PWM_MspInit+0x34>)
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800427c:	46c0      	nop			@ (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b004      	add	sp, #16
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a12      	ldr	r2, [pc, #72]	@ (80042e0 <HAL_TIM_Base_MspInit+0x58>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10c      	bne.n	80042b4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_TIM_Base_MspInit+0x5c>)
 800429c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800429e:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <HAL_TIM_Base_MspInit+0x5c>)
 80042a0:	2102      	movs	r1, #2
 80042a2:	430a      	orrs	r2, r1
 80042a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042a6:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <HAL_TIM_Base_MspInit+0x5c>)
 80042a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042aa:	2202      	movs	r2, #2
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80042b2:	e010      	b.n	80042d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0b      	ldr	r2, [pc, #44]	@ (80042e8 <HAL_TIM_Base_MspInit+0x60>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10b      	bne.n	80042d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042be:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_TIM_Base_MspInit+0x5c>)
 80042c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <HAL_TIM_Base_MspInit+0x5c>)
 80042c4:	2104      	movs	r1, #4
 80042c6:	430a      	orrs	r2, r1
 80042c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <HAL_TIM_Base_MspInit+0x5c>)
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	2204      	movs	r2, #4
 80042d0:	4013      	ands	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b004      	add	sp, #16
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40000800 	.word	0x40000800

080042ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b08b      	sub	sp, #44	@ 0x2c
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	2414      	movs	r4, #20
 80042f6:	193b      	adds	r3, r7, r4
 80042f8:	0018      	movs	r0, r3
 80042fa:	2314      	movs	r3, #20
 80042fc:	001a      	movs	r2, r3
 80042fe:	2100      	movs	r1, #0
 8004300:	f005 fc2a 	bl	8009b58 <memset>
  if(htim->Instance==TIM2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	05db      	lsls	r3, r3, #23
 800430c:	429a      	cmp	r2, r3
 800430e:	d123      	bne.n	8004358 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004310:	4b3b      	ldr	r3, [pc, #236]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 8004312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004314:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 8004316:	2102      	movs	r1, #2
 8004318:	430a      	orrs	r2, r1
 800431a:	635a      	str	r2, [r3, #52]	@ 0x34
 800431c:	4b38      	ldr	r3, [pc, #224]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 800431e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004320:	2202      	movs	r2, #2
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004328:	193b      	adds	r3, r7, r4
 800432a:	2280      	movs	r2, #128	@ 0x80
 800432c:	0112      	lsls	r2, r2, #4
 800432e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004330:	0021      	movs	r1, r4
 8004332:	187b      	adds	r3, r7, r1
 8004334:	2202      	movs	r2, #2
 8004336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004338:	187b      	adds	r3, r7, r1
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2200      	movs	r2, #0
 8004342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2202      	movs	r2, #2
 8004348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434a:	187b      	adds	r3, r7, r1
 800434c:	4a2d      	ldr	r2, [pc, #180]	@ (8004404 <HAL_TIM_MspPostInit+0x118>)
 800434e:	0019      	movs	r1, r3
 8004350:	0010      	movs	r0, r2
 8004352:	f002 f903 	bl	800655c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004356:	e04f      	b.n	80043f8 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2a      	ldr	r2, [pc, #168]	@ (8004408 <HAL_TIM_MspPostInit+0x11c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004362:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 8004364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004366:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 8004368:	2102      	movs	r1, #2
 800436a:	430a      	orrs	r2, r1
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 8004370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004372:	2202      	movs	r2, #2
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800437a:	2114      	movs	r1, #20
 800437c:	187b      	adds	r3, r7, r1
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2202      	movs	r2, #2
 8004386:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	187b      	adds	r3, r7, r1
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438e:	187b      	adds	r3, r7, r1
 8004390:	2200      	movs	r2, #0
 8004392:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004394:	187b      	adds	r3, r7, r1
 8004396:	2201      	movs	r2, #1
 8004398:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439a:	187b      	adds	r3, r7, r1
 800439c:	4a19      	ldr	r2, [pc, #100]	@ (8004404 <HAL_TIM_MspPostInit+0x118>)
 800439e:	0019      	movs	r1, r3
 80043a0:	0010      	movs	r0, r2
 80043a2:	f002 f8db 	bl	800655c <HAL_GPIO_Init>
}
 80043a6:	e027      	b.n	80043f8 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM4)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_TIM_MspPostInit+0x120>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b2:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 80043b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b6:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 80043b8:	2102      	movs	r1, #2
 80043ba:	430a      	orrs	r2, r1
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80043be:	4b10      	ldr	r3, [pc, #64]	@ (8004400 <HAL_TIM_MspPostInit+0x114>)
 80043c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c2:	2202      	movs	r2, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043ca:	2114      	movs	r1, #20
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	2280      	movs	r2, #128	@ 0x80
 80043d0:	0092      	lsls	r2, r2, #2
 80043d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	2202      	movs	r2, #2
 80043d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM4;
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	2209      	movs	r2, #9
 80043ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	4a05      	ldr	r2, [pc, #20]	@ (8004404 <HAL_TIM_MspPostInit+0x118>)
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f002 f8b2 	bl	800655c <HAL_GPIO_Init>
}
 80043f8:	46c0      	nop			@ (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b00b      	add	sp, #44	@ 0x2c
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	50000400 	.word	0x50000400
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800

08004410 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b099      	sub	sp, #100	@ 0x64
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004418:	2414      	movs	r4, #20
 800441a:	193b      	adds	r3, r7, r4
 800441c:	0018      	movs	r0, r3
 800441e:	234c      	movs	r3, #76	@ 0x4c
 8004420:	001a      	movs	r2, r3
 8004422:	2100      	movs	r1, #0
 8004424:	f005 fb98 	bl	8009b58 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a21      	ldr	r2, [pc, #132]	@ (80044b4 <HAL_PCD_MspInit+0xa4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d13b      	bne.n	80044aa <HAL_PCD_MspInit+0x9a>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004432:	193b      	adds	r3, r7, r4
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	0452      	lsls	r2, r2, #17
 8004438:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800443a:	193b      	adds	r3, r7, r4
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004440:	193b      	adds	r3, r7, r4
 8004442:	0018      	movs	r0, r3
 8004444:	f003 f9c0 	bl	80077c8 <HAL_RCCEx_PeriphCLKConfig>
 8004448:	1e03      	subs	r3, r0, #0
 800444a:	d001      	beq.n	8004450 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800444c:	f7ff fa1a 	bl	8003884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 8004452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004454:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 8004456:	2180      	movs	r1, #128	@ 0x80
 8004458:	0189      	lsls	r1, r1, #6
 800445a:	430a      	orrs	r2, r1
 800445c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800445e:	4b16      	ldr	r3, [pc, #88]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 8004460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446c:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 800446e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004470:	2380      	movs	r3, #128	@ 0x80
 8004472:	055b      	lsls	r3, r3, #21
 8004474:	4013      	ands	r3, r2
 8004476:	d116      	bne.n	80044a6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 800447a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800447c:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 800447e:	2180      	movs	r1, #128	@ 0x80
 8004480:	0549      	lsls	r1, r1, #21
 8004482:	430a      	orrs	r2, r1
 8004484:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004486:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 8004488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	055b      	lsls	r3, r3, #21
 800448e:	4013      	ands	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8004494:	f002 fc62 	bl	8006d5c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004498:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 800449a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_PCD_MspInit+0xa8>)
 800449e:	4907      	ldr	r1, [pc, #28]	@ (80044bc <HAL_PCD_MspInit+0xac>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80044a4:	e001      	b.n	80044aa <HAL_PCD_MspInit+0x9a>
      HAL_PWREx_EnableVddUSB();
 80044a6:	f002 fc59 	bl	8006d5c <HAL_PWREx_EnableVddUSB>
}
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b019      	add	sp, #100	@ 0x64
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	40005c00 	.word	0x40005c00
 80044b8:	40021000 	.word	0x40021000
 80044bc:	efffffff 	.word	0xefffffff

080044c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	e7fd      	b.n	80044c4 <NMI_Handler+0x4>

080044c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	e7fd      	b.n	80044cc <HardFault_Handler+0x4>

080044d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e8:	f000 f8aa 	bl	8004640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ec:	46c0      	nop			@ (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80044f8:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 80044fa:	0018      	movs	r0, r3
 80044fc:	f001 fc7c 	bl	8005df8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	200001c8 	.word	0x200001c8

0800450c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004510:	46c0      	nop			@ (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004518:	480d      	ldr	r0, [pc, #52]	@ (8004550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800451a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800451c:	f7ff fff6 	bl	800450c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004520:	480c      	ldr	r0, [pc, #48]	@ (8004554 <LoopForever+0x6>)
  ldr r1, =_edata
 8004522:	490d      	ldr	r1, [pc, #52]	@ (8004558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004524:	4a0d      	ldr	r2, [pc, #52]	@ (800455c <LoopForever+0xe>)
  movs r3, #0
 8004526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004528:	e002      	b.n	8004530 <LoopCopyDataInit>

0800452a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800452a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800452c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800452e:	3304      	adds	r3, #4

08004530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004534:	d3f9      	bcc.n	800452a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004536:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004538:	4c0a      	ldr	r4, [pc, #40]	@ (8004564 <LoopForever+0x16>)
  movs r3, #0
 800453a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800453c:	e001      	b.n	8004542 <LoopFillZerobss>

0800453e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800453e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004540:	3204      	adds	r2, #4

08004542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004544:	d3fb      	bcc.n	800453e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004546:	f005 fb0f 	bl	8009b68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800454a:	f7fe fbd9 	bl	8002d00 <main>

0800454e <LoopForever>:

LoopForever:
  b LoopForever
 800454e:	e7fe      	b.n	800454e <LoopForever>
  ldr   r0, =_estack
 8004550:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004558:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800455c:	08009f60 	.word	0x08009f60
  ldr r2, =_sbss
 8004560:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8004564:	20000828 	.word	0x20000828

08004568 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004568:	e7fe      	b.n	8004568 <ADC1_COMP_IRQHandler>
	...

0800456c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_Init+0x3c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <HAL_Init+0x3c>)
 800457e:	2180      	movs	r1, #128	@ 0x80
 8004580:	0049      	lsls	r1, r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004586:	2003      	movs	r0, #3
 8004588:	f000 f810 	bl	80045ac <HAL_InitTick>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d003      	beq.n	8004598 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e001      	b.n	800459c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004598:	f7ff fc9c 	bl	8003ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800459c:	1dfb      	adds	r3, r7, #7
 800459e:	781b      	ldrb	r3, [r3, #0]
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40022000 	.word	0x40022000

080045ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045b4:	230f      	movs	r3, #15
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80045bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004634 <HAL_InitTick+0x88>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02b      	beq.n	800461c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80045c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004638 <HAL_InitTick+0x8c>)
 80045c6:	681c      	ldr	r4, [r3, #0]
 80045c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004634 <HAL_InitTick+0x88>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	0019      	movs	r1, r3
 80045ce:	23fa      	movs	r3, #250	@ 0xfa
 80045d0:	0098      	lsls	r0, r3, #2
 80045d2:	f7fb fd99 	bl	8000108 <__udivsi3>
 80045d6:	0003      	movs	r3, r0
 80045d8:	0019      	movs	r1, r3
 80045da:	0020      	movs	r0, r4
 80045dc:	f7fb fd94 	bl	8000108 <__udivsi3>
 80045e0:	0003      	movs	r3, r0
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 ffb1 	bl	800554a <HAL_SYSTICK_Config>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d112      	bne.n	8004612 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d80a      	bhi.n	8004608 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	2301      	movs	r3, #1
 80045f6:	425b      	negs	r3, r3
 80045f8:	2200      	movs	r2, #0
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 ff7c 	bl	80054f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004600:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <HAL_InitTick+0x90>)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e00d      	b.n	8004624 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004608:	230f      	movs	r3, #15
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2201      	movs	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e008      	b.n	8004624 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004612:	230f      	movs	r3, #15
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e003      	b.n	8004624 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800461c:	230f      	movs	r3, #15
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004624:	230f      	movs	r3, #15
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b005      	add	sp, #20
 8004630:	bd90      	pop	{r4, r7, pc}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	200000a4 	.word	0x200000a4
 8004638:	2000009c 	.word	0x2000009c
 800463c:	200000a0 	.word	0x200000a0

08004640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <HAL_IncTick+0x1c>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	001a      	movs	r2, r3
 800464a:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_IncTick+0x20>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	18d2      	adds	r2, r2, r3
 8004650:	4b03      	ldr	r3, [pc, #12]	@ (8004660 <HAL_IncTick+0x20>)
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	200000a4 	.word	0x200000a4
 8004660:	20000808 	.word	0x20000808

08004664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  return uwTick;
 8004668:	4b02      	ldr	r3, [pc, #8]	@ (8004674 <HAL_GetTick+0x10>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	20000808 	.word	0x20000808

08004678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004680:	f7ff fff0 	bl	8004664 <HAL_GetTick>
 8004684:	0003      	movs	r3, r0
 8004686:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	d005      	beq.n	800469e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <HAL_Delay+0x44>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	001a      	movs	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	189b      	adds	r3, r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	f7ff ffe0 	bl	8004664 <HAL_GetTick>
 80046a4:	0002      	movs	r2, r0
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d8f7      	bhi.n	80046a0 <HAL_Delay+0x28>
  {
  }
}
 80046b0:	46c0      	nop			@ (mov r8, r8)
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	200000a4 	.word	0x200000a4

080046c0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80046c4:	4b02      	ldr	r3, [pc, #8]	@ (80046d0 <HAL_GetUIDw0+0x10>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	1fff7590 	.word	0x1fff7590

080046d4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80046d8:	4b02      	ldr	r3, [pc, #8]	@ (80046e4 <HAL_GetUIDw1+0x10>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	1fff7594 	.word	0x1fff7594

080046e8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80046ec:	4b02      	ldr	r3, [pc, #8]	@ (80046f8 <HAL_GetUIDw2+0x10>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	1fff7598 	.word	0x1fff7598

080046fc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a06      	ldr	r2, [pc, #24]	@ (8004724 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800470a:	4013      	ands	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	4b04      	ldr	r3, [pc, #16]	@ (8004720 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b002      	add	sp, #8
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	40010000 	.word	0x40010000
 8004724:	fffff9ff 	.word	0xfffff9ff

08004728 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a05      	ldr	r2, [pc, #20]	@ (800474c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004738:	401a      	ands	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	46bd      	mov	sp, r7
 8004746:	b002      	add	sp, #8
 8004748:	bd80      	pop	{r7, pc}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	fe3fffff 	.word	0xfe3fffff

08004750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	23e0      	movs	r3, #224	@ 0xe0
 800475e:	045b      	lsls	r3, r3, #17
 8004760:	4013      	ands	r3, r2
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b002      	add	sp, #8
 8004768:	bd80      	pop	{r7, pc}

0800476a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	2104      	movs	r1, #4
 800477e:	400a      	ands	r2, r1
 8004780:	2107      	movs	r1, #7
 8004782:	4091      	lsls	r1, r2
 8004784:	000a      	movs	r2, r1
 8004786:	43d2      	mvns	r2, r2
 8004788:	401a      	ands	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2104      	movs	r1, #4
 800478e:	400b      	ands	r3, r1
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4099      	lsls	r1, r3
 8004794:	000b      	movs	r3, r1
 8004796:	431a      	orrs	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800479c:	46c0      	nop			@ (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	b004      	add	sp, #16
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	2104      	movs	r1, #4
 80047b6:	400a      	ands	r2, r1
 80047b8:	2107      	movs	r1, #7
 80047ba:	4091      	lsls	r1, r2
 80047bc:	000a      	movs	r2, r1
 80047be:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2104      	movs	r1, #4
 80047c4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80047c6:	40da      	lsrs	r2, r3
 80047c8:	0013      	movs	r3, r2
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b002      	add	sp, #8
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	23c0      	movs	r3, #192	@ 0xc0
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	4013      	ands	r3, r2
 80047e4:	d101      	bne.n	80047ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	211f      	movs	r1, #31
 8004808:	400a      	ands	r2, r1
 800480a:	210f      	movs	r1, #15
 800480c:	4091      	lsls	r1, r2
 800480e:	000a      	movs	r2, r1
 8004810:	43d2      	mvns	r2, r2
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0e9b      	lsrs	r3, r3, #26
 8004818:	210f      	movs	r1, #15
 800481a:	4019      	ands	r1, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	201f      	movs	r0, #31
 8004820:	4003      	ands	r3, r0
 8004822:	4099      	lsls	r1, r3
 8004824:	000b      	movs	r3, r1
 8004826:	431a      	orrs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800482c:	46c0      	nop			@ (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bd80      	pop	{r7, pc}

08004834 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	035b      	lsls	r3, r3, #13
 8004846:	0b5b      	lsrs	r3, r3, #13
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}

08004856 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	0352      	lsls	r2, r2, #13
 8004868:	0b52      	lsrs	r2, r2, #13
 800486a:	43d2      	mvns	r2, r2
 800486c:	401a      	ands	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b002      	add	sp, #8
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	0212      	lsls	r2, r2, #8
 8004890:	43d2      	mvns	r2, r2
 8004892:	401a      	ands	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	400b      	ands	r3, r1
 800489c:	4904      	ldr	r1, [pc, #16]	@ (80048b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800489e:	400b      	ands	r3, r1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b004      	add	sp, #16
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	07ffff00 	.word	0x07ffff00

080048b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a05      	ldr	r2, [pc, #20]	@ (80048d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	2280      	movs	r2, #128	@ 0x80
 80048c6:	0552      	lsls	r2, r2, #21
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b002      	add	sp, #8
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	6fffffe8 	.word	0x6fffffe8

080048dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	055b      	lsls	r3, r3, #21
 80048ec:	401a      	ands	r2, r3
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	055b      	lsls	r3, r3, #21
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d101      	bne.n	80048fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b002      	add	sp, #8
 8004902:	bd80      	pop	{r7, pc}

08004904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a04      	ldr	r2, [pc, #16]	@ (8004924 <LL_ADC_Enable+0x20>)
 8004912:	4013      	ands	r3, r2
 8004914:	2201      	movs	r2, #1
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b002      	add	sp, #8
 8004922:	bd80      	pop	{r7, pc}
 8004924:	7fffffe8 	.word	0x7fffffe8

08004928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2201      	movs	r2, #1
 8004936:	4013      	ands	r3, r2
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <LL_ADC_IsEnabled+0x18>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <LL_ADC_IsEnabled+0x1a>
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b002      	add	sp, #8
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a04      	ldr	r2, [pc, #16]	@ (800496c <LL_ADC_REG_StartConversion+0x20>)
 800495a:	4013      	ands	r3, r2
 800495c:	2204      	movs	r2, #4
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}
 800496c:	7fffffe8 	.word	0x7fffffe8

08004970 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2204      	movs	r2, #4
 800497e:	4013      	ands	r3, r2
 8004980:	2b04      	cmp	r3, #4
 8004982:	d101      	bne.n	8004988 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004988:	2300      	movs	r3, #0
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499c:	231f      	movs	r3, #31
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e17f      	b.n	8004cba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff faad 	bl	8003f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2254      	movs	r2, #84	@ 0x54
 80049d4:	2100      	movs	r1, #0
 80049d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff ff7d 	bl	80048dc <LL_ADC_IsInternalRegulatorEnabled>
 80049e2:	1e03      	subs	r3, r0, #0
 80049e4:	d115      	bne.n	8004a12 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7ff ff62 	bl	80048b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049f0:	4bb4      	ldr	r3, [pc, #720]	@ (8004cc4 <HAL_ADC_Init+0x330>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	49b4      	ldr	r1, [pc, #720]	@ (8004cc8 <HAL_ADC_Init+0x334>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7fb fb86 	bl	8000108 <__udivsi3>
 80049fc:	0003      	movs	r3, r0
 80049fe:	3301      	adds	r3, #1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a04:	e002      	b.n	8004a0c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f9      	bne.n	8004a06 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7ff ff60 	bl	80048dc <LL_ADC_IsInternalRegulatorEnabled>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d10f      	bne.n	8004a40 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a24:	2210      	movs	r2, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a30:	2201      	movs	r2, #1
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a38:	231f      	movs	r3, #31
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7ff ff93 	bl	8004970 <LL_ADC_REG_IsConversionOngoing>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a52:	2210      	movs	r2, #16
 8004a54:	4013      	ands	r3, r2
 8004a56:	d000      	beq.n	8004a5a <HAL_ADC_Init+0xc6>
 8004a58:	e122      	b.n	8004ca0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d000      	beq.n	8004a62 <HAL_ADC_Init+0xce>
 8004a60:	e11e      	b.n	8004ca0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	4a99      	ldr	r2, [pc, #612]	@ (8004ccc <HAL_ADC_Init+0x338>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7ff ff56 	bl	8004928 <LL_ADC_IsEnabled>
 8004a7c:	1e03      	subs	r3, r0, #0
 8004a7e:	d000      	beq.n	8004a82 <HAL_ADC_Init+0xee>
 8004a80:	e0ad      	b.n	8004bde <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7e1b      	ldrb	r3, [r3, #24]
 8004a8a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004a8c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7e5b      	ldrb	r3, [r3, #25]
 8004a92:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004a94:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7e9b      	ldrb	r3, [r3, #26]
 8004a9a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004a9c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_ADC_Init+0x118>
 8004aa6:	2380      	movs	r3, #128	@ 0x80
 8004aa8:	015b      	lsls	r3, r3, #5
 8004aaa:	e000      	b.n	8004aae <HAL_ADC_Init+0x11a>
 8004aac:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004aae:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004ab4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da04      	bge.n	8004ac8 <HAL_ADC_Init+0x134>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	e001      	b.n	8004acc <HAL_ADC_Init+0x138>
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004acc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	212c      	movs	r1, #44	@ 0x2c
 8004ad2:	5c5b      	ldrb	r3, [r3, r1]
 8004ad4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004ad6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	5c9b      	ldrb	r3, [r3, r2]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d115      	bne.n	8004b14 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	7e9b      	ldrb	r3, [r3, #26]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2280      	movs	r2, #128	@ 0x80
 8004af4:	0252      	lsls	r2, r2, #9
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e00b      	b.n	8004b14 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	2220      	movs	r2, #32
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b20:	23e0      	movs	r3, #224	@ 0xe0
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a65      	ldr	r2, [pc, #404]	@ (8004cd0 <HAL_ADC_Init+0x33c>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0f9b      	lsrs	r3, r3, #30
 8004b4e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004b54:	4313      	orrs	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	223c      	movs	r2, #60	@ 0x3c
 8004b60:	5c9b      	ldrb	r3, [r3, r2]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d111      	bne.n	8004b8a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	0f9b      	lsrs	r3, r3, #30
 8004b6c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004b72:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004b78:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8004b7e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	2201      	movs	r2, #1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4a50      	ldr	r2, [pc, #320]	@ (8004cd4 <HAL_ADC_Init+0x340>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	23c0      	movs	r3, #192	@ 0xc0
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d018      	beq.n	8004bde <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	05db      	lsls	r3, r3, #23
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d012      	beq.n	8004bde <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d00c      	beq.n	8004bde <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004bc4:	4b44      	ldr	r3, [pc, #272]	@ (8004cd8 <HAL_ADC_Init+0x344>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a44      	ldr	r2, [pc, #272]	@ (8004cdc <HAL_ADC_Init+0x348>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	23f0      	movs	r3, #240	@ 0xf0
 8004bd4:	039b      	lsls	r3, r3, #14
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd8 <HAL_ADC_Init+0x344>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be6:	001a      	movs	r2, r3
 8004be8:	2100      	movs	r1, #0
 8004bea:	f7ff fdbe 	bl	800476a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	493a      	ldr	r1, [pc, #232]	@ (8004ce0 <HAL_ADC_Init+0x34c>)
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	f7ff fdb6 	bl	800476a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2110      	movs	r1, #16
 8004c12:	4249      	negs	r1, r1
 8004c14:	430a      	orrs	r2, r1
 8004c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c18:	e018      	b.n	8004c4c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	2380      	movs	r3, #128	@ 0x80
 8004c20:	039b      	lsls	r3, r3, #14
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d112      	bne.n	8004c4c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	221c      	movs	r2, #28
 8004c36:	4013      	ands	r3, r2
 8004c38:	2210      	movs	r2, #16
 8004c3a:	4252      	negs	r2, r2
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	0011      	movs	r1, r2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2100      	movs	r1, #0
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7ff fda6 	bl	80047a4 <LL_ADC_GetSamplingTimeCommonChannels>
 8004c58:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d10b      	bne.n	8004c7a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	4393      	bics	r3, r2
 8004c70:	2201      	movs	r2, #1
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004c78:	e01c      	b.n	8004cb4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	2212      	movs	r2, #18
 8004c80:	4393      	bics	r3, r2
 8004c82:	2210      	movs	r2, #16
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8e:	2201      	movs	r2, #1
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004c96:	231f      	movs	r3, #31
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004c9e:	e009      	b.n	8004cb4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004cac:	231f      	movs	r3, #31
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004cb4:	231f      	movs	r3, #31
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b008      	add	sp, #32
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	2000009c 	.word	0x2000009c
 8004cc8:	00030d40 	.word	0x00030d40
 8004ccc:	fffffefd 	.word	0xfffffefd
 8004cd0:	ffde0201 	.word	0xffde0201
 8004cd4:	1ffffc02 	.word	0x1ffffc02
 8004cd8:	40012708 	.word	0x40012708
 8004cdc:	ffc3ffff 	.word	0xffc3ffff
 8004ce0:	07ffff04 	.word	0x07ffff04

08004ce4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004ce4:	b5b0      	push	{r4, r5, r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff fe3d 	bl	8004970 <LL_ADC_REG_IsConversionOngoing>
 8004cf6:	1e03      	subs	r3, r0, #0
 8004cf8:	d135      	bne.n	8004d66 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2254      	movs	r2, #84	@ 0x54
 8004cfe:	5c9b      	ldrb	r3, [r3, r2]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_Start+0x24>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e035      	b.n	8004d74 <HAL_ADC_Start+0x90>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2254      	movs	r2, #84	@ 0x54
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004d10:	250f      	movs	r5, #15
 8004d12:	197c      	adds	r4, r7, r5
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 faaa 	bl	8005270 <ADC_Enable>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004d20:	197b      	adds	r3, r7, r5
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d119      	bne.n	8004d5c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2c:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <HAL_ADC_Start+0x98>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2280      	movs	r2, #128	@ 0x80
 8004d32:	0052      	lsls	r2, r2, #1
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	221c      	movs	r2, #28
 8004d46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2254      	movs	r2, #84	@ 0x54
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7ff fdf9 	bl	800494c <LL_ADC_REG_StartConversion>
 8004d5a:	e008      	b.n	8004d6e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2254      	movs	r2, #84	@ 0x54
 8004d60:	2100      	movs	r1, #0
 8004d62:	5499      	strb	r1, [r3, r2]
 8004d64:	e003      	b.n	8004d6e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d66:	230f      	movs	r3, #15
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004d6e:	230f      	movs	r3, #15
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	781b      	ldrb	r3, [r3, #0]
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b004      	add	sp, #16
 8004d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7c:	fffff0fe 	.word	0xfffff0fe

08004d80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d102      	bne.n	8004d98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004d92:	2308      	movs	r3, #8
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e00f      	b.n	8004db8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d007      	beq.n	8004db4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da8:	2220      	movs	r2, #32
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e072      	b.n	8004e9a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004db4:	2304      	movs	r3, #4
 8004db6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004db8:	f7ff fc54 	bl	8004664 <HAL_GetTick>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004dc0:	e01f      	b.n	8004e02 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	d01c      	beq.n	8004e02 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004dc8:	f7ff fc4c 	bl	8004664 <HAL_GetTick>
 8004dcc:	0002      	movs	r2, r0
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <HAL_ADC_PollForConversion+0x5e>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d111      	bne.n	8004e02 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4013      	ands	r3, r2
 8004de8:	d10b      	bne.n	8004e02 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	2204      	movs	r2, #4
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2254      	movs	r2, #84	@ 0x54
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e04b      	b.n	8004e9a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d0d9      	beq.n	8004dc2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	2280      	movs	r2, #128	@ 0x80
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff fcd6 	bl	80047d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e26:	1e03      	subs	r3, r0, #0
 8004e28:	d02e      	beq.n	8004e88 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7e9b      	ldrb	r3, [r3, #26]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d12a      	bne.n	8004e88 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d123      	bne.n	8004e88 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff fd93 	bl	8004970 <LL_ADC_REG_IsConversionOngoing>
 8004e4a:	1e03      	subs	r3, r0, #0
 8004e4c:	d110      	bne.n	8004e70 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	210c      	movs	r1, #12
 8004e5a:	438a      	bics	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e62:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <HAL_ADC_PollForConversion+0x124>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	2201      	movs	r2, #1
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e6e:	e00b      	b.n	8004e88 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	2220      	movs	r2, #32
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	2201      	movs	r2, #1
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	7e1b      	ldrb	r3, [r3, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	220c      	movs	r2, #12
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b004      	add	sp, #16
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	fffffefe 	.word	0xfffffefe

08004ea8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eca:	2317      	movs	r3, #23
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2254      	movs	r2, #84	@ 0x54
 8004eda:	5c9b      	ldrb	r3, [r3, r2]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x24>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e1c0      	b.n	8005266 <HAL_ADC_ConfigChannel+0x3a6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2254      	movs	r2, #84	@ 0x54
 8004ee8:	2101      	movs	r1, #1
 8004eea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7ff fd3d 	bl	8004970 <LL_ADC_REG_IsConversionOngoing>
 8004ef6:	1e03      	subs	r3, r0, #0
 8004ef8:	d000      	beq.n	8004efc <HAL_ADC_ConfigChannel+0x3c>
 8004efa:	e1a3      	b.n	8005244 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d100      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x46>
 8004f04:	e143      	b.n	800518e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	2380      	movs	r3, #128	@ 0x80
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d004      	beq.n	8004f1c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f16:	4ac1      	ldr	r2, [pc, #772]	@ (800521c <HAL_ADC_ConfigChannel+0x35c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0019      	movs	r1, r3
 8004f26:	0010      	movs	r0, r2
 8004f28:	f7ff fc84 	bl	8004834 <LL_ADC_REG_SetSequencerChAdd>
 8004f2c:	e0c9      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	211f      	movs	r1, #31
 8004f38:	400b      	ands	r3, r1
 8004f3a:	210f      	movs	r1, #15
 8004f3c:	4099      	lsls	r1, r3
 8004f3e:	000b      	movs	r3, r1
 8004f40:	43db      	mvns	r3, r3
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	035b      	lsls	r3, r3, #13
 8004f4c:	0b5b      	lsrs	r3, r3, #13
 8004f4e:	d105      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x9c>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0e9b      	lsrs	r3, r3, #26
 8004f56:	221f      	movs	r2, #31
 8004f58:	4013      	ands	r3, r2
 8004f5a:	e098      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2201      	movs	r2, #1
 8004f62:	4013      	ands	r3, r2
 8004f64:	d000      	beq.n	8004f68 <HAL_ADC_ConfigChannel+0xa8>
 8004f66:	e091      	b.n	800508c <HAL_ADC_ConfigChannel+0x1cc>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d000      	beq.n	8004f74 <HAL_ADC_ConfigChannel+0xb4>
 8004f72:	e089      	b.n	8005088 <HAL_ADC_ConfigChannel+0x1c8>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d000      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0xc0>
 8004f7e:	e081      	b.n	8005084 <HAL_ADC_ConfigChannel+0x1c4>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	4013      	ands	r3, r2
 8004f88:	d000      	beq.n	8004f8c <HAL_ADC_ConfigChannel+0xcc>
 8004f8a:	e079      	b.n	8005080 <HAL_ADC_ConfigChannel+0x1c0>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	4013      	ands	r3, r2
 8004f94:	d000      	beq.n	8004f98 <HAL_ADC_ConfigChannel+0xd8>
 8004f96:	e071      	b.n	800507c <HAL_ADC_ConfigChannel+0x1bc>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d000      	beq.n	8004fa4 <HAL_ADC_ConfigChannel+0xe4>
 8004fa2:	e069      	b.n	8005078 <HAL_ADC_ConfigChannel+0x1b8>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2240      	movs	r2, #64	@ 0x40
 8004faa:	4013      	ands	r3, r2
 8004fac:	d000      	beq.n	8004fb0 <HAL_ADC_ConfigChannel+0xf0>
 8004fae:	e061      	b.n	8005074 <HAL_ADC_ConfigChannel+0x1b4>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2280      	movs	r2, #128	@ 0x80
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d000      	beq.n	8004fbc <HAL_ADC_ConfigChannel+0xfc>
 8004fba:	e059      	b.n	8005070 <HAL_ADC_ConfigChannel+0x1b0>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2380      	movs	r3, #128	@ 0x80
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d151      	bne.n	800506c <HAL_ADC_ConfigChannel+0x1ac>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	@ 0x80
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d149      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x1a8>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d141      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x1a4>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	2380      	movs	r3, #128	@ 0x80
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d139      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x1a0>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d131      	bne.n	800505c <HAL_ADC_ConfigChannel+0x19c>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	019b      	lsls	r3, r3, #6
 8005000:	4013      	ands	r3, r2
 8005002:	d129      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x198>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	01db      	lsls	r3, r3, #7
 800500c:	4013      	ands	r3, r2
 800500e:	d121      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x194>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	2380      	movs	r3, #128	@ 0x80
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4013      	ands	r3, r2
 800501a:	d119      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x190>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	025b      	lsls	r3, r3, #9
 8005024:	4013      	ands	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_ADC_ConfigChannel+0x18c>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	2380      	movs	r3, #128	@ 0x80
 800502e:	029b      	lsls	r3, r3, #10
 8005030:	4013      	ands	r3, r2
 8005032:	d109      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x188>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	02db      	lsls	r3, r3, #11
 800503c:	4013      	ands	r3, r2
 800503e:	d001      	beq.n	8005044 <HAL_ADC_ConfigChannel+0x184>
 8005040:	2312      	movs	r3, #18
 8005042:	e024      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005044:	2300      	movs	r3, #0
 8005046:	e022      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005048:	2311      	movs	r3, #17
 800504a:	e020      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 800504c:	2310      	movs	r3, #16
 800504e:	e01e      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005050:	230f      	movs	r3, #15
 8005052:	e01c      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005054:	230e      	movs	r3, #14
 8005056:	e01a      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005058:	230d      	movs	r3, #13
 800505a:	e018      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 800505c:	230c      	movs	r3, #12
 800505e:	e016      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005060:	230b      	movs	r3, #11
 8005062:	e014      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005064:	230a      	movs	r3, #10
 8005066:	e012      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005068:	2309      	movs	r3, #9
 800506a:	e010      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 800506c:	2308      	movs	r3, #8
 800506e:	e00e      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005070:	2307      	movs	r3, #7
 8005072:	e00c      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005074:	2306      	movs	r3, #6
 8005076:	e00a      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005078:	2305      	movs	r3, #5
 800507a:	e008      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 800507c:	2304      	movs	r3, #4
 800507e:	e006      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005080:	2303      	movs	r3, #3
 8005082:	e004      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005084:	2302      	movs	r3, #2
 8005086:	e002      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_ADC_ConfigChannel+0x1ce>
 800508c:	2300      	movs	r3, #0
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	6852      	ldr	r2, [r2, #4]
 8005092:	201f      	movs	r0, #31
 8005094:	4002      	ands	r2, r0
 8005096:	4093      	lsls	r3, r2
 8005098:	000a      	movs	r2, r1
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d808      	bhi.n	80050c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	001a      	movs	r2, r3
 80050be:	f7ff fb99 	bl	80047f4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	001a      	movs	r2, r3
 80050d0:	f7ff fbd4 	bl	800487c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	db00      	blt.n	80050de <HAL_ADC_ConfigChannel+0x21e>
 80050dc:	e0bc      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050de:	4b50      	ldr	r3, [pc, #320]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7ff fb35 	bl	8004750 <LL_ADC_GetCommonPathInternalCh>
 80050e6:	0003      	movs	r3, r0
 80050e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4d      	ldr	r2, [pc, #308]	@ (8005224 <HAL_ADC_ConfigChannel+0x364>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d122      	bne.n	800513a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050fc:	d11d      	bne.n	800513a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2280      	movs	r2, #128	@ 0x80
 8005102:	0412      	lsls	r2, r2, #16
 8005104:	4313      	orrs	r3, r2
 8005106:	4a46      	ldr	r2, [pc, #280]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 8005108:	0019      	movs	r1, r3
 800510a:	0010      	movs	r0, r2
 800510c:	f7ff fb0c 	bl	8004728 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005110:	4b45      	ldr	r3, [pc, #276]	@ (8005228 <HAL_ADC_ConfigChannel+0x368>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4945      	ldr	r1, [pc, #276]	@ (800522c <HAL_ADC_ConfigChannel+0x36c>)
 8005116:	0018      	movs	r0, r3
 8005118:	f7fa fff6 	bl	8000108 <__udivsi3>
 800511c:	0003      	movs	r3, r0
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	0013      	movs	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	189b      	adds	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800512a:	e002      	b.n	8005132 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3b01      	subs	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f9      	bne.n	800512c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005138:	e08e      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3c      	ldr	r2, [pc, #240]	@ (8005230 <HAL_ADC_ConfigChannel+0x370>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d10e      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	045b      	lsls	r3, r3, #17
 800514a:	4013      	ands	r3, r2
 800514c:	d109      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2280      	movs	r2, #128	@ 0x80
 8005152:	0452      	lsls	r2, r2, #17
 8005154:	4313      	orrs	r3, r2
 8005156:	4a32      	ldr	r2, [pc, #200]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 8005158:	0019      	movs	r1, r3
 800515a:	0010      	movs	r0, r2
 800515c:	f7ff fae4 	bl	8004728 <LL_ADC_SetCommonPathInternalCh>
 8005160:	e07a      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a33      	ldr	r2, [pc, #204]	@ (8005234 <HAL_ADC_ConfigChannel+0x374>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d000      	beq.n	800516e <HAL_ADC_ConfigChannel+0x2ae>
 800516c:	e074      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	03db      	lsls	r3, r3, #15
 8005174:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005176:	d000      	beq.n	800517a <HAL_ADC_ConfigChannel+0x2ba>
 8005178:	e06e      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2280      	movs	r2, #128	@ 0x80
 800517e:	03d2      	lsls	r2, r2, #15
 8005180:	4313      	orrs	r3, r2
 8005182:	4a27      	ldr	r2, [pc, #156]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 8005184:	0019      	movs	r1, r3
 8005186:	0010      	movs	r0, r2
 8005188:	f7ff face 	bl	8004728 <LL_ADC_SetCommonPathInternalCh>
 800518c:	e064      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	429a      	cmp	r2, r3
 8005198:	d004      	beq.n	80051a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800519e:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_ADC_ConfigChannel+0x35c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d107      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	0019      	movs	r1, r3
 80051ae:	0010      	movs	r0, r2
 80051b0:	f7ff fb51 	bl	8004856 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da4d      	bge.n	8005258 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051bc:	4b18      	ldr	r3, [pc, #96]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff fac6 	bl	8004750 <LL_ADC_GetCommonPathInternalCh>
 80051c4:	0003      	movs	r3, r0
 80051c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <HAL_ADC_ConfigChannel+0x364>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d108      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <HAL_ADC_ConfigChannel+0x378>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	4a11      	ldr	r2, [pc, #68]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 80051da:	0019      	movs	r1, r3
 80051dc:	0010      	movs	r0, r2
 80051de:	f7ff faa3 	bl	8004728 <LL_ADC_SetCommonPathInternalCh>
 80051e2:	e039      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <HAL_ADC_ConfigChannel+0x370>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d108      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4a12      	ldr	r2, [pc, #72]	@ (800523c <HAL_ADC_ConfigChannel+0x37c>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 80051f6:	0019      	movs	r1, r3
 80051f8:	0010      	movs	r0, r2
 80051fa:	f7ff fa95 	bl	8004728 <LL_ADC_SetCommonPathInternalCh>
 80051fe:	e02b      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0b      	ldr	r2, [pc, #44]	@ (8005234 <HAL_ADC_ConfigChannel+0x374>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d126      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4a0c      	ldr	r2, [pc, #48]	@ (8005240 <HAL_ADC_ConfigChannel+0x380>)
 800520e:	4013      	ands	r3, r2
 8005210:	4a03      	ldr	r2, [pc, #12]	@ (8005220 <HAL_ADC_ConfigChannel+0x360>)
 8005212:	0019      	movs	r1, r3
 8005214:	0010      	movs	r0, r2
 8005216:	f7ff fa87 	bl	8004728 <LL_ADC_SetCommonPathInternalCh>
 800521a:	e01d      	b.n	8005258 <HAL_ADC_ConfigChannel+0x398>
 800521c:	80000004 	.word	0x80000004
 8005220:	40012708 	.word	0x40012708
 8005224:	b0001000 	.word	0xb0001000
 8005228:	2000009c 	.word	0x2000009c
 800522c:	00030d40 	.word	0x00030d40
 8005230:	b8004000 	.word	0xb8004000
 8005234:	b4002000 	.word	0xb4002000
 8005238:	ff7fffff 	.word	0xff7fffff
 800523c:	feffffff 	.word	0xfeffffff
 8005240:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005248:	2220      	movs	r2, #32
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005250:	2317      	movs	r3, #23
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2254      	movs	r2, #84	@ 0x54
 800525c:	2100      	movs	r1, #0
 800525e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005260:	2317      	movs	r3, #23
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	781b      	ldrb	r3, [r3, #0]
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b006      	add	sp, #24
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)

08005270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005278:	2300      	movs	r3, #0
 800527a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0018      	movs	r0, r3
 8005282:	f7ff fb51 	bl	8004928 <LL_ADC_IsEnabled>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d000      	beq.n	800528c <ADC_Enable+0x1c>
 800528a:	e069      	b.n	8005360 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	4a36      	ldr	r2, [pc, #216]	@ (800536c <ADC_Enable+0xfc>)
 8005294:	4013      	ands	r3, r2
 8005296:	d00d      	beq.n	80052b4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529c:	2210      	movs	r2, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a8:	2201      	movs	r2, #1
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e056      	b.n	8005362 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f7ff fb23 	bl	8004904 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80052be:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <ADC_Enable+0x100>)
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7ff fa45 	bl	8004750 <LL_ADC_GetCommonPathInternalCh>
 80052c6:	0002      	movs	r2, r0
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	041b      	lsls	r3, r3, #16
 80052cc:	4013      	ands	r3, r2
 80052ce:	d00f      	beq.n	80052f0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052d0:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <ADC_Enable+0x104>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4928      	ldr	r1, [pc, #160]	@ (8005378 <ADC_Enable+0x108>)
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7fa ff16 	bl	8000108 <__udivsi3>
 80052dc:	0003      	movs	r3, r0
 80052de:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80052e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052e2:	e002      	b.n	80052ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f9      	bne.n	80052e4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7e5b      	ldrb	r3, [r3, #25]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d033      	beq.n	8005360 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80052f8:	f7ff f9b4 	bl	8004664 <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005300:	e027      	b.n	8005352 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	0018      	movs	r0, r3
 8005308:	f7ff fb0e 	bl	8004928 <LL_ADC_IsEnabled>
 800530c:	1e03      	subs	r3, r0, #0
 800530e:	d104      	bne.n	800531a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff faf5 	bl	8004904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800531a:	f7ff f9a3 	bl	8004664 <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d914      	bls.n	8005352 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	4013      	ands	r3, r2
 8005332:	2b01      	cmp	r3, #1
 8005334:	d00d      	beq.n	8005352 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	2210      	movs	r2, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005346:	2201      	movs	r2, #1
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e007      	b.n	8005362 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	4013      	ands	r3, r2
 800535c:	2b01      	cmp	r3, #1
 800535e:	d1d0      	bne.n	8005302 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	80000017 	.word	0x80000017
 8005370:	40012708 	.word	0x40012708
 8005374:	2000009c 	.word	0x2000009c
 8005378:	00030d40 	.word	0x00030d40

0800537c <__NVIC_EnableIRQ>:
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	0002      	movs	r2, r0
 8005384:	1dfb      	adds	r3, r7, #7
 8005386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005388:	1dfb      	adds	r3, r7, #7
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b7f      	cmp	r3, #127	@ 0x7f
 800538e:	d809      	bhi.n	80053a4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005390:	1dfb      	adds	r3, r7, #7
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	001a      	movs	r2, r3
 8005396:	231f      	movs	r3, #31
 8005398:	401a      	ands	r2, r3
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <__NVIC_EnableIRQ+0x30>)
 800539c:	2101      	movs	r1, #1
 800539e:	4091      	lsls	r1, r2
 80053a0:	000a      	movs	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	46c0      	nop			@ (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	e000e100 	.word	0xe000e100

080053b0 <__NVIC_SetPriority>:
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	0002      	movs	r2, r0
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	1dfb      	adds	r3, r7, #7
 80053bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053be:	1dfb      	adds	r3, r7, #7
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80053c4:	d828      	bhi.n	8005418 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005484 <__NVIC_SetPriority+0xd4>)
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	33c0      	adds	r3, #192	@ 0xc0
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	589b      	ldr	r3, [r3, r2]
 80053d6:	1dfa      	adds	r2, r7, #7
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	0011      	movs	r1, r2
 80053dc:	2203      	movs	r2, #3
 80053de:	400a      	ands	r2, r1
 80053e0:	00d2      	lsls	r2, r2, #3
 80053e2:	21ff      	movs	r1, #255	@ 0xff
 80053e4:	4091      	lsls	r1, r2
 80053e6:	000a      	movs	r2, r1
 80053e8:	43d2      	mvns	r2, r2
 80053ea:	401a      	ands	r2, r3
 80053ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	22ff      	movs	r2, #255	@ 0xff
 80053f4:	401a      	ands	r2, r3
 80053f6:	1dfb      	adds	r3, r7, #7
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	0018      	movs	r0, r3
 80053fc:	2303      	movs	r3, #3
 80053fe:	4003      	ands	r3, r0
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005404:	481f      	ldr	r0, [pc, #124]	@ (8005484 <__NVIC_SetPriority+0xd4>)
 8005406:	1dfb      	adds	r3, r7, #7
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	b25b      	sxtb	r3, r3
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	430a      	orrs	r2, r1
 8005410:	33c0      	adds	r3, #192	@ 0xc0
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	501a      	str	r2, [r3, r0]
}
 8005416:	e031      	b.n	800547c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005418:	4a1b      	ldr	r2, [pc, #108]	@ (8005488 <__NVIC_SetPriority+0xd8>)
 800541a:	1dfb      	adds	r3, r7, #7
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	0019      	movs	r1, r3
 8005420:	230f      	movs	r3, #15
 8005422:	400b      	ands	r3, r1
 8005424:	3b08      	subs	r3, #8
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	3306      	adds	r3, #6
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	3304      	adds	r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1dfa      	adds	r2, r7, #7
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	0011      	movs	r1, r2
 8005438:	2203      	movs	r2, #3
 800543a:	400a      	ands	r2, r1
 800543c:	00d2      	lsls	r2, r2, #3
 800543e:	21ff      	movs	r1, #255	@ 0xff
 8005440:	4091      	lsls	r1, r2
 8005442:	000a      	movs	r2, r1
 8005444:	43d2      	mvns	r2, r2
 8005446:	401a      	ands	r2, r3
 8005448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	22ff      	movs	r2, #255	@ 0xff
 8005450:	401a      	ands	r2, r3
 8005452:	1dfb      	adds	r3, r7, #7
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0018      	movs	r0, r3
 8005458:	2303      	movs	r3, #3
 800545a:	4003      	ands	r3, r0
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005460:	4809      	ldr	r0, [pc, #36]	@ (8005488 <__NVIC_SetPriority+0xd8>)
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	001c      	movs	r4, r3
 8005468:	230f      	movs	r3, #15
 800546a:	4023      	ands	r3, r4
 800546c:	3b08      	subs	r3, #8
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	430a      	orrs	r2, r1
 8005472:	3306      	adds	r3, #6
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	18c3      	adds	r3, r0, r3
 8005478:	3304      	adds	r3, #4
 800547a:	601a      	str	r2, [r3, #0]
}
 800547c:	46c0      	nop			@ (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b003      	add	sp, #12
 8005482:	bd90      	pop	{r4, r7, pc}
 8005484:	e000e100 	.word	0xe000e100
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <__NVIC_SystemReset>:
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005490:	f3bf 8f4f 	dsb	sy
}
 8005494:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005496:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <__NVIC_SystemReset+0x1c>)
 8005498:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <__NVIC_SystemReset+0x20>)
 800549a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800549c:	f3bf 8f4f 	dsb	sy
}
 80054a0:	46c0      	nop			@ (mov r8, r8)
    __NOP();
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	e7fd      	b.n	80054a2 <__NVIC_SystemReset+0x16>
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	e000ed00 	.word	0xe000ed00
 80054ac:	05fa0004 	.word	0x05fa0004

080054b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	045b      	lsls	r3, r3, #17
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d301      	bcc.n	80054c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054c4:	2301      	movs	r3, #1
 80054c6:	e010      	b.n	80054ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054c8:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <SysTick_Config+0x44>)
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	3a01      	subs	r2, #1
 80054ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054d0:	2301      	movs	r3, #1
 80054d2:	425b      	negs	r3, r3
 80054d4:	2103      	movs	r1, #3
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7ff ff6a 	bl	80053b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054dc:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <SysTick_Config+0x44>)
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054e2:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <SysTick_Config+0x44>)
 80054e4:	2207      	movs	r2, #7
 80054e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b002      	add	sp, #8
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	e000e010 	.word	0xe000e010

080054f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	210f      	movs	r1, #15
 8005504:	187b      	adds	r3, r7, r1
 8005506:	1c02      	adds	r2, r0, #0
 8005508:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	187b      	adds	r3, r7, r1
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b25b      	sxtb	r3, r3
 8005512:	0011      	movs	r1, r2
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff ff4b 	bl	80053b0 <__NVIC_SetPriority>
}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b004      	add	sp, #16
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	0002      	movs	r2, r0
 800552a:	1dfb      	adds	r3, r7, #7
 800552c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800552e:	1dfb      	adds	r3, r7, #7
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b25b      	sxtb	r3, r3
 8005534:	0018      	movs	r0, r3
 8005536:	f7ff ff21 	bl	800537c <__NVIC_EnableIRQ>
}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b002      	add	sp, #8
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005546:	f7ff ffa1 	bl	800548c <__NVIC_SystemReset>

0800554a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0018      	movs	r0, r3
 8005556:	f7ff ffab 	bl	80054b0 <SysTick_Config>
 800555a:	0003      	movs	r3, r0
}
 800555c:	0018      	movs	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	b002      	add	sp, #8
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e14e      	b.n	8005814 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	225c      	movs	r2, #92	@ 0x5c
 800557a:	5c9b      	ldrb	r3, [r3, r2]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	225d      	movs	r2, #93	@ 0x5d
 8005586:	2100      	movs	r1, #0
 8005588:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f7fe fd0d 	bl	8003fac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2110      	movs	r1, #16
 800559e:	438a      	bics	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055a2:	f7ff f85f 	bl	8004664 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055aa:	e012      	b.n	80055d2 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055ac:	f7ff f85a 	bl	8004664 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b0a      	cmp	r3, #10
 80055b8:	d90b      	bls.n	80055d2 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055be:	2201      	movs	r2, #1
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	225c      	movs	r2, #92	@ 0x5c
 80055ca:	2103      	movs	r1, #3
 80055cc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e120      	b.n	8005814 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2208      	movs	r2, #8
 80055da:	4013      	ands	r3, r2
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d0e5      	beq.n	80055ac <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2101      	movs	r1, #1
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055f0:	f7ff f838 	bl	8004664 <HAL_GetTick>
 80055f4:	0003      	movs	r3, r0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80055f8:	e012      	b.n	8005620 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055fa:	f7ff f833 	bl	8004664 <HAL_GetTick>
 80055fe:	0002      	movs	r2, r0
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b0a      	cmp	r3, #10
 8005606:	d90b      	bls.n	8005620 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560c:	2201      	movs	r2, #1
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	225c      	movs	r2, #92	@ 0x5c
 8005618:	2103      	movs	r1, #3
 800561a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0f9      	b.n	8005814 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2201      	movs	r2, #1
 8005628:	4013      	ands	r3, r2
 800562a:	d0e6      	beq.n	80055fa <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2102      	movs	r1, #2
 8005638:	430a      	orrs	r2, r1
 800563a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a76      	ldr	r2, [pc, #472]	@ (800581c <HAL_FDCAN_Init+0x2b8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d103      	bne.n	800564e <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005646:	4a76      	ldr	r2, [pc, #472]	@ (8005820 <HAL_FDCAN_Init+0x2bc>)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	7c1b      	ldrb	r3, [r3, #16]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d108      	bne.n	8005668 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2140      	movs	r1, #64	@ 0x40
 8005662:	438a      	bics	r2, r1
 8005664:	619a      	str	r2, [r3, #24]
 8005666:	e007      	b.n	8005678 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2140      	movs	r1, #64	@ 0x40
 8005674:	430a      	orrs	r2, r1
 8005676:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7c5b      	ldrb	r3, [r3, #17]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d109      	bne.n	8005694 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2180      	movs	r1, #128	@ 0x80
 800568c:	01c9      	lsls	r1, r1, #7
 800568e:	430a      	orrs	r2, r1
 8005690:	619a      	str	r2, [r3, #24]
 8005692:	e007      	b.n	80056a4 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4961      	ldr	r1, [pc, #388]	@ (8005824 <HAL_FDCAN_Init+0x2c0>)
 80056a0:	400a      	ands	r2, r1
 80056a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7c9b      	ldrb	r3, [r3, #18]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d108      	bne.n	80056be <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	495c      	ldr	r1, [pc, #368]	@ (8005828 <HAL_FDCAN_Init+0x2c4>)
 80056b8:	400a      	ands	r2, r1
 80056ba:	619a      	str	r2, [r3, #24]
 80056bc:	e008      	b.n	80056d0 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2180      	movs	r1, #128	@ 0x80
 80056ca:	0149      	lsls	r1, r1, #5
 80056cc:	430a      	orrs	r2, r1
 80056ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	4a55      	ldr	r2, [pc, #340]	@ (800582c <HAL_FDCAN_Init+0x2c8>)
 80056d8:	4013      	ands	r3, r2
 80056da:	0019      	movs	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	21a4      	movs	r1, #164	@ 0xa4
 80056f4:	438a      	bics	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2110      	movs	r1, #16
 8005704:	438a      	bics	r2, r1
 8005706:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d108      	bne.n	8005722 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2104      	movs	r1, #4
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
 8005720:	e02c      	b.n	800577c <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d028      	beq.n	800577c <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d01c      	beq.n	800576c <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699a      	ldr	r2, [r3, #24]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2180      	movs	r1, #128	@ 0x80
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2110      	movs	r1, #16
 800574e:	430a      	orrs	r2, r1
 8005750:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d110      	bne.n	800577c <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2120      	movs	r1, #32
 8005766:	430a      	orrs	r2, r1
 8005768:	619a      	str	r2, [r3, #24]
 800576a:	e007      	b.n	800577c <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2120      	movs	r1, #32
 8005778:	430a      	orrs	r2, r1
 800577a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	3b01      	subs	r3, #1
 8005782:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	3b01      	subs	r3, #1
 800578a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800578c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005794:	431a      	orrs	r2, r3
 8005796:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	3b01      	subs	r3, #1
 800579e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057a4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057a6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	23c0      	movs	r3, #192	@ 0xc0
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d115      	bne.n	80057e0 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	3b01      	subs	r3, #1
 80057c0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057c2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	3b01      	subs	r3, #1
 80057ca:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057cc:	431a      	orrs	r2, r3
 80057ce:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	3b01      	subs	r3, #1
 80057d6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057dc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057de:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	22c0      	movs	r2, #192	@ 0xc0
 80057e6:	5899      	ldr	r1, [r3, r2]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	21c0      	movs	r1, #192	@ 0xc0
 80057f4:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f000 fc99 	bl	8006130 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	225c      	movs	r2, #92	@ 0x5c
 800580e:	2101      	movs	r1, #1
 8005810:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b004      	add	sp, #16
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40006400 	.word	0x40006400
 8005820:	40006500 	.word	0x40006500
 8005824:	ffffbfff 	.word	0xffffbfff
 8005828:	ffffefff 	.word	0xffffefff
 800582c:	fffffcff 	.word	0xfffffcff

08005830 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800583a:	2017      	movs	r0, #23
 800583c:	183b      	adds	r3, r7, r0
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	215c      	movs	r1, #92	@ 0x5c
 8005842:	5c52      	ldrb	r2, [r2, r1]
 8005844:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005846:	0002      	movs	r2, r0
 8005848:	18bb      	adds	r3, r7, r2
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d003      	beq.n	8005858 <HAL_FDCAN_ConfigFilter+0x28>
 8005850:	18bb      	adds	r3, r7, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d13d      	bne.n	80058d4 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d119      	bne.n	8005894 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800586c:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005874:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e01d      	b.n	80058d0 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	075a      	lsls	r2, r3, #29
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	079a      	lsls	r2, r3, #30
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	18d3      	adds	r3, r2, r3
 80058bc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	3304      	adds	r3, #4
 80058c8:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e006      	b.n	80058e2 <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d8:	2202      	movs	r2, #2
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
  }
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b006      	add	sp, #24
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	225c      	movs	r2, #92	@ 0x5c
 80058fc:	5c9b      	ldrb	r3, [r3, r2]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d117      	bne.n	8005934 <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2280      	movs	r2, #128	@ 0x80
 800590a:	589b      	ldr	r3, [r3, r2]
 800590c:	223f      	movs	r2, #63	@ 0x3f
 800590e:	4393      	bics	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	011a      	lsls	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	431a      	orrs	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	431a      	orrs	r2, r3
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	431a      	orrs	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	2180      	movs	r1, #128	@ 0x80
 800592e:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e006      	b.n	8005942 <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005938:	2204      	movs	r2, #4
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
  }
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	225c      	movs	r2, #92	@ 0x5c
 8005956:	5c9b      	ldrb	r3, [r3, r2]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d110      	bne.n	8005980 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	225c      	movs	r2, #92	@ 0x5c
 8005962:	2102      	movs	r1, #2
 8005964:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2101      	movs	r1, #1
 8005972:	438a      	bics	r2, r1
 8005974:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e006      	b.n	800598e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005984:	2204      	movs	r2, #4
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
  }
}
 800598e:	0018      	movs	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	b002      	add	sp, #8
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	225c      	movs	r2, #92	@ 0x5c
 80059a6:	5c9b      	ldrb	r3, [r3, r2]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d12d      	bne.n	8005a0a <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	22c4      	movs	r2, #196	@ 0xc4
 80059b4:	589a      	ldr	r2, [r3, r2]
 80059b6:	2380      	movs	r3, #128	@ 0x80
 80059b8:	039b      	lsls	r3, r3, #14
 80059ba:	4013      	ands	r3, r2
 80059bc:	d008      	beq.n	80059d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c2:	2280      	movs	r2, #128	@ 0x80
 80059c4:	0092      	lsls	r2, r2, #2
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e023      	b.n	8005a18 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	22c4      	movs	r2, #196	@ 0xc4
 80059d6:	589b      	ldr	r3, [r3, r2]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	2203      	movs	r2, #3
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fc0e 	bl	8006208 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4091      	lsls	r1, r2
 80059f6:	000a      	movs	r2, r1
 80059f8:	21cc      	movs	r1, #204	@ 0xcc
 80059fa:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80059fc:	2201      	movs	r2, #1
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	409a      	lsls	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e006      	b.n	8005a18 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0e:	2208      	movs	r2, #8
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
  }
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b006      	add	sp, #24
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	@ 0x28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a32:	201b      	movs	r0, #27
 8005a34:	183b      	adds	r3, r7, r0
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	215c      	movs	r1, #92	@ 0x5c
 8005a3a:	5c52      	ldrb	r2, [r2, r1]
 8005a3c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d000      	beq.n	8005a48 <HAL_FDCAN_GetRxMessage+0x28>
 8005a46:	e0f4      	b.n	8005c32 <HAL_FDCAN_GetRxMessage+0x212>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d13b      	bne.n	8005ac6 <HAL_FDCAN_GetRxMessage+0xa6>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2290      	movs	r2, #144	@ 0x90
 8005a54:	589b      	ldr	r3, [r3, r2]
 8005a56:	220f      	movs	r2, #15
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d108      	bne.n	8005a6e <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a60:	2280      	movs	r2, #128	@ 0x80
 8005a62:	0052      	lsls	r2, r2, #1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0e8      	b.n	8005c40 <HAL_FDCAN_GetRxMessage+0x220>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2290      	movs	r2, #144	@ 0x90
 8005a74:	589a      	ldr	r2, [r3, r2]
 8005a76:	2380      	movs	r3, #128	@ 0x80
 8005a78:	045b      	lsls	r3, r3, #17
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	045b      	lsls	r3, r3, #17
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d10c      	bne.n	8005a9e <HAL_FDCAN_GetRxMessage+0x7e>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2280      	movs	r2, #128	@ 0x80
 8005a8a:	589a      	ldr	r2, [r3, r2]
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	401a      	ands	r2, r3
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d101      	bne.n	8005a9e <HAL_FDCAN_GetRxMessage+0x7e>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2290      	movs	r2, #144	@ 0x90
 8005aa4:	589b      	ldr	r3, [r3, r2]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	4013      	ands	r3, r2
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	18d3      	adds	r3, r2, r3
 8005ab0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	0013      	movs	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	18cb      	adds	r3, r1, r3
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac4:	e03a      	b.n	8005b3c <HAL_FDCAN_GetRxMessage+0x11c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2298      	movs	r2, #152	@ 0x98
 8005acc:	589b      	ldr	r3, [r3, r2]
 8005ace:	220f      	movs	r2, #15
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d108      	bne.n	8005ae6 <HAL_FDCAN_GetRxMessage+0xc6>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad8:	2280      	movs	r2, #128	@ 0x80
 8005ada:	0052      	lsls	r2, r2, #1
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0ac      	b.n	8005c40 <HAL_FDCAN_GetRxMessage+0x220>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2298      	movs	r2, #152	@ 0x98
 8005aec:	589a      	ldr	r2, [r3, r2]
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	045b      	lsls	r3, r3, #17
 8005af2:	401a      	ands	r2, r3
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	045b      	lsls	r3, r3, #17
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d10c      	bne.n	8005b16 <HAL_FDCAN_GetRxMessage+0xf6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2280      	movs	r2, #128	@ 0x80
 8005b02:	589a      	ldr	r2, [r3, r2]
 8005b04:	2380      	movs	r3, #128	@ 0x80
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	401a      	ands	r2, r3
 8005b0a:	2380      	movs	r3, #128	@ 0x80
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d101      	bne.n	8005b16 <HAL_FDCAN_GetRxMessage+0xf6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b12:	2301      	movs	r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2298      	movs	r2, #152	@ 0x98
 8005b1c:	589b      	ldr	r3, [r3, r2]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	2203      	movs	r2, #3
 8005b22:	4013      	ands	r3, r2
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	0013      	movs	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	189b      	adds	r3, r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	18cb      	adds	r3, r1, r3
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	05db      	lsls	r3, r3, #23
 8005b44:	401a      	ands	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d107      	bne.n	8005b62 <HAL_FDCAN_GetRxMessage+0x142>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	0c9b      	lsrs	r3, r3, #18
 8005b58:	055b      	lsls	r3, r3, #21
 8005b5a:	0d5a      	lsrs	r2, r3, #21
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e005      	b.n	8005b6e <HAL_FDCAN_GetRxMessage+0x14e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	08da      	lsrs	r2, r3, #3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	2380      	movs	r3, #128	@ 0x80
 8005b74:	059b      	lsls	r3, r3, #22
 8005b76:	401a      	ands	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	0fdb      	lsrs	r3, r3, #31
 8005b82:	07da      	lsls	r2, r3, #31
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	0c1a      	lsrs	r2, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	0c1b      	lsrs	r3, r3, #16
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	2380      	movs	r3, #128	@ 0x80
 8005bae:	035b      	lsls	r3, r3, #13
 8005bb0:	401a      	ands	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	039b      	lsls	r3, r3, #14
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	227f      	movs	r2, #127	@ 0x7f
 8005bcc:	401a      	ands	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	0fda      	lsrs	r2, r3, #31
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	3304      	adds	r3, #4
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	e00a      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x1e2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	18d2      	adds	r2, r2, r3
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	18cb      	adds	r3, r1, r3
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4a10      	ldr	r2, [pc, #64]	@ (8005c48 <HAL_FDCAN_GetRxMessage+0x228>)
 8005c08:	5cd3      	ldrb	r3, [r2, r3]
 8005c0a:	001a      	movs	r2, r3
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d3ec      	bcc.n	8005bec <HAL_FDCAN_GetRxMessage+0x1cc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d105      	bne.n	8005c24 <HAL_FDCAN_GetRxMessage+0x204>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2194      	movs	r1, #148	@ 0x94
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	505a      	str	r2, [r3, r1]
 8005c22:	e004      	b.n	8005c2e <HAL_FDCAN_GetRxMessage+0x20e>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	219c      	movs	r1, #156	@ 0x9c
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e006      	b.n	8005c40 <HAL_FDCAN_GetRxMessage+0x220>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c36:	2208      	movs	r2, #8
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
  }
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b00a      	add	sp, #40	@ 0x28
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08009df0 	.word	0x08009df0

08005c4c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c58:	2017      	movs	r0, #23
 8005c5a:	183b      	adds	r3, r7, r0
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	215c      	movs	r1, #92	@ 0x5c
 8005c60:	5c52      	ldrb	r2, [r2, r1]
 8005c62:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005c64:	0002      	movs	r2, r0
 8005c66:	18bb      	adds	r3, r7, r2
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d004      	beq.n	8005c78 <HAL_FDCAN_ActivateNotification+0x2c>
 8005c6e:	18bb      	adds	r3, r7, r2
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d000      	beq.n	8005c78 <HAL_FDCAN_ActivateNotification+0x2c>
 8005c76:	e0b4      	b.n	8005de2 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7e:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2207      	movs	r2, #7
 8005c84:	4013      	ands	r3, r2
 8005c86:	d003      	beq.n	8005c90 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d034      	beq.n	8005cfa <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2238      	movs	r2, #56	@ 0x38
 8005c94:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005c96:	d003      	beq.n	8005ca0 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d02c      	beq.n	8005cfa <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	23e0      	movs	r3, #224	@ 0xe0
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ca8:	d003      	beq.n	8005cb2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2204      	movs	r2, #4
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d023      	beq.n	8005cfa <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	23f0      	movs	r3, #240	@ 0xf0
 8005cb6:	015b      	lsls	r3, r3, #5
 8005cb8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005cba:	d003      	beq.n	8005cc4 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d01a      	beq.n	8005cfa <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	23e0      	movs	r3, #224	@ 0xe0
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ccc:	d003      	beq.n	8005cd6 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d011      	beq.n	8005cfa <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	23c0      	movs	r3, #192	@ 0xc0
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005cde:	d003      	beq.n	8005ce8 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d008      	beq.n	8005cfa <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	23fc      	movs	r3, #252	@ 0xfc
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005cf0:	d00b      	beq.n	8005d0a <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2240      	movs	r2, #64	@ 0x40
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d107      	bne.n	8005d0a <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2101      	movs	r1, #1
 8005d06:	430a      	orrs	r2, r1
 8005d08:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2207      	movs	r2, #7
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d003      	beq.n	8005d1a <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4013      	ands	r3, r2
 8005d18:	d134      	bne.n	8005d84 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2238      	movs	r2, #56	@ 0x38
 8005d1e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005d20:	d003      	beq.n	8005d2a <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2202      	movs	r2, #2
 8005d26:	4013      	ands	r3, r2
 8005d28:	d12c      	bne.n	8005d84 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	23e0      	movs	r3, #224	@ 0xe0
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005d32:	d003      	beq.n	8005d3c <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2204      	movs	r2, #4
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d123      	bne.n	8005d84 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	23f0      	movs	r3, #240	@ 0xf0
 8005d40:	015b      	lsls	r3, r3, #5
 8005d42:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005d44:	d003      	beq.n	8005d4e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d11a      	bne.n	8005d84 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	23e0      	movs	r3, #224	@ 0xe0
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005d56:	d003      	beq.n	8005d60 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d111      	bne.n	8005d84 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	23c0      	movs	r3, #192	@ 0xc0
 8005d64:	029b      	lsls	r3, r3, #10
 8005d66:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005d68:	d003      	beq.n	8005d72 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d108      	bne.n	8005d84 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	23fc      	movs	r3, #252	@ 0xfc
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005d7a:	d00b      	beq.n	8005d94 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2240      	movs	r2, #64	@ 0x40
 8005d80:	4013      	ands	r3, r2
 8005d82:	d007      	beq.n	8005d94 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2102      	movs	r1, #2
 8005d90:	430a      	orrs	r2, r1
 8005d92:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2280      	movs	r2, #128	@ 0x80
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	22dc      	movs	r2, #220	@ 0xdc
 8005da2:	5899      	ldr	r1, [r3, r2]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	21dc      	movs	r1, #220	@ 0xdc
 8005dae:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4013      	ands	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	22e0      	movs	r2, #224	@ 0xe0
 8005dc0:	5899      	ldr	r1, [r3, r2]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	21e0      	movs	r1, #224	@ 0xe0
 8005dcc:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e006      	b.n	8005df0 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de6:	2202      	movs	r2, #2
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
  }
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b006      	add	sp, #24
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e06:	23e0      	movs	r3, #224	@ 0xe0
 8005e08:	015b      	lsls	r3, r3, #5
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e16:	4013      	ands	r3, r2
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	2207      	movs	r2, #7
 8005e22:	4013      	ands	r3, r2
 8005e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	4013      	ands	r3, r2
 8005e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e38:	2238      	movs	r2, #56	@ 0x38
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	4013      	ands	r3, r2
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e50:	23f1      	movs	r3, #241	@ 0xf1
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	4013      	ands	r3, r2
 8005e56:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	4013      	ands	r3, r2
 8005e62:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e6a:	23e0      	movs	r3, #224	@ 0xe0
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e84:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	099b      	lsrs	r3, r3, #6
 8005e92:	001a      	movs	r2, r3
 8005e94:	2301      	movs	r3, #1
 8005e96:	4013      	ands	r3, r2
 8005e98:	d00d      	beq.n	8005eb6 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	099b      	lsrs	r3, r3, #6
 8005e9e:	001a      	movs	r2, r3
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2240      	movs	r2, #64	@ 0x40
 8005eac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 f924 	bl	80060fe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	001a      	movs	r2, r3
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d01c      	beq.n	8005efc <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d016      	beq.n	8005efc <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	22d8      	movs	r2, #216	@ 0xd8
 8005ed4:	589b      	ldr	r3, [r3, r2]
 8005ed6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	22e0      	movs	r2, #224	@ 0xe0
 8005ede:	589a      	ldr	r2, [r3, r2]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2280      	movs	r2, #128	@ 0x80
 8005eec:	0052      	lsls	r2, r2, #1
 8005eee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0011      	movs	r1, r2
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f000 f8e8 	bl	80060cc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 f8b8 	bl	8006086 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0011      	movs	r1, r2
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7fc fdfe 	bl	8002b2c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 f8a7 	bl	8006098 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	0a5b      	lsrs	r3, r3, #9
 8005f4e:	001a      	movs	r2, r3
 8005f50:	2301      	movs	r3, #1
 8005f52:	4013      	ands	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	0a5b      	lsrs	r3, r3, #9
 8005f5a:	001a      	movs	r2, r3
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d008      	beq.n	8005f74 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2280      	movs	r2, #128	@ 0x80
 8005f68:	0092      	lsls	r2, r2, #2
 8005f6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 f89b 	bl	80060aa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	001a      	movs	r2, r3
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	001a      	movs	r2, r3
 8005f86:	2301      	movs	r3, #1
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d015      	beq.n	8005fb8 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	22d4      	movs	r2, #212	@ 0xd4
 8005f92:	589b      	ldr	r3, [r3, r2]
 8005f94:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	22dc      	movs	r2, #220	@ 0xdc
 8005f9c:	589a      	ldr	r2, [r3, r2]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2280      	movs	r2, #128	@ 0x80
 8005faa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 f881 	bl	80060ba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	0b5b      	lsrs	r3, r3, #13
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	0b5b      	lsrs	r3, r3, #13
 8005fc8:	001a      	movs	r2, r3
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d008      	beq.n	8005fe2 <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2280      	movs	r2, #128	@ 0x80
 8005fd6:	0192      	lsls	r2, r2, #6
 8005fd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f000 f87e 	bl	80060de <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	0bdb      	lsrs	r3, r3, #15
 8005fe6:	001a      	movs	r2, r3
 8005fe8:	2301      	movs	r3, #1
 8005fea:	4013      	ands	r3, r2
 8005fec:	d00e      	beq.n	800600c <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	0bdb      	lsrs	r3, r3, #15
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d008      	beq.n	800600c <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2280      	movs	r2, #128	@ 0x80
 8006000:	0212      	lsls	r2, r2, #8
 8006002:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	0018      	movs	r0, r3
 8006008:	f000 f871 	bl	80060ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	0b9b      	lsrs	r3, r3, #14
 8006010:	001a      	movs	r2, r3
 8006012:	2301      	movs	r3, #1
 8006014:	4013      	ands	r3, r2
 8006016:	d010      	beq.n	800603a <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	0b9b      	lsrs	r3, r3, #14
 800601c:	001a      	movs	r2, r3
 800601e:	2301      	movs	r3, #1
 8006020:	4013      	ands	r3, r2
 8006022:	d00a      	beq.n	800603a <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2280      	movs	r2, #128	@ 0x80
 800602a:	01d2      	lsls	r2, r2, #7
 800602c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	2280      	movs	r2, #128	@ 0x80
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0011      	movs	r1, r2
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f865 	bl	800611e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0018      	movs	r0, r3
 800607a:	f000 f848 	bl	800610e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	46bd      	mov	sp, r7
 8006082:	b00c      	add	sp, #48	@ 0x30
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006090:	46c0      	nop			@ (mov r8, r8)
 8006092:	46bd      	mov	sp, r7
 8006094:	b002      	add	sp, #8
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80060a2:	46c0      	nop			@ (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b002      	add	sp, #8
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b002      	add	sp, #8
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80060c4:	46c0      	nop			@ (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b002      	add	sp, #8
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	46bd      	mov	sp, r7
 80060da:	b002      	add	sp, #8
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b002      	add	sp, #8
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b002      	add	sp, #8
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	46bd      	mov	sp, r7
 800610a:	b002      	add	sp, #8
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	b002      	add	sp, #8
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006128:	46c0      	nop			@ (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}

08006130 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006138:	4b2f      	ldr	r3, [pc, #188]	@ (80061f8 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800613a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2e      	ldr	r2, [pc, #184]	@ (80061fc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d105      	bne.n	8006152 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	22d4      	movs	r2, #212	@ 0xd4
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	4694      	mov	ip, r2
 800614e:	4463      	add	r3, ip
 8006150:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2280      	movs	r2, #128	@ 0x80
 800615e:	589b      	ldr	r3, [r3, r2]
 8006160:	4a27      	ldr	r2, [pc, #156]	@ (8006200 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006162:	4013      	ands	r3, r2
 8006164:	0019      	movs	r1, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616a:	041a      	lsls	r2, r3, #16
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	2180      	movs	r1, #128	@ 0x80
 8006174:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3370      	adds	r3, #112	@ 0x70
 800617a:	001a      	movs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2280      	movs	r2, #128	@ 0x80
 8006186:	589b      	ldr	r3, [r3, r2]
 8006188:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800618a:	4013      	ands	r3, r2
 800618c:	0019      	movs	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	061a      	lsls	r2, r3, #24
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	2180      	movs	r1, #128	@ 0x80
 800619c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	33b0      	adds	r3, #176	@ 0xb0
 80061a2:	001a      	movs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3389      	adds	r3, #137	@ 0x89
 80061ac:	33ff      	adds	r3, #255	@ 0xff
 80061ae:	001a      	movs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2298      	movs	r2, #152	@ 0x98
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	189a      	adds	r2, r3, r2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	229e      	movs	r2, #158	@ 0x9e
 80061c4:	0092      	lsls	r2, r2, #2
 80061c6:	189a      	adds	r2, r3, r2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e005      	b.n	80061de <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3304      	adds	r3, #4
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	22d4      	movs	r2, #212	@ 0xd4
 80061e2:	0092      	lsls	r2, r2, #2
 80061e4:	4694      	mov	ip, r2
 80061e6:	4463      	add	r3, ip
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3f1      	bcc.n	80061d2 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	46c0      	nop			@ (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b004      	add	sp, #16
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	4000b400 	.word	0x4000b400
 80061fc:	40006800 	.word	0x40006800
 8006200:	ffe0ffff 	.word	0xffe0ffff
 8006204:	f0ffffff 	.word	0xf0ffffff

08006208 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006226:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800622e:	4313      	orrs	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e00b      	b.n	800624c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800623c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006242:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006244:	2280      	movs	r2, #128	@ 0x80
 8006246:	05d2      	lsls	r2, r2, #23
 8006248:	4313      	orrs	r3, r2
 800624a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006256:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800625c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006262:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	0013      	movs	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	189b      	adds	r3, r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	18cb      	adds	r3, r1, r3
 800627e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	3304      	adds	r3, #4
 800628a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	3304      	adds	r3, #4
 8006296:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e020      	b.n	80062e0 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	3303      	adds	r3, #3
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	18d3      	adds	r3, r2, r3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	3302      	adds	r3, #2
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	18cb      	adds	r3, r1, r3
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80062b6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3301      	adds	r3, #1
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	18cb      	adds	r3, r1, r3
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80062c4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	188a      	adds	r2, r1, r2
 80062cc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80062ce:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	3304      	adds	r3, #4
 80062d8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	3304      	adds	r3, #4
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a05      	ldr	r2, [pc, #20]	@ (80062fc <FDCAN_CopyMessageToRAM+0xf4>)
 80062e6:	5cd3      	ldrb	r3, [r2, r3]
 80062e8:	001a      	movs	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d3d6      	bcc.n	800629e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80062f0:	46c0      	nop			@ (mov r8, r8)
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b008      	add	sp, #32
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	08009df0 	.word	0x08009df0

08006300 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006300:	b5b0      	push	{r4, r5, r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	603a      	str	r2, [r7, #0]
 800630c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800630e:	4b21      	ldr	r3, [pc, #132]	@ (8006394 <HAL_FLASH_Program+0x94>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_FLASH_Program+0x1a>
 8006316:	2302      	movs	r3, #2
 8006318:	e038      	b.n	800638c <HAL_FLASH_Program+0x8c>
 800631a:	4b1e      	ldr	r3, [pc, #120]	@ (8006394 <HAL_FLASH_Program+0x94>)
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006320:	4b1c      	ldr	r3, [pc, #112]	@ (8006394 <HAL_FLASH_Program+0x94>)
 8006322:	2200      	movs	r2, #0
 8006324:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006326:	2517      	movs	r5, #23
 8006328:	197c      	adds	r4, r7, r5
 800632a:	23fa      	movs	r3, #250	@ 0xfa
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	0018      	movs	r0, r3
 8006330:	f000 f87a 	bl	8006428 <FLASH_WaitForLastOperation>
 8006334:	0003      	movs	r3, r0
 8006336:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006338:	197b      	adds	r3, r7, r5
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d11f      	bne.n	8006380 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d106      	bne.n	8006354 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	0008      	movs	r0, r1
 800634e:	f000 f8b9 	bl	80064c4 <FLASH_Program_DoubleWord>
 8006352:	e005      	b.n	8006360 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	0011      	movs	r1, r2
 800635a:	0018      	movs	r0, r3
 800635c:	f003 fc34 	bl	8009bc8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006360:	2317      	movs	r3, #23
 8006362:	18fc      	adds	r4, r7, r3
 8006364:	23fa      	movs	r3, #250	@ 0xfa
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	0018      	movs	r0, r3
 800636a:	f000 f85d 	bl	8006428 <FLASH_WaitForLastOperation>
 800636e:	0003      	movs	r3, r0
 8006370:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006372:	4b09      	ldr	r3, [pc, #36]	@ (8006398 <HAL_FLASH_Program+0x98>)
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	43d9      	mvns	r1, r3
 800637a:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <HAL_FLASH_Program+0x98>)
 800637c:	400a      	ands	r2, r1
 800637e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006380:	4b04      	ldr	r3, [pc, #16]	@ (8006394 <HAL_FLASH_Program+0x94>)
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006386:	2317      	movs	r3, #23
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	781b      	ldrb	r3, [r3, #0]
}
 800638c:	0018      	movs	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	b006      	add	sp, #24
 8006392:	bdb0      	pop	{r4, r5, r7, pc}
 8006394:	2000080c 	.word	0x2000080c
 8006398:	40022000 	.word	0x40022000

0800639c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80063a2:	1dfb      	adds	r3, r7, #7
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80063a8:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <HAL_FLASH_Unlock+0x3c>)
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da0c      	bge.n	80063ca <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80063b0:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <HAL_FLASH_Unlock+0x3c>)
 80063b2:	4a0a      	ldr	r2, [pc, #40]	@ (80063dc <HAL_FLASH_Unlock+0x40>)
 80063b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80063b6:	4b08      	ldr	r3, [pc, #32]	@ (80063d8 <HAL_FLASH_Unlock+0x3c>)
 80063b8:	4a09      	ldr	r2, [pc, #36]	@ (80063e0 <HAL_FLASH_Unlock+0x44>)
 80063ba:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80063bc:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <HAL_FLASH_Unlock+0x3c>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da02      	bge.n	80063ca <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80063c4:	1dfb      	adds	r3, r7, #7
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80063ca:	1dfb      	adds	r3, r7, #7
 80063cc:	781b      	ldrb	r3, [r3, #0]
}
 80063ce:	0018      	movs	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	b002      	add	sp, #8
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	46c0      	nop			@ (mov r8, r8)
 80063d8:	40022000 	.word	0x40022000
 80063dc:	45670123 	.word	0x45670123
 80063e0:	cdef89ab 	.word	0xcdef89ab

080063e4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80063ea:	1dfb      	adds	r3, r7, #7
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80063f0:	23fa      	movs	r3, #250	@ 0xfa
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f000 f817 	bl	8006428 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80063fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006424 <HAL_FLASH_Lock+0x40>)
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <HAL_FLASH_Lock+0x40>)
 8006400:	2180      	movs	r1, #128	@ 0x80
 8006402:	0609      	lsls	r1, r1, #24
 8006404:	430a      	orrs	r2, r1
 8006406:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8006408:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <HAL_FLASH_Lock+0x40>)
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	da02      	bge.n	8006416 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8006410:	1dfb      	adds	r3, r7, #7
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006416:	1dfb      	adds	r3, r7, #7
 8006418:	781b      	ldrb	r3, [r3, #0]
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b002      	add	sp, #8
 8006420:	bd80      	pop	{r7, pc}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	40022000 	.word	0x40022000

08006428 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006430:	f7fe f918 	bl	8004664 <HAL_GetTick>
 8006434:	0003      	movs	r3, r0
 8006436:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8006438:	23c0      	movs	r3, #192	@ 0xc0
 800643a:	029b      	lsls	r3, r3, #10
 800643c:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800643e:	e00c      	b.n	800645a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3301      	adds	r3, #1
 8006444:	d009      	beq.n	800645a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8006446:	f7fe f90d 	bl	8004664 <HAL_GetTick>
 800644a:	0002      	movs	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d801      	bhi.n	800645a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e028      	b.n	80064ac <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800645a:	4b16      	ldr	r3, [pc, #88]	@ (80064b4 <FLASH_WaitForLastOperation+0x8c>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	d1ed      	bne.n	8006440 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8006464:	4b13      	ldr	r3, [pc, #76]	@ (80064b4 <FLASH_WaitForLastOperation+0x8c>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	4a13      	ldr	r2, [pc, #76]	@ (80064b8 <FLASH_WaitForLastOperation+0x90>)
 800646a:	4013      	ands	r3, r2
 800646c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800646e:	4b11      	ldr	r3, [pc, #68]	@ (80064b4 <FLASH_WaitForLastOperation+0x8c>)
 8006470:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <FLASH_WaitForLastOperation+0x94>)
 8006472:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800647a:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <FLASH_WaitForLastOperation+0x98>)
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e013      	b.n	80064ac <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3301      	adds	r3, #1
 8006488:	d009      	beq.n	800649e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800648a:	f7fe f8eb 	bl	8004664 <HAL_GetTick>
 800648e:	0002      	movs	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d801      	bhi.n	800649e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e006      	b.n	80064ac <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800649e:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <FLASH_WaitForLastOperation+0x8c>)
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	2380      	movs	r3, #128	@ 0x80
 80064a4:	02db      	lsls	r3, r3, #11
 80064a6:	4013      	ands	r3, r2
 80064a8:	d1ec      	bne.n	8006484 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	0018      	movs	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b004      	add	sp, #16
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40022000 	.word	0x40022000
 80064b8:	0000c3fa 	.word	0x0000c3fa
 80064bc:	0008c3fb 	.word	0x0008c3fb
 80064c0:	2000080c 	.word	0x2000080c

080064c4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80064c4:	b5b0      	push	{r4, r5, r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	603a      	str	r2, [r7, #0]
 80064ce:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80064d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <FLASH_Program_DoubleWord+0x3c>)
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <FLASH_Program_DoubleWord+0x3c>)
 80064d6:	2101      	movs	r1, #1
 80064d8:	430a      	orrs	r2, r1
 80064da:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80064e2:	f3bf 8f6f 	isb	sy
}
 80064e6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	001c      	movs	r4, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	001d      	movs	r5, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3304      	adds	r3, #4
 80064f4:	0022      	movs	r2, r4
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	46c0      	nop			@ (mov r8, r8)
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b004      	add	sp, #16
 80064fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006500:	40022000 	.word	0x40022000

08006504 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800650e:	4b0f      	ldr	r3, [pc, #60]	@ (800654c <FLASH_PageErase+0x48>)
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <FLASH_PageErase+0x4c>)
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d005      	beq.n	800652a <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2280      	movs	r2, #128	@ 0x80
 8006522:	0192      	lsls	r2, r2, #6
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e003      	b.n	8006532 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a09      	ldr	r2, [pc, #36]	@ (8006554 <FLASH_PageErase+0x50>)
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	00da      	lsls	r2, r3, #3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	431a      	orrs	r2, r3
 800653a:	4b04      	ldr	r3, [pc, #16]	@ (800654c <FLASH_PageErase+0x48>)
 800653c:	4906      	ldr	r1, [pc, #24]	@ (8006558 <FLASH_PageErase+0x54>)
 800653e:	430a      	orrs	r2, r1
 8006540:	615a      	str	r2, [r3, #20]
}
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	46bd      	mov	sp, r7
 8006546:	b004      	add	sp, #16
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	40022000 	.word	0x40022000
 8006550:	ffffe007 	.word	0xffffe007
 8006554:	ffffdfff 	.word	0xffffdfff
 8006558:	00010002 	.word	0x00010002

0800655c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800656a:	e14d      	b.n	8006808 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2101      	movs	r1, #1
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4091      	lsls	r1, r2
 8006576:	000a      	movs	r2, r1
 8006578:	4013      	ands	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d100      	bne.n	8006584 <HAL_GPIO_Init+0x28>
 8006582:	e13e      	b.n	8006802 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2203      	movs	r2, #3
 800658a:	4013      	ands	r3, r2
 800658c:	2b01      	cmp	r3, #1
 800658e:	d005      	beq.n	800659c <HAL_GPIO_Init+0x40>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2203      	movs	r2, #3
 8006596:	4013      	ands	r3, r2
 8006598:	2b02      	cmp	r3, #2
 800659a:	d130      	bne.n	80065fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	2203      	movs	r2, #3
 80065a8:	409a      	lsls	r2, r3
 80065aa:	0013      	movs	r3, r2
 80065ac:	43da      	mvns	r2, r3
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4013      	ands	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	409a      	lsls	r2, r3
 80065be:	0013      	movs	r3, r2
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065d2:	2201      	movs	r2, #1
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	409a      	lsls	r2, r3
 80065d8:	0013      	movs	r3, r2
 80065da:	43da      	mvns	r2, r3
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4013      	ands	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	091b      	lsrs	r3, r3, #4
 80065e8:	2201      	movs	r2, #1
 80065ea:	401a      	ands	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	409a      	lsls	r2, r3
 80065f0:	0013      	movs	r3, r2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2203      	movs	r2, #3
 8006604:	4013      	ands	r3, r2
 8006606:	2b03      	cmp	r3, #3
 8006608:	d017      	beq.n	800663a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	2203      	movs	r2, #3
 8006616:	409a      	lsls	r2, r3
 8006618:	0013      	movs	r3, r2
 800661a:	43da      	mvns	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	0013      	movs	r3, r2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2203      	movs	r2, #3
 8006640:	4013      	ands	r3, r2
 8006642:	2b02      	cmp	r3, #2
 8006644:	d123      	bne.n	800668e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	08da      	lsrs	r2, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3208      	adds	r2, #8
 800664e:	0092      	lsls	r2, r2, #2
 8006650:	58d3      	ldr	r3, [r2, r3]
 8006652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2207      	movs	r2, #7
 8006658:	4013      	ands	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	220f      	movs	r2, #15
 800665e:	409a      	lsls	r2, r3
 8006660:	0013      	movs	r3, r2
 8006662:	43da      	mvns	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2107      	movs	r1, #7
 8006672:	400b      	ands	r3, r1
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	409a      	lsls	r2, r3
 8006678:	0013      	movs	r3, r2
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	08da      	lsrs	r2, r3, #3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3208      	adds	r2, #8
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	6939      	ldr	r1, [r7, #16]
 800668c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	2203      	movs	r2, #3
 800669a:	409a      	lsls	r2, r3
 800669c:	0013      	movs	r3, r2
 800669e:	43da      	mvns	r2, r3
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4013      	ands	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2203      	movs	r2, #3
 80066ac:	401a      	ands	r2, r3
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	0013      	movs	r3, r2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	23c0      	movs	r3, #192	@ 0xc0
 80066c8:	029b      	lsls	r3, r3, #10
 80066ca:	4013      	ands	r3, r2
 80066cc:	d100      	bne.n	80066d0 <HAL_GPIO_Init+0x174>
 80066ce:	e098      	b.n	8006802 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80066d0:	4a53      	ldr	r2, [pc, #332]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	089b      	lsrs	r3, r3, #2
 80066d6:	3318      	adds	r3, #24
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	589b      	ldr	r3, [r3, r2]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2203      	movs	r2, #3
 80066e2:	4013      	ands	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	220f      	movs	r2, #15
 80066e8:	409a      	lsls	r2, r3
 80066ea:	0013      	movs	r3, r2
 80066ec:	43da      	mvns	r2, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4013      	ands	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	23a0      	movs	r3, #160	@ 0xa0
 80066f8:	05db      	lsls	r3, r3, #23
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d019      	beq.n	8006732 <HAL_GPIO_Init+0x1d6>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a48      	ldr	r2, [pc, #288]	@ (8006824 <HAL_GPIO_Init+0x2c8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <HAL_GPIO_Init+0x1d2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a47      	ldr	r2, [pc, #284]	@ (8006828 <HAL_GPIO_Init+0x2cc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00d      	beq.n	800672a <HAL_GPIO_Init+0x1ce>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a46      	ldr	r2, [pc, #280]	@ (800682c <HAL_GPIO_Init+0x2d0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <HAL_GPIO_Init+0x1ca>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a45      	ldr	r2, [pc, #276]	@ (8006830 <HAL_GPIO_Init+0x2d4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d101      	bne.n	8006722 <HAL_GPIO_Init+0x1c6>
 800671e:	2304      	movs	r3, #4
 8006720:	e008      	b.n	8006734 <HAL_GPIO_Init+0x1d8>
 8006722:	2305      	movs	r3, #5
 8006724:	e006      	b.n	8006734 <HAL_GPIO_Init+0x1d8>
 8006726:	2303      	movs	r3, #3
 8006728:	e004      	b.n	8006734 <HAL_GPIO_Init+0x1d8>
 800672a:	2302      	movs	r3, #2
 800672c:	e002      	b.n	8006734 <HAL_GPIO_Init+0x1d8>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <HAL_GPIO_Init+0x1d8>
 8006732:	2300      	movs	r3, #0
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	2103      	movs	r1, #3
 8006738:	400a      	ands	r2, r1
 800673a:	00d2      	lsls	r2, r2, #3
 800673c:	4093      	lsls	r3, r2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006744:	4936      	ldr	r1, [pc, #216]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	089b      	lsrs	r3, r3, #2
 800674a:	3318      	adds	r3, #24
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006752:	4b33      	ldr	r3, [pc, #204]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	43da      	mvns	r2, r3
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4013      	ands	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	2380      	movs	r3, #128	@ 0x80
 8006768:	035b      	lsls	r3, r3, #13
 800676a:	4013      	ands	r3, r2
 800676c:	d003      	beq.n	8006776 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006776:	4b2a      	ldr	r3, [pc, #168]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800677c:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	43da      	mvns	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	4013      	ands	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	2380      	movs	r3, #128	@ 0x80
 8006792:	039b      	lsls	r3, r3, #14
 8006794:	4013      	ands	r3, r2
 8006796:	d003      	beq.n	80067a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80067a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 80067a8:	2384      	movs	r3, #132	@ 0x84
 80067aa:	58d3      	ldr	r3, [r2, r3]
 80067ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	43da      	mvns	r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	2380      	movs	r3, #128	@ 0x80
 80067be:	029b      	lsls	r3, r3, #10
 80067c0:	4013      	ands	r3, r2
 80067c2:	d003      	beq.n	80067cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067cc:	4914      	ldr	r1, [pc, #80]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 80067ce:	2284      	movs	r2, #132	@ 0x84
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80067d4:	4a12      	ldr	r2, [pc, #72]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	58d3      	ldr	r3, [r2, r3]
 80067da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	43da      	mvns	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4013      	ands	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	2380      	movs	r3, #128	@ 0x80
 80067ec:	025b      	lsls	r3, r3, #9
 80067ee:	4013      	ands	r3, r2
 80067f0:	d003      	beq.n	80067fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067fa:	4909      	ldr	r1, [pc, #36]	@ (8006820 <HAL_GPIO_Init+0x2c4>)
 80067fc:	2280      	movs	r2, #128	@ 0x80
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3301      	adds	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	40da      	lsrs	r2, r3
 8006810:	1e13      	subs	r3, r2, #0
 8006812:	d000      	beq.n	8006816 <HAL_GPIO_Init+0x2ba>
 8006814:	e6aa      	b.n	800656c <HAL_GPIO_Init+0x10>
  }
}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	46c0      	nop			@ (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b006      	add	sp, #24
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40021800 	.word	0x40021800
 8006824:	50000400 	.word	0x50000400
 8006828:	50000800 	.word	0x50000800
 800682c:	50000c00 	.word	0x50000c00
 8006830:	50001000 	.word	0x50001000

08006834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	000a      	movs	r2, r1
 800683e:	1cbb      	adds	r3, r7, #2
 8006840:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	1cba      	adds	r2, r7, #2
 8006848:	8812      	ldrh	r2, [r2, #0]
 800684a:	4013      	ands	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800684e:	230f      	movs	r3, #15
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e003      	b.n	8006860 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006858:	230f      	movs	r3, #15
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006860:	230f      	movs	r3, #15
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	781b      	ldrb	r3, [r3, #0]
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b004      	add	sp, #16
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	0008      	movs	r0, r1
 8006878:	0011      	movs	r1, r2
 800687a:	1cbb      	adds	r3, r7, #2
 800687c:	1c02      	adds	r2, r0, #0
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	1c7b      	adds	r3, r7, #1
 8006882:	1c0a      	adds	r2, r1, #0
 8006884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006886:	1c7b      	adds	r3, r7, #1
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800688e:	1cbb      	adds	r3, r7, #2
 8006890:	881a      	ldrh	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006896:	e003      	b.n	80068a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006898:	1cbb      	adds	r3, r7, #2
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80068a0:	46c0      	nop			@ (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b002      	add	sp, #8
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e08f      	b.n	80069da <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2241      	movs	r2, #65	@ 0x41
 80068be:	5c9b      	ldrb	r3, [r3, r2]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2240      	movs	r2, #64	@ 0x40
 80068ca:	2100      	movs	r1, #0
 80068cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fd fbd5 	bl	8004080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2241      	movs	r2, #65	@ 0x41
 80068da:	2124      	movs	r1, #36	@ 0x24
 80068dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2101      	movs	r1, #1
 80068ea:	438a      	bics	r2, r1
 80068ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	493b      	ldr	r1, [pc, #236]	@ (80069e4 <HAL_I2C_Init+0x13c>)
 80068f8:	400a      	ands	r2, r1
 80068fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4938      	ldr	r1, [pc, #224]	@ (80069e8 <HAL_I2C_Init+0x140>)
 8006908:	400a      	ands	r2, r1
 800690a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d108      	bne.n	8006926 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2180      	movs	r1, #128	@ 0x80
 800691e:	0209      	lsls	r1, r1, #8
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
 8006924:	e007      	b.n	8006936 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2184      	movs	r1, #132	@ 0x84
 8006930:	0209      	lsls	r1, r1, #8
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d109      	bne.n	8006952 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2180      	movs	r1, #128	@ 0x80
 800694a:	0109      	lsls	r1, r1, #4
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
 8006950:	e007      	b.n	8006962 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4923      	ldr	r1, [pc, #140]	@ (80069ec <HAL_I2C_Init+0x144>)
 800695e:	400a      	ands	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4920      	ldr	r1, [pc, #128]	@ (80069f0 <HAL_I2C_Init+0x148>)
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	491a      	ldr	r1, [pc, #104]	@ (80069e8 <HAL_I2C_Init+0x140>)
 800697e:	400a      	ands	r2, r1
 8006980:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	431a      	orrs	r2, r3
 800698c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69d9      	ldr	r1, [r3, #28]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1a      	ldr	r2, [r3, #32]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2101      	movs	r1, #1
 80069b8:	430a      	orrs	r2, r1
 80069ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2241      	movs	r2, #65	@ 0x41
 80069c6:	2120      	movs	r1, #32
 80069c8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2242      	movs	r2, #66	@ 0x42
 80069d4:	2100      	movs	r1, #0
 80069d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b002      	add	sp, #8
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	f0ffffff 	.word	0xf0ffffff
 80069e8:	ffff7fff 	.word	0xffff7fff
 80069ec:	fffff7ff 	.word	0xfffff7ff
 80069f0:	02008000 	.word	0x02008000

080069f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2241      	movs	r2, #65	@ 0x41
 8006a02:	5c9b      	ldrb	r3, [r3, r2]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d138      	bne.n	8006a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2240      	movs	r2, #64	@ 0x40
 8006a0e:	5c9b      	ldrb	r3, [r3, r2]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e032      	b.n	8006a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2240      	movs	r2, #64	@ 0x40
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2241      	movs	r2, #65	@ 0x41
 8006a24:	2124      	movs	r1, #36	@ 0x24
 8006a26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2101      	movs	r1, #1
 8006a34:	438a      	bics	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4911      	ldr	r1, [pc, #68]	@ (8006a88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006a44:	400a      	ands	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6819      	ldr	r1, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2101      	movs	r1, #1
 8006a64:	430a      	orrs	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2241      	movs	r2, #65	@ 0x41
 8006a6c:	2120      	movs	r1, #32
 8006a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	@ 0x40
 8006a74:	2100      	movs	r1, #0
 8006a76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	0018      	movs	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	ffffefff 	.word	0xffffefff

08006a8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2241      	movs	r2, #65	@ 0x41
 8006a9a:	5c9b      	ldrb	r3, [r3, r2]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d139      	bne.n	8006b16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2240      	movs	r2, #64	@ 0x40
 8006aa6:	5c9b      	ldrb	r3, [r3, r2]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e033      	b.n	8006b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2240      	movs	r2, #64	@ 0x40
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2241      	movs	r2, #65	@ 0x41
 8006abc:	2124      	movs	r1, #36	@ 0x24
 8006abe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2101      	movs	r1, #1
 8006acc:	438a      	bics	r2, r1
 8006ace:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4a11      	ldr	r2, [pc, #68]	@ (8006b20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2101      	movs	r1, #1
 8006afe:	430a      	orrs	r2, r1
 8006b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2241      	movs	r2, #65	@ 0x41
 8006b06:	2120      	movs	r1, #32
 8006b08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2240      	movs	r2, #64	@ 0x40
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b004      	add	sp, #16
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	fffff0ff 	.word	0xfffff0ff

08006b24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e0ea      	b.n	8006d0c <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a76      	ldr	r2, [pc, #472]	@ (8006d14 <HAL_PCD_Init+0x1f0>)
 8006b3a:	5c9b      	ldrb	r3, [r3, r2]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d108      	bne.n	8006b54 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	23a5      	movs	r3, #165	@ 0xa5
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	2100      	movs	r1, #0
 8006b4a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fd fc5e 	bl	8004410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a6f      	ldr	r2, [pc, #444]	@ (8006d14 <HAL_PCD_Init+0x1f0>)
 8006b58:	2103      	movs	r1, #3
 8006b5a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f002 ff95 	bl	8009a90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b66:	230f      	movs	r3, #15
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e049      	b.n	8006c04 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b70:	200f      	movs	r0, #15
 8006b72:	183b      	adds	r3, r7, r0
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	0013      	movs	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	189b      	adds	r3, r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	18cb      	adds	r3, r1, r3
 8006b82:	3315      	adds	r3, #21
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b88:	183b      	adds	r3, r7, r0
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	0013      	movs	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	18cb      	adds	r3, r1, r3
 8006b98:	3314      	adds	r3, #20
 8006b9a:	183a      	adds	r2, r7, r0
 8006b9c:	7812      	ldrb	r2, [r2, #0]
 8006b9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ba0:	183b      	adds	r3, r7, r0
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	0013      	movs	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	189b      	adds	r3, r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	18cb      	adds	r3, r1, r3
 8006bb0:	3317      	adds	r3, #23
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bb6:	183b      	adds	r3, r7, r0
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	0013      	movs	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	189b      	adds	r3, r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	18cb      	adds	r3, r1, r3
 8006bc6:	3324      	adds	r3, #36	@ 0x24
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006bcc:	183b      	adds	r3, r7, r0
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	0013      	movs	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	18cb      	adds	r3, r1, r3
 8006bdc:	3328      	adds	r3, #40	@ 0x28
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006be2:	183b      	adds	r3, r7, r0
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	0013      	movs	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	18cb      	adds	r3, r1, r3
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bfa:	183b      	adds	r3, r7, r0
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	183b      	adds	r3, r7, r0
 8006c00:	3201      	adds	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	210f      	movs	r1, #15
 8006c0a:	187a      	adds	r2, r7, r1
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3ae      	bcc.n	8006b70 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c12:	187b      	adds	r3, r7, r1
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e056      	b.n	8006cc8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c1a:	240f      	movs	r4, #15
 8006c1c:	193b      	adds	r3, r7, r4
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	2356      	movs	r3, #86	@ 0x56
 8006c24:	33ff      	adds	r3, #255	@ 0xff
 8006c26:	0019      	movs	r1, r3
 8006c28:	0013      	movs	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	189b      	adds	r3, r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	18c3      	adds	r3, r0, r3
 8006c32:	185b      	adds	r3, r3, r1
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c38:	193b      	adds	r3, r7, r4
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	23aa      	movs	r3, #170	@ 0xaa
 8006c40:	0059      	lsls	r1, r3, #1
 8006c42:	0013      	movs	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	18c3      	adds	r3, r0, r3
 8006c4c:	185b      	adds	r3, r3, r1
 8006c4e:	193a      	adds	r2, r7, r4
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c54:	193b      	adds	r3, r7, r4
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	2358      	movs	r3, #88	@ 0x58
 8006c5c:	33ff      	adds	r3, #255	@ 0xff
 8006c5e:	0019      	movs	r1, r3
 8006c60:	0013      	movs	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	189b      	adds	r3, r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	18c3      	adds	r3, r0, r3
 8006c6a:	185b      	adds	r3, r3, r1
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c70:	193b      	adds	r3, r7, r4
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	23b2      	movs	r3, #178	@ 0xb2
 8006c78:	0059      	lsls	r1, r3, #1
 8006c7a:	0013      	movs	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	189b      	adds	r3, r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	18c3      	adds	r3, r0, r3
 8006c84:	185b      	adds	r3, r3, r1
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c8a:	193b      	adds	r3, r7, r4
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	23b4      	movs	r3, #180	@ 0xb4
 8006c92:	0059      	lsls	r1, r3, #1
 8006c94:	0013      	movs	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	189b      	adds	r3, r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	18c3      	adds	r3, r0, r3
 8006c9e:	185b      	adds	r3, r3, r1
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ca4:	193b      	adds	r3, r7, r4
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	23b6      	movs	r3, #182	@ 0xb6
 8006cac:	0059      	lsls	r1, r3, #1
 8006cae:	0013      	movs	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	189b      	adds	r3, r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	18c3      	adds	r3, r0, r3
 8006cb8:	185b      	adds	r3, r3, r1
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cbe:	193b      	adds	r3, r7, r4
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	193b      	adds	r3, r7, r4
 8006cc4:	3201      	adds	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	220f      	movs	r2, #15
 8006cce:	18ba      	adds	r2, r7, r2
 8006cd0:	7812      	ldrb	r2, [r2, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d3a1      	bcc.n	8006c1a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	466a      	mov	r2, sp
 8006cde:	7c19      	ldrb	r1, [r3, #16]
 8006ce0:	7011      	strb	r1, [r2, #0]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f002 ff0b 	bl	8009b02 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a07      	ldr	r2, [pc, #28]	@ (8006d14 <HAL_PCD_Init+0x1f0>)
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7b1b      	ldrb	r3, [r3, #12]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d103      	bne.n	8006d0a <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 f807 	bl	8006d18 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b005      	add	sp, #20
 8006d12:	bd90      	pop	{r4, r7, pc}
 8006d14:	00000295 	.word	0x00000295

08006d18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	23b5      	movs	r3, #181	@ 0xb5
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	23b3      	movs	r3, #179	@ 0xb3
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	2100      	movs	r1, #0
 8006d38:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3e:	2201      	movs	r2, #1
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	0018      	movs	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b004      	add	sp, #16
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006d60:	4b04      	ldr	r3, [pc, #16]	@ (8006d74 <HAL_PWREx_EnableVddUSB+0x18>)
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	4b03      	ldr	r3, [pc, #12]	@ (8006d74 <HAL_PWREx_EnableVddUSB+0x18>)
 8006d66:	2180      	movs	r1, #128	@ 0x80
 8006d68:	00c9      	lsls	r1, r1, #3
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40007000 	.word	0x40007000

08006d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006d80:	4b19      	ldr	r3, [pc, #100]	@ (8006de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	@ (8006dec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	0019      	movs	r1, r3
 8006d8a:	4b17      	ldr	r3, [pc, #92]	@ (8006de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	2380      	movs	r3, #128	@ 0x80
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d11f      	bne.n	8006ddc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006d9c:	4b14      	ldr	r3, [pc, #80]	@ (8006df0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	0013      	movs	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	4912      	ldr	r1, [pc, #72]	@ (8006df4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006daa:	0018      	movs	r0, r3
 8006dac:	f7f9 f9ac 	bl	8000108 <__udivsi3>
 8006db0:	0003      	movs	r3, r0
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006db6:	e008      	b.n	8006dca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e001      	b.n	8006dca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e009      	b.n	8006dde <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dca:	4b07      	ldr	r3, [pc, #28]	@ (8006de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	2380      	movs	r3, #128	@ 0x80
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	2380      	movs	r3, #128	@ 0x80
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d0ed      	beq.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	0018      	movs	r0, r3
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b004      	add	sp, #16
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	46c0      	nop			@ (mov r8, r8)
 8006de8:	40007000 	.word	0x40007000
 8006dec:	fffff9ff 	.word	0xfffff9ff
 8006df0:	2000009c 	.word	0x2000009c
 8006df4:	000f4240 	.word	0x000f4240

08006df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f000 fb50 	bl	80074ac <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	4013      	ands	r3, r2
 8006e14:	d100      	bne.n	8006e18 <HAL_RCC_OscConfig+0x20>
 8006e16:	e07c      	b.n	8006f12 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e18:	4bc3      	ldr	r3, [pc, #780]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2238      	movs	r2, #56	@ 0x38
 8006e1e:	4013      	ands	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e22:	4bc1      	ldr	r3, [pc, #772]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2203      	movs	r2, #3
 8006e28:	4013      	ands	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d102      	bne.n	8006e38 <HAL_RCC_OscConfig+0x40>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d002      	beq.n	8006e3e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d10b      	bne.n	8006e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e3e:	4bba      	ldr	r3, [pc, #744]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	2380      	movs	r3, #128	@ 0x80
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	4013      	ands	r3, r2
 8006e48:	d062      	beq.n	8006f10 <HAL_RCC_OscConfig+0x118>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d15e      	bne.n	8006f10 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e32a      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	2380      	movs	r3, #128	@ 0x80
 8006e5c:	025b      	lsls	r3, r3, #9
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d107      	bne.n	8006e72 <HAL_RCC_OscConfig+0x7a>
 8006e62:	4bb1      	ldr	r3, [pc, #708]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4bb0      	ldr	r3, [pc, #704]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e68:	2180      	movs	r1, #128	@ 0x80
 8006e6a:	0249      	lsls	r1, r1, #9
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e020      	b.n	8006eb4 <HAL_RCC_OscConfig+0xbc>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	23a0      	movs	r3, #160	@ 0xa0
 8006e78:	02db      	lsls	r3, r3, #11
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d10e      	bne.n	8006e9c <HAL_RCC_OscConfig+0xa4>
 8006e7e:	4baa      	ldr	r3, [pc, #680]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4ba9      	ldr	r3, [pc, #676]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e84:	2180      	movs	r1, #128	@ 0x80
 8006e86:	02c9      	lsls	r1, r1, #11
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	4ba5      	ldr	r3, [pc, #660]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e92:	2180      	movs	r1, #128	@ 0x80
 8006e94:	0249      	lsls	r1, r1, #9
 8006e96:	430a      	orrs	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	e00b      	b.n	8006eb4 <HAL_RCC_OscConfig+0xbc>
 8006e9c:	4ba2      	ldr	r3, [pc, #648]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006ea2:	49a2      	ldr	r1, [pc, #648]	@ (800712c <HAL_RCC_OscConfig+0x334>)
 8006ea4:	400a      	ands	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	4b9f      	ldr	r3, [pc, #636]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	4b9e      	ldr	r3, [pc, #632]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006eae:	49a0      	ldr	r1, [pc, #640]	@ (8007130 <HAL_RCC_OscConfig+0x338>)
 8006eb0:	400a      	ands	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d014      	beq.n	8006ee6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fd fbd2 	bl	8004664 <HAL_GetTick>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec6:	f7fd fbcd 	bl	8004664 <HAL_GetTick>
 8006eca:	0002      	movs	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b64      	cmp	r3, #100	@ 0x64
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e2e9      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ed8:	4b93      	ldr	r3, [pc, #588]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0xce>
 8006ee4:	e015      	b.n	8006f12 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee6:	f7fd fbbd 	bl	8004664 <HAL_GetTick>
 8006eea:	0003      	movs	r3, r0
 8006eec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ef0:	f7fd fbb8 	bl	8004664 <HAL_GetTick>
 8006ef4:	0002      	movs	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b64      	cmp	r3, #100	@ 0x64
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e2d4      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f02:	4b89      	ldr	r3, [pc, #548]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0xf8>
 8006f0e:	e000      	b.n	8006f12 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f10:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2202      	movs	r2, #2
 8006f18:	4013      	ands	r3, r2
 8006f1a:	d100      	bne.n	8006f1e <HAL_RCC_OscConfig+0x126>
 8006f1c:	e099      	b.n	8007052 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f1e:	4b82      	ldr	r3, [pc, #520]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2238      	movs	r2, #56	@ 0x38
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f28:	4b7f      	ldr	r3, [pc, #508]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	4013      	ands	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d102      	bne.n	8006f3e <HAL_RCC_OscConfig+0x146>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d002      	beq.n	8006f44 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d135      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f44:	4b78      	ldr	r3, [pc, #480]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2380      	movs	r3, #128	@ 0x80
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d005      	beq.n	8006f5c <HAL_RCC_OscConfig+0x164>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e2a7      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5c:	4b72      	ldr	r3, [pc, #456]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a74      	ldr	r2, [pc, #464]	@ (8007134 <HAL_RCC_OscConfig+0x33c>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	0019      	movs	r1, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	021a      	lsls	r2, r3, #8
 8006f6c:	4b6e      	ldr	r3, [pc, #440]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d112      	bne.n	8006f9e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006f78:	4b6b      	ldr	r3, [pc, #428]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8007138 <HAL_RCC_OscConfig+0x340>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	0019      	movs	r1, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	4b68      	ldr	r3, [pc, #416]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006f8c:	4b66      	ldr	r3, [pc, #408]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	0adb      	lsrs	r3, r3, #11
 8006f92:	2207      	movs	r2, #7
 8006f94:	4013      	ands	r3, r2
 8006f96:	4a69      	ldr	r2, [pc, #420]	@ (800713c <HAL_RCC_OscConfig+0x344>)
 8006f98:	40da      	lsrs	r2, r3
 8006f9a:	4b69      	ldr	r3, [pc, #420]	@ (8007140 <HAL_RCC_OscConfig+0x348>)
 8006f9c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f9e:	4b69      	ldr	r3, [pc, #420]	@ (8007144 <HAL_RCC_OscConfig+0x34c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f7fd fb02 	bl	80045ac <HAL_InitTick>
 8006fa8:	1e03      	subs	r3, r0, #0
 8006faa:	d051      	beq.n	8007050 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e27d      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d030      	beq.n	800701a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a5e      	ldr	r2, [pc, #376]	@ (8007138 <HAL_RCC_OscConfig+0x340>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	0019      	movs	r1, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	4b58      	ldr	r3, [pc, #352]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006fcc:	4b56      	ldr	r3, [pc, #344]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b55      	ldr	r3, [pc, #340]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006fd2:	2180      	movs	r1, #128	@ 0x80
 8006fd4:	0049      	lsls	r1, r1, #1
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fda:	f7fd fb43 	bl	8004664 <HAL_GetTick>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe4:	f7fd fb3e 	bl	8004664 <HAL_GetTick>
 8006fe8:	0002      	movs	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e25a      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	2380      	movs	r3, #128	@ 0x80
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4013      	ands	r3, r2
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007002:	4b49      	ldr	r3, [pc, #292]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4a4b      	ldr	r2, [pc, #300]	@ (8007134 <HAL_RCC_OscConfig+0x33c>)
 8007008:	4013      	ands	r3, r2
 800700a:	0019      	movs	r1, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	021a      	lsls	r2, r3, #8
 8007012:	4b45      	ldr	r3, [pc, #276]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
 8007018:	e01b      	b.n	8007052 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800701a:	4b43      	ldr	r3, [pc, #268]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b42      	ldr	r3, [pc, #264]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8007020:	4949      	ldr	r1, [pc, #292]	@ (8007148 <HAL_RCC_OscConfig+0x350>)
 8007022:	400a      	ands	r2, r1
 8007024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007026:	f7fd fb1d 	bl	8004664 <HAL_GetTick>
 800702a:	0003      	movs	r3, r0
 800702c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007030:	f7fd fb18 	bl	8004664 <HAL_GetTick>
 8007034:	0002      	movs	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e234      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007042:	4b39      	ldr	r3, [pc, #228]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	2380      	movs	r3, #128	@ 0x80
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	4013      	ands	r3, r2
 800704c:	d1f0      	bne.n	8007030 <HAL_RCC_OscConfig+0x238>
 800704e:	e000      	b.n	8007052 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007050:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2208      	movs	r2, #8
 8007058:	4013      	ands	r3, r2
 800705a:	d047      	beq.n	80070ec <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800705c:	4b32      	ldr	r3, [pc, #200]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2238      	movs	r2, #56	@ 0x38
 8007062:	4013      	ands	r3, r2
 8007064:	2b18      	cmp	r3, #24
 8007066:	d10a      	bne.n	800707e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007068:	4b2f      	ldr	r3, [pc, #188]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 800706a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706c:	2202      	movs	r2, #2
 800706e:	4013      	ands	r3, r2
 8007070:	d03c      	beq.n	80070ec <HAL_RCC_OscConfig+0x2f4>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d138      	bne.n	80070ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e216      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d019      	beq.n	80070ba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007086:	4b28      	ldr	r3, [pc, #160]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8007088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800708a:	4b27      	ldr	r3, [pc, #156]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 800708c:	2101      	movs	r1, #1
 800708e:	430a      	orrs	r2, r1
 8007090:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007092:	f7fd fae7 	bl	8004664 <HAL_GetTick>
 8007096:	0003      	movs	r3, r0
 8007098:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709c:	f7fd fae2 	bl	8004664 <HAL_GetTick>
 80070a0:	0002      	movs	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e1fe      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 80070b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b2:	2202      	movs	r2, #2
 80070b4:	4013      	ands	r3, r2
 80070b6:	d0f1      	beq.n	800709c <HAL_RCC_OscConfig+0x2a4>
 80070b8:	e018      	b.n	80070ec <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80070ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 80070bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80070be:	4b1a      	ldr	r3, [pc, #104]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 80070c0:	2101      	movs	r1, #1
 80070c2:	438a      	bics	r2, r1
 80070c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c6:	f7fd facd 	bl	8004664 <HAL_GetTick>
 80070ca:	0003      	movs	r3, r0
 80070cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d0:	f7fd fac8 	bl	8004664 <HAL_GetTick>
 80070d4:	0002      	movs	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e1e4      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070e2:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 80070e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070e6:	2202      	movs	r2, #2
 80070e8:	4013      	ands	r3, r2
 80070ea:	d1f1      	bne.n	80070d0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2204      	movs	r2, #4
 80070f2:	4013      	ands	r3, r2
 80070f4:	d100      	bne.n	80070f8 <HAL_RCC_OscConfig+0x300>
 80070f6:	e0c7      	b.n	8007288 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f8:	231f      	movs	r3, #31
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2238      	movs	r2, #56	@ 0x38
 8007106:	4013      	ands	r3, r2
 8007108:	2b20      	cmp	r3, #32
 800710a:	d11f      	bne.n	800714c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <HAL_RCC_OscConfig+0x330>)
 800710e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007110:	2202      	movs	r2, #2
 8007112:	4013      	ands	r3, r2
 8007114:	d100      	bne.n	8007118 <HAL_RCC_OscConfig+0x320>
 8007116:	e0b7      	b.n	8007288 <HAL_RCC_OscConfig+0x490>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d000      	beq.n	8007122 <HAL_RCC_OscConfig+0x32a>
 8007120:	e0b2      	b.n	8007288 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e1c2      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	40021000 	.word	0x40021000
 800712c:	fffeffff 	.word	0xfffeffff
 8007130:	fffbffff 	.word	0xfffbffff
 8007134:	ffff80ff 	.word	0xffff80ff
 8007138:	ffffc7ff 	.word	0xffffc7ff
 800713c:	00f42400 	.word	0x00f42400
 8007140:	2000009c 	.word	0x2000009c
 8007144:	200000a0 	.word	0x200000a0
 8007148:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800714c:	4bb5      	ldr	r3, [pc, #724]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800714e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	055b      	lsls	r3, r3, #21
 8007154:	4013      	ands	r3, r2
 8007156:	d101      	bne.n	800715c <HAL_RCC_OscConfig+0x364>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_RCC_OscConfig+0x366>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d011      	beq.n	8007186 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007162:	4bb0      	ldr	r3, [pc, #704]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007166:	4baf      	ldr	r3, [pc, #700]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007168:	2180      	movs	r1, #128	@ 0x80
 800716a:	0549      	lsls	r1, r1, #21
 800716c:	430a      	orrs	r2, r1
 800716e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007170:	4bac      	ldr	r3, [pc, #688]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007174:	2380      	movs	r3, #128	@ 0x80
 8007176:	055b      	lsls	r3, r3, #21
 8007178:	4013      	ands	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800717e:	231f      	movs	r3, #31
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	2201      	movs	r2, #1
 8007184:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007186:	4ba8      	ldr	r3, [pc, #672]	@ (8007428 <HAL_RCC_OscConfig+0x630>)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	2380      	movs	r3, #128	@ 0x80
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4013      	ands	r3, r2
 8007190:	d11a      	bne.n	80071c8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007192:	4ba5      	ldr	r3, [pc, #660]	@ (8007428 <HAL_RCC_OscConfig+0x630>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4ba4      	ldr	r3, [pc, #656]	@ (8007428 <HAL_RCC_OscConfig+0x630>)
 8007198:	2180      	movs	r1, #128	@ 0x80
 800719a:	0049      	lsls	r1, r1, #1
 800719c:	430a      	orrs	r2, r1
 800719e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80071a0:	f7fd fa60 	bl	8004664 <HAL_GetTick>
 80071a4:	0003      	movs	r3, r0
 80071a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071aa:	f7fd fa5b 	bl	8004664 <HAL_GetTick>
 80071ae:	0002      	movs	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e177      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071bc:	4b9a      	ldr	r3, [pc, #616]	@ (8007428 <HAL_RCC_OscConfig+0x630>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	2380      	movs	r3, #128	@ 0x80
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4013      	ands	r3, r2
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <HAL_RCC_OscConfig+0x3e6>
 80071d0:	4b94      	ldr	r3, [pc, #592]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80071d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071d4:	4b93      	ldr	r3, [pc, #588]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80071d6:	2101      	movs	r1, #1
 80071d8:	430a      	orrs	r2, r1
 80071da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071dc:	e01c      	b.n	8007218 <HAL_RCC_OscConfig+0x420>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0x408>
 80071e6:	4b8f      	ldr	r3, [pc, #572]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80071e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071ea:	4b8e      	ldr	r3, [pc, #568]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80071ec:	2104      	movs	r1, #4
 80071ee:	430a      	orrs	r2, r1
 80071f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071f2:	4b8c      	ldr	r3, [pc, #560]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80071f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071f6:	4b8b      	ldr	r3, [pc, #556]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80071f8:	2101      	movs	r1, #1
 80071fa:	430a      	orrs	r2, r1
 80071fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071fe:	e00b      	b.n	8007218 <HAL_RCC_OscConfig+0x420>
 8007200:	4b88      	ldr	r3, [pc, #544]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007202:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007204:	4b87      	ldr	r3, [pc, #540]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007206:	2101      	movs	r1, #1
 8007208:	438a      	bics	r2, r1
 800720a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800720c:	4b85      	ldr	r3, [pc, #532]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800720e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007210:	4b84      	ldr	r3, [pc, #528]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007212:	2104      	movs	r1, #4
 8007214:	438a      	bics	r2, r1
 8007216:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d014      	beq.n	800724a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fd fa20 	bl	8004664 <HAL_GetTick>
 8007224:	0003      	movs	r3, r0
 8007226:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007228:	e009      	b.n	800723e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fd fa1b 	bl	8004664 <HAL_GetTick>
 800722e:	0002      	movs	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	4a7d      	ldr	r2, [pc, #500]	@ (800742c <HAL_RCC_OscConfig+0x634>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e136      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723e:	4b79      	ldr	r3, [pc, #484]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007242:	2202      	movs	r2, #2
 8007244:	4013      	ands	r3, r2
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0x432>
 8007248:	e013      	b.n	8007272 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724a:	f7fd fa0b 	bl	8004664 <HAL_GetTick>
 800724e:	0003      	movs	r3, r0
 8007250:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007252:	e009      	b.n	8007268 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007254:	f7fd fa06 	bl	8004664 <HAL_GetTick>
 8007258:	0002      	movs	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	4a73      	ldr	r2, [pc, #460]	@ (800742c <HAL_RCC_OscConfig+0x634>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e121      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007268:	4b6e      	ldr	r3, [pc, #440]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800726a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726c:	2202      	movs	r2, #2
 800726e:	4013      	ands	r3, r2
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007272:	231f      	movs	r3, #31
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d105      	bne.n	8007288 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800727c:	4b69      	ldr	r3, [pc, #420]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800727e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007280:	4b68      	ldr	r3, [pc, #416]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007282:	496b      	ldr	r1, [pc, #428]	@ (8007430 <HAL_RCC_OscConfig+0x638>)
 8007284:	400a      	ands	r2, r1
 8007286:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2220      	movs	r2, #32
 800728e:	4013      	ands	r3, r2
 8007290:	d039      	beq.n	8007306 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01b      	beq.n	80072d2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800729a:	4b62      	ldr	r3, [pc, #392]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b61      	ldr	r3, [pc, #388]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80072a0:	2180      	movs	r1, #128	@ 0x80
 80072a2:	03c9      	lsls	r1, r1, #15
 80072a4:	430a      	orrs	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a8:	f7fd f9dc 	bl	8004664 <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072b2:	f7fd f9d7 	bl	8004664 <HAL_GetTick>
 80072b6:	0002      	movs	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0f3      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80072c4:	4b57      	ldr	r3, [pc, #348]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	2380      	movs	r3, #128	@ 0x80
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	4013      	ands	r3, r2
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x4ba>
 80072d0:	e019      	b.n	8007306 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072d2:	4b54      	ldr	r3, [pc, #336]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b53      	ldr	r3, [pc, #332]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80072d8:	4956      	ldr	r1, [pc, #344]	@ (8007434 <HAL_RCC_OscConfig+0x63c>)
 80072da:	400a      	ands	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072de:	f7fd f9c1 	bl	8004664 <HAL_GetTick>
 80072e2:	0003      	movs	r3, r0
 80072e4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072e8:	f7fd f9bc 	bl	8004664 <HAL_GetTick>
 80072ec:	0002      	movs	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e0d8      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80072fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	2380      	movs	r3, #128	@ 0x80
 8007300:	041b      	lsls	r3, r3, #16
 8007302:	4013      	ands	r3, r2
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d100      	bne.n	8007310 <HAL_RCC_OscConfig+0x518>
 800730e:	e0cc      	b.n	80074aa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007310:	4b44      	ldr	r3, [pc, #272]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2238      	movs	r2, #56	@ 0x38
 8007316:	4013      	ands	r3, r2
 8007318:	2b10      	cmp	r3, #16
 800731a:	d100      	bne.n	800731e <HAL_RCC_OscConfig+0x526>
 800731c:	e07b      	b.n	8007416 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d156      	bne.n	80073d4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007326:	4b3f      	ldr	r3, [pc, #252]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	4b3e      	ldr	r3, [pc, #248]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800732c:	4942      	ldr	r1, [pc, #264]	@ (8007438 <HAL_RCC_OscConfig+0x640>)
 800732e:	400a      	ands	r2, r1
 8007330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007332:	f7fd f997 	bl	8004664 <HAL_GetTick>
 8007336:	0003      	movs	r3, r0
 8007338:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800733c:	f7fd f992 	bl	8004664 <HAL_GetTick>
 8007340:	0002      	movs	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e0ae      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800734e:	4b35      	ldr	r3, [pc, #212]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	2380      	movs	r3, #128	@ 0x80
 8007354:	049b      	lsls	r3, r3, #18
 8007356:	4013      	ands	r3, r2
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800735a:	4b32      	ldr	r3, [pc, #200]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	4a37      	ldr	r2, [pc, #220]	@ (800743c <HAL_RCC_OscConfig+0x644>)
 8007360:	4013      	ands	r3, r2
 8007362:	0019      	movs	r1, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007386:	431a      	orrs	r2, r3
 8007388:	4b26      	ldr	r3, [pc, #152]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800738a:	430a      	orrs	r2, r1
 800738c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800738e:	4b25      	ldr	r3, [pc, #148]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b24      	ldr	r3, [pc, #144]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 8007394:	2180      	movs	r1, #128	@ 0x80
 8007396:	0449      	lsls	r1, r1, #17
 8007398:	430a      	orrs	r2, r1
 800739a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800739c:	4b21      	ldr	r3, [pc, #132]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	4b20      	ldr	r3, [pc, #128]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80073a2:	2180      	movs	r1, #128	@ 0x80
 80073a4:	0549      	lsls	r1, r1, #21
 80073a6:	430a      	orrs	r2, r1
 80073a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073aa:	f7fd f95b 	bl	8004664 <HAL_GetTick>
 80073ae:	0003      	movs	r3, r0
 80073b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fd f956 	bl	8004664 <HAL_GetTick>
 80073b8:	0002      	movs	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e072      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073c6:	4b17      	ldr	r3, [pc, #92]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	2380      	movs	r3, #128	@ 0x80
 80073cc:	049b      	lsls	r3, r3, #18
 80073ce:	4013      	ands	r3, r2
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0x5bc>
 80073d2:	e06a      	b.n	80074aa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d4:	4b13      	ldr	r3, [pc, #76]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	4b12      	ldr	r3, [pc, #72]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80073da:	4917      	ldr	r1, [pc, #92]	@ (8007438 <HAL_RCC_OscConfig+0x640>)
 80073dc:	400a      	ands	r2, r1
 80073de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e0:	f7fd f940 	bl	8004664 <HAL_GetTick>
 80073e4:	0003      	movs	r3, r0
 80073e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ea:	f7fd f93b 	bl	8004664 <HAL_GetTick>
 80073ee:	0002      	movs	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e057      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073fc:	4b09      	ldr	r3, [pc, #36]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	2380      	movs	r3, #128	@ 0x80
 8007402:	049b      	lsls	r3, r3, #18
 8007404:	4013      	ands	r3, r2
 8007406:	d1f0      	bne.n	80073ea <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <HAL_RCC_OscConfig+0x62c>)
 800740e:	490c      	ldr	r1, [pc, #48]	@ (8007440 <HAL_RCC_OscConfig+0x648>)
 8007410:	400a      	ands	r2, r1
 8007412:	60da      	str	r2, [r3, #12]
 8007414:	e049      	b.n	80074aa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d112      	bne.n	8007444 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e044      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
 8007422:	46c0      	nop			@ (mov r8, r8)
 8007424:	40021000 	.word	0x40021000
 8007428:	40007000 	.word	0x40007000
 800742c:	00001388 	.word	0x00001388
 8007430:	efffffff 	.word	0xefffffff
 8007434:	ffbfffff 	.word	0xffbfffff
 8007438:	feffffff 	.word	0xfeffffff
 800743c:	11c1808c 	.word	0x11c1808c
 8007440:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007444:	4b1b      	ldr	r3, [pc, #108]	@ (80074b4 <HAL_RCC_OscConfig+0x6bc>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2203      	movs	r2, #3
 800744e:	401a      	ands	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	429a      	cmp	r2, r3
 8007456:	d126      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2270      	movs	r2, #112	@ 0x70
 800745c:	401a      	ands	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007462:	429a      	cmp	r2, r3
 8007464:	d11f      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	23fe      	movs	r3, #254	@ 0xfe
 800746a:	01db      	lsls	r3, r3, #7
 800746c:	401a      	ands	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007474:	429a      	cmp	r2, r3
 8007476:	d116      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	23f8      	movs	r3, #248	@ 0xf8
 800747c:	039b      	lsls	r3, r3, #14
 800747e:	401a      	ands	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007484:	429a      	cmp	r2, r3
 8007486:	d10e      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	23e0      	movs	r3, #224	@ 0xe0
 800748c:	051b      	lsls	r3, r3, #20
 800748e:	401a      	ands	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007494:	429a      	cmp	r2, r3
 8007496:	d106      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	0f5b      	lsrs	r3, r3, #29
 800749c:	075a      	lsls	r2, r3, #29
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d001      	beq.n	80074aa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b008      	add	sp, #32
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40021000 	.word	0x40021000

080074b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0e9      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074cc:	4b76      	ldr	r3, [pc, #472]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2207      	movs	r2, #7
 80074d2:	4013      	ands	r3, r2
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d91e      	bls.n	8007518 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b73      	ldr	r3, [pc, #460]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2207      	movs	r2, #7
 80074e0:	4393      	bics	r3, r2
 80074e2:	0019      	movs	r1, r3
 80074e4:	4b70      	ldr	r3, [pc, #448]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074ec:	f7fd f8ba 	bl	8004664 <HAL_GetTick>
 80074f0:	0003      	movs	r3, r0
 80074f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80074f4:	e009      	b.n	800750a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074f6:	f7fd f8b5 	bl	8004664 <HAL_GetTick>
 80074fa:	0002      	movs	r2, r0
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	4a6a      	ldr	r2, [pc, #424]	@ (80076ac <HAL_RCC_ClockConfig+0x1f4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d901      	bls.n	800750a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e0ca      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800750a:	4b67      	ldr	r3, [pc, #412]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2207      	movs	r2, #7
 8007510:	4013      	ands	r3, r2
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d1ee      	bne.n	80074f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2202      	movs	r2, #2
 800751e:	4013      	ands	r3, r2
 8007520:	d015      	beq.n	800754e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2204      	movs	r2, #4
 8007528:	4013      	ands	r3, r2
 800752a:	d006      	beq.n	800753a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800752c:	4b60      	ldr	r3, [pc, #384]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	4b5f      	ldr	r3, [pc, #380]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 8007532:	21e0      	movs	r1, #224	@ 0xe0
 8007534:	01c9      	lsls	r1, r1, #7
 8007536:	430a      	orrs	r2, r1
 8007538:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800753a:	4b5d      	ldr	r3, [pc, #372]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	4a5d      	ldr	r2, [pc, #372]	@ (80076b4 <HAL_RCC_ClockConfig+0x1fc>)
 8007540:	4013      	ands	r3, r2
 8007542:	0019      	movs	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	4b59      	ldr	r3, [pc, #356]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 800754a:	430a      	orrs	r2, r1
 800754c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2201      	movs	r2, #1
 8007554:	4013      	ands	r3, r2
 8007556:	d057      	beq.n	8007608 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d107      	bne.n	8007570 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007560:	4b53      	ldr	r3, [pc, #332]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	2380      	movs	r3, #128	@ 0x80
 8007566:	029b      	lsls	r3, r3, #10
 8007568:	4013      	ands	r3, r2
 800756a:	d12b      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e097      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d107      	bne.n	8007588 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007578:	4b4d      	ldr	r3, [pc, #308]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	2380      	movs	r3, #128	@ 0x80
 800757e:	049b      	lsls	r3, r3, #18
 8007580:	4013      	ands	r3, r2
 8007582:	d11f      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e08b      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007590:	4b47      	ldr	r3, [pc, #284]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	2380      	movs	r3, #128	@ 0x80
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4013      	ands	r3, r2
 800759a:	d113      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e07f      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d106      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075a8:	4b41      	ldr	r3, [pc, #260]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 80075aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ac:	2202      	movs	r2, #2
 80075ae:	4013      	ands	r3, r2
 80075b0:	d108      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e074      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075b6:	4b3e      	ldr	r3, [pc, #248]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 80075b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ba:	2202      	movs	r2, #2
 80075bc:	4013      	ands	r3, r2
 80075be:	d101      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e06d      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075c4:	4b3a      	ldr	r3, [pc, #232]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2207      	movs	r2, #7
 80075ca:	4393      	bics	r3, r2
 80075cc:	0019      	movs	r1, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	4b37      	ldr	r3, [pc, #220]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d8:	f7fd f844 	bl	8004664 <HAL_GetTick>
 80075dc:	0003      	movs	r3, r0
 80075de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e0:	e009      	b.n	80075f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e2:	f7fd f83f 	bl	8004664 <HAL_GetTick>
 80075e6:	0002      	movs	r2, r0
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	4a2f      	ldr	r2, [pc, #188]	@ (80076ac <HAL_RCC_ClockConfig+0x1f4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e054      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f6:	4b2e      	ldr	r3, [pc, #184]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2238      	movs	r2, #56	@ 0x38
 80075fc:	401a      	ands	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	429a      	cmp	r2, r3
 8007606:	d1ec      	bne.n	80075e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007608:	4b27      	ldr	r3, [pc, #156]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2207      	movs	r2, #7
 800760e:	4013      	ands	r3, r2
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d21e      	bcs.n	8007654 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007616:	4b24      	ldr	r3, [pc, #144]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2207      	movs	r2, #7
 800761c:	4393      	bics	r3, r2
 800761e:	0019      	movs	r1, r3
 8007620:	4b21      	ldr	r3, [pc, #132]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007628:	f7fd f81c 	bl	8004664 <HAL_GetTick>
 800762c:	0003      	movs	r3, r0
 800762e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007630:	e009      	b.n	8007646 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007632:	f7fd f817 	bl	8004664 <HAL_GetTick>
 8007636:	0002      	movs	r2, r0
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ac <HAL_RCC_ClockConfig+0x1f4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e02c      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007646:	4b18      	ldr	r3, [pc, #96]	@ (80076a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2207      	movs	r2, #7
 800764c:	4013      	ands	r3, r2
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d1ee      	bne.n	8007632 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2204      	movs	r2, #4
 800765a:	4013      	ands	r3, r2
 800765c:	d009      	beq.n	8007672 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800765e:	4b14      	ldr	r3, [pc, #80]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	4a15      	ldr	r2, [pc, #84]	@ (80076b8 <HAL_RCC_ClockConfig+0x200>)
 8007664:	4013      	ands	r3, r2
 8007666:	0019      	movs	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	4b10      	ldr	r3, [pc, #64]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 800766e:	430a      	orrs	r2, r1
 8007670:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007672:	f000 f829 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8007676:	0001      	movs	r1, r0
 8007678:	4b0d      	ldr	r3, [pc, #52]	@ (80076b0 <HAL_RCC_ClockConfig+0x1f8>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	0a1b      	lsrs	r3, r3, #8
 800767e:	220f      	movs	r2, #15
 8007680:	401a      	ands	r2, r3
 8007682:	4b0e      	ldr	r3, [pc, #56]	@ (80076bc <HAL_RCC_ClockConfig+0x204>)
 8007684:	0092      	lsls	r2, r2, #2
 8007686:	58d3      	ldr	r3, [r2, r3]
 8007688:	221f      	movs	r2, #31
 800768a:	4013      	ands	r3, r2
 800768c:	000a      	movs	r2, r1
 800768e:	40da      	lsrs	r2, r3
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <HAL_RCC_ClockConfig+0x208>)
 8007692:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007694:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <HAL_RCC_ClockConfig+0x20c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	0018      	movs	r0, r3
 800769a:	f7fc ff87 	bl	80045ac <HAL_InitTick>
 800769e:	0003      	movs	r3, r0
}
 80076a0:	0018      	movs	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	b004      	add	sp, #16
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40022000 	.word	0x40022000
 80076ac:	00001388 	.word	0x00001388
 80076b0:	40021000 	.word	0x40021000
 80076b4:	fffff0ff 	.word	0xfffff0ff
 80076b8:	ffff8fff 	.word	0xffff8fff
 80076bc:	08009db0 	.word	0x08009db0
 80076c0:	2000009c 	.word	0x2000009c
 80076c4:	200000a0 	.word	0x200000a0

080076c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076ce:	4b3c      	ldr	r3, [pc, #240]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2238      	movs	r2, #56	@ 0x38
 80076d4:	4013      	ands	r3, r2
 80076d6:	d10f      	bne.n	80076f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80076d8:	4b39      	ldr	r3, [pc, #228]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	0adb      	lsrs	r3, r3, #11
 80076de:	2207      	movs	r2, #7
 80076e0:	4013      	ands	r3, r2
 80076e2:	2201      	movs	r2, #1
 80076e4:	409a      	lsls	r2, r3
 80076e6:	0013      	movs	r3, r2
 80076e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	4835      	ldr	r0, [pc, #212]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80076ee:	f7f8 fd0b 	bl	8000108 <__udivsi3>
 80076f2:	0003      	movs	r3, r0
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	e05d      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076f8:	4b31      	ldr	r3, [pc, #196]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2238      	movs	r2, #56	@ 0x38
 80076fe:	4013      	ands	r3, r2
 8007700:	2b08      	cmp	r3, #8
 8007702:	d102      	bne.n	800770a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007704:	4b2f      	ldr	r3, [pc, #188]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	e054      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800770a:	4b2d      	ldr	r3, [pc, #180]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2238      	movs	r2, #56	@ 0x38
 8007710:	4013      	ands	r3, r2
 8007712:	2b10      	cmp	r3, #16
 8007714:	d138      	bne.n	8007788 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007716:	4b2a      	ldr	r3, [pc, #168]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	2203      	movs	r2, #3
 800771c:	4013      	ands	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007720:	4b27      	ldr	r3, [pc, #156]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	2207      	movs	r2, #7
 8007728:	4013      	ands	r3, r2
 800772a:	3301      	adds	r3, #1
 800772c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b03      	cmp	r3, #3
 8007732:	d10d      	bne.n	8007750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4823      	ldr	r0, [pc, #140]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007738:	f7f8 fce6 	bl	8000108 <__udivsi3>
 800773c:	0003      	movs	r3, r0
 800773e:	0019      	movs	r1, r3
 8007740:	4b1f      	ldr	r3, [pc, #124]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	0a1b      	lsrs	r3, r3, #8
 8007746:	227f      	movs	r2, #127	@ 0x7f
 8007748:	4013      	ands	r3, r2
 800774a:	434b      	muls	r3, r1
 800774c:	617b      	str	r3, [r7, #20]
        break;
 800774e:	e00d      	b.n	800776c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	481c      	ldr	r0, [pc, #112]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007754:	f7f8 fcd8 	bl	8000108 <__udivsi3>
 8007758:	0003      	movs	r3, r0
 800775a:	0019      	movs	r1, r3
 800775c:	4b18      	ldr	r3, [pc, #96]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	0a1b      	lsrs	r3, r3, #8
 8007762:	227f      	movs	r2, #127	@ 0x7f
 8007764:	4013      	ands	r3, r2
 8007766:	434b      	muls	r3, r1
 8007768:	617b      	str	r3, [r7, #20]
        break;
 800776a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800776c:	4b14      	ldr	r3, [pc, #80]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	0f5b      	lsrs	r3, r3, #29
 8007772:	2207      	movs	r2, #7
 8007774:	4013      	ands	r3, r2
 8007776:	3301      	adds	r3, #1
 8007778:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	6978      	ldr	r0, [r7, #20]
 800777e:	f7f8 fcc3 	bl	8000108 <__udivsi3>
 8007782:	0003      	movs	r3, r0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e015      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007788:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2238      	movs	r2, #56	@ 0x38
 800778e:	4013      	ands	r3, r2
 8007790:	2b20      	cmp	r3, #32
 8007792:	d103      	bne.n	800779c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007794:	2380      	movs	r3, #128	@ 0x80
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	e00b      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800779c:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2238      	movs	r2, #56	@ 0x38
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b18      	cmp	r3, #24
 80077a6:	d103      	bne.n	80077b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80077a8:	23fa      	movs	r3, #250	@ 0xfa
 80077aa:	01db      	lsls	r3, r3, #7
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	e001      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80077b4:	693b      	ldr	r3, [r7, #16]
}
 80077b6:	0018      	movs	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b006      	add	sp, #24
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	40021000 	.word	0x40021000
 80077c4:	00f42400 	.word	0x00f42400

080077c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80077d0:	2313      	movs	r3, #19
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077d8:	2312      	movs	r3, #18
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	2200      	movs	r2, #0
 80077de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	029b      	lsls	r3, r3, #10
 80077e8:	4013      	ands	r3, r2
 80077ea:	d100      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80077ec:	e0ad      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ee:	2011      	movs	r0, #17
 80077f0:	183b      	adds	r3, r7, r0
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077f6:	4b47      	ldr	r3, [pc, #284]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80077f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077fa:	2380      	movs	r3, #128	@ 0x80
 80077fc:	055b      	lsls	r3, r3, #21
 80077fe:	4013      	ands	r3, r2
 8007800:	d110      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007802:	4b44      	ldr	r3, [pc, #272]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007806:	4b43      	ldr	r3, [pc, #268]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007808:	2180      	movs	r1, #128	@ 0x80
 800780a:	0549      	lsls	r1, r1, #21
 800780c:	430a      	orrs	r2, r1
 800780e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007810:	4b40      	ldr	r3, [pc, #256]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007814:	2380      	movs	r3, #128	@ 0x80
 8007816:	055b      	lsls	r3, r3, #21
 8007818:	4013      	ands	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800781e:	183b      	adds	r3, r7, r0
 8007820:	2201      	movs	r2, #1
 8007822:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007824:	4b3c      	ldr	r3, [pc, #240]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	4b3b      	ldr	r3, [pc, #236]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800782a:	2180      	movs	r1, #128	@ 0x80
 800782c:	0049      	lsls	r1, r1, #1
 800782e:	430a      	orrs	r2, r1
 8007830:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007832:	f7fc ff17 	bl	8004664 <HAL_GetTick>
 8007836:	0003      	movs	r3, r0
 8007838:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800783a:	e00b      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800783c:	f7fc ff12 	bl	8004664 <HAL_GetTick>
 8007840:	0002      	movs	r2, r0
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d904      	bls.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800784a:	2313      	movs	r3, #19
 800784c:	18fb      	adds	r3, r7, r3
 800784e:	2203      	movs	r2, #3
 8007850:	701a      	strb	r2, [r3, #0]
        break;
 8007852:	e005      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007854:	4b30      	ldr	r3, [pc, #192]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4013      	ands	r3, r2
 800785e:	d0ed      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007860:	2313      	movs	r3, #19
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d15e      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800786a:	4b2a      	ldr	r3, [pc, #168]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800786c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800786e:	23c0      	movs	r3, #192	@ 0xc0
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4013      	ands	r3, r2
 8007874:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d019      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	429a      	cmp	r2, r3
 8007884:	d014      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007886:	4b23      	ldr	r3, [pc, #140]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788a:	4a24      	ldr	r2, [pc, #144]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800788c:	4013      	ands	r3, r2
 800788e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007890:	4b20      	ldr	r3, [pc, #128]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007894:	4b1f      	ldr	r3, [pc, #124]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007896:	2180      	movs	r1, #128	@ 0x80
 8007898:	0249      	lsls	r1, r1, #9
 800789a:	430a      	orrs	r2, r1
 800789c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800789e:	4b1d      	ldr	r3, [pc, #116]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078a4:	491e      	ldr	r1, [pc, #120]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80078a6:	400a      	ands	r2, r1
 80078a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2201      	movs	r2, #1
 80078b4:	4013      	ands	r3, r2
 80078b6:	d016      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fc fed4 	bl	8004664 <HAL_GetTick>
 80078bc:	0003      	movs	r3, r0
 80078be:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078c0:	e00c      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f7fc fecf 	bl	8004664 <HAL_GetTick>
 80078c6:	0002      	movs	r2, r0
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	4a15      	ldr	r2, [pc, #84]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d904      	bls.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80078d2:	2313      	movs	r3, #19
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	2203      	movs	r2, #3
 80078d8:	701a      	strb	r2, [r3, #0]
            break;
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e0:	2202      	movs	r2, #2
 80078e2:	4013      	ands	r3, r2
 80078e4:	d0ed      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80078e6:	2313      	movs	r3, #19
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078f0:	4b08      	ldr	r3, [pc, #32]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80078f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f4:	4a09      	ldr	r2, [pc, #36]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	0019      	movs	r1, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007900:	430a      	orrs	r2, r1
 8007902:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007904:	e016      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007906:	2312      	movs	r3, #18
 8007908:	18fb      	adds	r3, r7, r3
 800790a:	2213      	movs	r2, #19
 800790c:	18ba      	adds	r2, r7, r2
 800790e:	7812      	ldrb	r2, [r2, #0]
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	e00f      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007914:	40021000 	.word	0x40021000
 8007918:	40007000 	.word	0x40007000
 800791c:	fffffcff 	.word	0xfffffcff
 8007920:	fffeffff 	.word	0xfffeffff
 8007924:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	2312      	movs	r3, #18
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	2213      	movs	r2, #19
 800792e:	18ba      	adds	r2, r7, r2
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007934:	2311      	movs	r3, #17
 8007936:	18fb      	adds	r3, r7, r3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d105      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800793e:	4bb6      	ldr	r3, [pc, #728]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007942:	4bb5      	ldr	r3, [pc, #724]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007944:	49b5      	ldr	r1, [pc, #724]	@ (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8007946:	400a      	ands	r2, r1
 8007948:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2201      	movs	r2, #1
 8007950:	4013      	ands	r3, r2
 8007952:	d009      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007954:	4bb0      	ldr	r3, [pc, #704]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007958:	2203      	movs	r2, #3
 800795a:	4393      	bics	r3, r2
 800795c:	0019      	movs	r1, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	4bad      	ldr	r3, [pc, #692]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007964:	430a      	orrs	r2, r1
 8007966:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2202      	movs	r2, #2
 800796e:	4013      	ands	r3, r2
 8007970:	d009      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007972:	4ba9      	ldr	r3, [pc, #676]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007976:	220c      	movs	r2, #12
 8007978:	4393      	bics	r3, r2
 800797a:	0019      	movs	r1, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	4ba5      	ldr	r3, [pc, #660]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007982:	430a      	orrs	r2, r1
 8007984:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2204      	movs	r2, #4
 800798c:	4013      	ands	r3, r2
 800798e:	d009      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007990:	4ba1      	ldr	r3, [pc, #644]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007994:	2230      	movs	r2, #48	@ 0x30
 8007996:	4393      	bics	r3, r2
 8007998:	0019      	movs	r1, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	4b9e      	ldr	r3, [pc, #632]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079a0:	430a      	orrs	r2, r1
 80079a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2210      	movs	r2, #16
 80079aa:	4013      	ands	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079ae:	4b9a      	ldr	r3, [pc, #616]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b2:	4a9b      	ldr	r2, [pc, #620]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	0019      	movs	r1, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	4b96      	ldr	r3, [pc, #600]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079be:	430a      	orrs	r2, r1
 80079c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	2380      	movs	r3, #128	@ 0x80
 80079c8:	015b      	lsls	r3, r3, #5
 80079ca:	4013      	ands	r3, r2
 80079cc:	d009      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80079ce:	4b92      	ldr	r3, [pc, #584]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d2:	4a94      	ldr	r2, [pc, #592]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	695a      	ldr	r2, [r3, #20]
 80079dc:	4b8e      	ldr	r3, [pc, #568]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079de:	430a      	orrs	r2, r1
 80079e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	2380      	movs	r3, #128	@ 0x80
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4013      	ands	r3, r2
 80079ec:	d009      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f2:	4a8d      	ldr	r2, [pc, #564]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	0019      	movs	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079fc:	4b86      	ldr	r3, [pc, #536]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80079fe:	430a      	orrs	r2, r1
 8007a00:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	2380      	movs	r3, #128	@ 0x80
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a0e:	4b82      	ldr	r3, [pc, #520]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	4a86      	ldr	r2, [pc, #536]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	0019      	movs	r1, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2220      	movs	r2, #32
 8007a28:	4013      	ands	r3, r2
 8007a2a:	d009      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a2c:	4b7a      	ldr	r3, [pc, #488]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a30:	4a7f      	ldr	r2, [pc, #508]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	0019      	movs	r1, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	4b77      	ldr	r3, [pc, #476]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2240      	movs	r2, #64	@ 0x40
 8007a46:	4013      	ands	r3, r2
 8007a48:	d009      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a4a:	4b73      	ldr	r3, [pc, #460]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	4a79      	ldr	r2, [pc, #484]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	0019      	movs	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	4b6f      	ldr	r3, [pc, #444]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	2380      	movs	r3, #128	@ 0x80
 8007a64:	01db      	lsls	r3, r3, #7
 8007a66:	4013      	ands	r3, r2
 8007a68:	d015      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a6a:	4b6b      	ldr	r3, [pc, #428]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	0899      	lsrs	r1, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a76:	4b68      	ldr	r3, [pc, #416]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a80:	2380      	movs	r3, #128	@ 0x80
 8007a82:	05db      	lsls	r3, r3, #23
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d106      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007a88:	4b63      	ldr	r3, [pc, #396]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	4b62      	ldr	r3, [pc, #392]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a8e:	2180      	movs	r1, #128	@ 0x80
 8007a90:	0249      	lsls	r1, r1, #9
 8007a92:	430a      	orrs	r2, r1
 8007a94:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	2380      	movs	r3, #128	@ 0x80
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d009      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa6:	2240      	movs	r2, #64	@ 0x40
 8007aa8:	4393      	bics	r3, r2
 8007aaa:	0019      	movs	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ab0:	4b59      	ldr	r3, [pc, #356]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	2380      	movs	r3, #128	@ 0x80
 8007abc:	039b      	lsls	r3, r3, #14
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d016      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ac2:	4b55      	ldr	r3, [pc, #340]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	0019      	movs	r1, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ad0:	4b51      	ldr	r3, [pc, #324]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ada:	2380      	movs	r3, #128	@ 0x80
 8007adc:	03db      	lsls	r3, r3, #15
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d106      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ae8:	2180      	movs	r1, #128	@ 0x80
 8007aea:	0449      	lsls	r1, r1, #17
 8007aec:	430a      	orrs	r2, r1
 8007aee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	2380      	movs	r3, #128	@ 0x80
 8007af6:	03db      	lsls	r3, r3, #15
 8007af8:	4013      	ands	r3, r2
 8007afa:	d016      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007afc:	4b46      	ldr	r3, [pc, #280]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b00:	4a4e      	ldr	r2, [pc, #312]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	0019      	movs	r1, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b0a:	4b43      	ldr	r3, [pc, #268]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b14:	2380      	movs	r3, #128	@ 0x80
 8007b16:	045b      	lsls	r3, r3, #17
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	4b3d      	ldr	r3, [pc, #244]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b22:	2180      	movs	r1, #128	@ 0x80
 8007b24:	0449      	lsls	r1, r1, #17
 8007b26:	430a      	orrs	r2, r1
 8007b28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	2380      	movs	r3, #128	@ 0x80
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	4013      	ands	r3, r2
 8007b34:	d014      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007b36:	4b38      	ldr	r3, [pc, #224]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	4393      	bics	r3, r2
 8007b3e:	0019      	movs	r1, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1a      	ldr	r2, [r3, #32]
 8007b44:	4b34      	ldr	r3, [pc, #208]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b46:	430a      	orrs	r2, r1
 8007b48:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d106      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b52:	4b31      	ldr	r3, [pc, #196]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	4b30      	ldr	r3, [pc, #192]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b58:	2180      	movs	r1, #128	@ 0x80
 8007b5a:	0249      	lsls	r1, r1, #9
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	019b      	lsls	r3, r3, #6
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d014      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b70:	220c      	movs	r2, #12
 8007b72:	4393      	bics	r3, r2
 8007b74:	0019      	movs	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b7a:	4b27      	ldr	r3, [pc, #156]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d106      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b88:	4b23      	ldr	r3, [pc, #140]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	4b22      	ldr	r3, [pc, #136]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b8e:	2180      	movs	r1, #128	@ 0x80
 8007b90:	0249      	lsls	r1, r1, #9
 8007b92:	430a      	orrs	r2, r1
 8007b94:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	2380      	movs	r3, #128	@ 0x80
 8007b9c:	045b      	lsls	r3, r3, #17
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	d016      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba6:	4a22      	ldr	r2, [pc, #136]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	0019      	movs	r1, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bb0:	4b19      	ldr	r3, [pc, #100]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bba:	2380      	movs	r3, #128	@ 0x80
 8007bbc:	019b      	lsls	r3, r3, #6
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d106      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007bc2:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	4b14      	ldr	r3, [pc, #80]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bc8:	2180      	movs	r1, #128	@ 0x80
 8007bca:	0449      	lsls	r1, r1, #17
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	2380      	movs	r3, #128	@ 0x80
 8007bd6:	049b      	lsls	r3, r3, #18
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d016      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be0:	4a10      	ldr	r2, [pc, #64]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	0019      	movs	r1, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bea:	4b0b      	ldr	r3, [pc, #44]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bec:	430a      	orrs	r2, r1
 8007bee:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bf4:	2380      	movs	r3, #128	@ 0x80
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007bfc:	4b06      	ldr	r3, [pc, #24]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c02:	2180      	movs	r1, #128	@ 0x80
 8007c04:	0449      	lsls	r1, r1, #17
 8007c06:	430a      	orrs	r2, r1
 8007c08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007c0a:	2312      	movs	r3, #18
 8007c0c:	18fb      	adds	r3, r7, r3
 8007c0e:	781b      	ldrb	r3, [r3, #0]
}
 8007c10:	0018      	movs	r0, r3
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b006      	add	sp, #24
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	efffffff 	.word	0xefffffff
 8007c20:	fffff3ff 	.word	0xfffff3ff
 8007c24:	fffffcff 	.word	0xfffffcff
 8007c28:	fff3ffff 	.word	0xfff3ffff
 8007c2c:	ffcfffff 	.word	0xffcfffff
 8007c30:	ffffcfff 	.word	0xffffcfff
 8007c34:	ffff3fff 	.word	0xffff3fff
 8007c38:	ffbfffff 	.word	0xffbfffff
 8007c3c:	feffffff 	.word	0xfeffffff

08007c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e0a8      	b.n	8007da4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	2382      	movs	r3, #130	@ 0x82
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d009      	beq.n	8007c7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	61da      	str	r2, [r3, #28]
 8007c6c:	e005      	b.n	8007c7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	225d      	movs	r2, #93	@ 0x5d
 8007c84:	5c9b      	ldrb	r3, [r3, r2]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d107      	bne.n	8007c9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	225c      	movs	r2, #92	@ 0x5c
 8007c90:	2100      	movs	r1, #0
 8007c92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	0018      	movs	r0, r3
 8007c98:	f7fc fa54 	bl	8004144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	225d      	movs	r2, #93	@ 0x5d
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2140      	movs	r1, #64	@ 0x40
 8007cb0:	438a      	bics	r2, r1
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	23e0      	movs	r3, #224	@ 0xe0
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d902      	bls.n	8007cc6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e002      	b.n	8007ccc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007cc6:	2380      	movs	r3, #128	@ 0x80
 8007cc8:	015b      	lsls	r3, r3, #5
 8007cca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	23f0      	movs	r3, #240	@ 0xf0
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d008      	beq.n	8007cea <HAL_SPI_Init+0xaa>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	23e0      	movs	r3, #224	@ 0xe0
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d002      	beq.n	8007cea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	2382      	movs	r3, #130	@ 0x82
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6899      	ldr	r1, [r3, #8]
 8007cf8:	2384      	movs	r3, #132	@ 0x84
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	400b      	ands	r3, r1
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2102      	movs	r1, #2
 8007d06:	400b      	ands	r3, r1
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	400b      	ands	r3, r1
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6999      	ldr	r1, [r3, #24]
 8007d18:	2380      	movs	r3, #128	@ 0x80
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	400b      	ands	r3, r1
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	2138      	movs	r1, #56	@ 0x38
 8007d26:	400b      	ands	r3, r1
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	2180      	movs	r1, #128	@ 0x80
 8007d30:	400b      	ands	r3, r1
 8007d32:	431a      	orrs	r2, r3
 8007d34:	0011      	movs	r1, r2
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d3a:	2380      	movs	r3, #128	@ 0x80
 8007d3c:	019b      	lsls	r3, r3, #6
 8007d3e:	401a      	ands	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	2204      	movs	r2, #4
 8007d50:	401a      	ands	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	2110      	movs	r1, #16
 8007d58:	400b      	ands	r3, r1
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d60:	2108      	movs	r1, #8
 8007d62:	400b      	ands	r3, r1
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68d9      	ldr	r1, [r3, #12]
 8007d6a:	23f0      	movs	r3, #240	@ 0xf0
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	400b      	ands	r3, r1
 8007d70:	431a      	orrs	r2, r3
 8007d72:	0011      	movs	r1, r2
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	2380      	movs	r3, #128	@ 0x80
 8007d78:	015b      	lsls	r3, r3, #5
 8007d7a:	401a      	ands	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69da      	ldr	r2, [r3, #28]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4907      	ldr	r1, [pc, #28]	@ (8007dac <HAL_SPI_Init+0x16c>)
 8007d90:	400a      	ands	r2, r1
 8007d92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	225d      	movs	r2, #93	@ 0x5d
 8007d9e:	2101      	movs	r1, #1
 8007da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	0018      	movs	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	b004      	add	sp, #16
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	fffff7ff 	.word	0xfffff7ff

08007db0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	1dbb      	adds	r3, r7, #6
 8007dbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007dc0:	231f      	movs	r3, #31
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	225c      	movs	r2, #92	@ 0x5c
 8007dcc:	5c9b      	ldrb	r3, [r3, r2]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_SPI_Transmit+0x26>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e147      	b.n	8008066 <HAL_SPI_Transmit+0x2b6>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	225c      	movs	r2, #92	@ 0x5c
 8007dda:	2101      	movs	r1, #1
 8007ddc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dde:	f7fc fc41 	bl	8004664 <HAL_GetTick>
 8007de2:	0003      	movs	r3, r0
 8007de4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007de6:	2316      	movs	r3, #22
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	1dba      	adds	r2, r7, #6
 8007dec:	8812      	ldrh	r2, [r2, #0]
 8007dee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	225d      	movs	r2, #93	@ 0x5d
 8007df4:	5c9b      	ldrb	r3, [r3, r2]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d004      	beq.n	8007e06 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007dfc:	231f      	movs	r3, #31
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	2202      	movs	r2, #2
 8007e02:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e04:	e128      	b.n	8008058 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_SPI_Transmit+0x64>
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007e14:	231f      	movs	r3, #31
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	2201      	movs	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e1c:	e11c      	b.n	8008058 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	225d      	movs	r2, #93	@ 0x5d
 8007e22:	2103      	movs	r1, #3
 8007e24:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1dba      	adds	r2, r7, #6
 8007e36:	8812      	ldrh	r2, [r2, #0]
 8007e38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	1dba      	adds	r2, r7, #6
 8007e3e:	8812      	ldrh	r2, [r2, #0]
 8007e40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2244      	movs	r2, #68	@ 0x44
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2246      	movs	r2, #70	@ 0x46
 8007e54:	2100      	movs	r1, #0
 8007e56:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	2380      	movs	r3, #128	@ 0x80
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d110      	bne.n	8007e92 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2140      	movs	r1, #64	@ 0x40
 8007e7c:	438a      	bics	r2, r1
 8007e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2180      	movs	r1, #128	@ 0x80
 8007e8c:	01c9      	lsls	r1, r1, #7
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2240      	movs	r2, #64	@ 0x40
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b40      	cmp	r3, #64	@ 0x40
 8007e9e:	d007      	beq.n	8007eb0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2140      	movs	r1, #64	@ 0x40
 8007eac:	430a      	orrs	r2, r1
 8007eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	23e0      	movs	r3, #224	@ 0xe0
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d952      	bls.n	8007f62 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <HAL_SPI_Transmit+0x11e>
 8007ec4:	2316      	movs	r3, #22
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d143      	bne.n	8007f56 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ef2:	e030      	b.n	8007f56 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2202      	movs	r2, #2
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d112      	bne.n	8007f28 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f12:	1c9a      	adds	r2, r3, #2
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f26:	e016      	b.n	8007f56 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f28:	f7fc fb9c 	bl	8004664 <HAL_GetTick>
 8007f2c:	0002      	movs	r2, r0
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d802      	bhi.n	8007f3e <HAL_SPI_Transmit+0x18e>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	d102      	bne.n	8007f44 <HAL_SPI_Transmit+0x194>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d108      	bne.n	8007f56 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007f44:	231f      	movs	r3, #31
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	2203      	movs	r2, #3
 8007f4a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	225d      	movs	r2, #93	@ 0x5d
 8007f50:	2101      	movs	r1, #1
 8007f52:	5499      	strb	r1, [r3, r2]
          goto error;
 8007f54:	e080      	b.n	8008058 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1c9      	bne.n	8007ef4 <HAL_SPI_Transmit+0x144>
 8007f60:	e053      	b.n	800800a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <HAL_SPI_Transmit+0x1c4>
 8007f6a:	2316      	movs	r3, #22
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d145      	bne.n	8008000 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	7812      	ldrb	r2, [r2, #0]
 8007f80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007f9a:	e031      	b.n	8008000 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d113      	bne.n	8007fd2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007fd0:	e016      	b.n	8008000 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fd2:	f7fc fb47 	bl	8004664 <HAL_GetTick>
 8007fd6:	0002      	movs	r2, r0
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d802      	bhi.n	8007fe8 <HAL_SPI_Transmit+0x238>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	d102      	bne.n	8007fee <HAL_SPI_Transmit+0x23e>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d108      	bne.n	8008000 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007fee:	231f      	movs	r3, #31
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	225d      	movs	r2, #93	@ 0x5d
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	5499      	strb	r1, [r3, r2]
          goto error;
 8007ffe:	e02b      	b.n	8008058 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1c8      	bne.n	8007f9c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	0018      	movs	r0, r3
 8008012:	f000 fcef 	bl	80089f4 <SPI_EndRxTxTransaction>
 8008016:	1e03      	subs	r3, r0, #0
 8008018:	d002      	beq.n	8008020 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008028:	2300      	movs	r3, #0
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8008046:	231f      	movs	r3, #31
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	225d      	movs	r2, #93	@ 0x5d
 8008054:	2101      	movs	r1, #1
 8008056:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	225c      	movs	r2, #92	@ 0x5c
 800805c:	2100      	movs	r1, #0
 800805e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008060:	231f      	movs	r3, #31
 8008062:	18fb      	adds	r3, r7, r3
 8008064:	781b      	ldrb	r3, [r3, #0]
}
 8008066:	0018      	movs	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	b008      	add	sp, #32
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008070:	b590      	push	{r4, r7, lr}
 8008072:	b089      	sub	sp, #36	@ 0x24
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	1dbb      	adds	r3, r7, #6
 800807e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008080:	2117      	movs	r1, #23
 8008082:	187b      	adds	r3, r7, r1
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	225d      	movs	r2, #93	@ 0x5d
 800808c:	5c9b      	ldrb	r3, [r3, r2]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d003      	beq.n	800809c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8008094:	187b      	adds	r3, r7, r1
 8008096:	2202      	movs	r2, #2
 8008098:	701a      	strb	r2, [r3, #0]
    goto error;
 800809a:	e12b      	b.n	80082f4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	2382      	movs	r3, #130	@ 0x82
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d113      	bne.n	80080d0 <HAL_SPI_Receive+0x60>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10f      	bne.n	80080d0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	225d      	movs	r2, #93	@ 0x5d
 80080b4:	2104      	movs	r1, #4
 80080b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080b8:	1dbb      	adds	r3, r7, #6
 80080ba:	881c      	ldrh	r4, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	0023      	movs	r3, r4
 80080c8:	f000 f924 	bl	8008314 <HAL_SPI_TransmitReceive>
 80080cc:	0003      	movs	r3, r0
 80080ce:	e118      	b.n	8008302 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	225c      	movs	r2, #92	@ 0x5c
 80080d4:	5c9b      	ldrb	r3, [r3, r2]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_SPI_Receive+0x6e>
 80080da:	2302      	movs	r3, #2
 80080dc:	e111      	b.n	8008302 <HAL_SPI_Receive+0x292>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	225c      	movs	r2, #92	@ 0x5c
 80080e2:	2101      	movs	r1, #1
 80080e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080e6:	f7fc fabd 	bl	8004664 <HAL_GetTick>
 80080ea:	0003      	movs	r3, r0
 80080ec:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_SPI_Receive+0x8c>
 80080f4:	1dbb      	adds	r3, r7, #6
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80080fc:	2317      	movs	r3, #23
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	2201      	movs	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
    goto error;
 8008104:	e0f6      	b.n	80082f4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	225d      	movs	r2, #93	@ 0x5d
 800810a:	2104      	movs	r1, #4
 800810c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	1dba      	adds	r2, r7, #6
 800811e:	2144      	movs	r1, #68	@ 0x44
 8008120:	8812      	ldrh	r2, [r2, #0]
 8008122:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	1dba      	adds	r2, r7, #6
 8008128:	2146      	movs	r1, #70	@ 0x46
 800812a:	8812      	ldrh	r2, [r2, #0]
 800812c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	23e0      	movs	r3, #224	@ 0xe0
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	429a      	cmp	r2, r3
 8008156:	d908      	bls.n	800816a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	496a      	ldr	r1, [pc, #424]	@ (800830c <HAL_SPI_Receive+0x29c>)
 8008164:	400a      	ands	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
 8008168:	e008      	b.n	800817c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2180      	movs	r1, #128	@ 0x80
 8008176:	0149      	lsls	r1, r1, #5
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	2380      	movs	r3, #128	@ 0x80
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	429a      	cmp	r2, r3
 8008186:	d10f      	bne.n	80081a8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2140      	movs	r1, #64	@ 0x40
 8008194:	438a      	bics	r2, r1
 8008196:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	495b      	ldr	r1, [pc, #364]	@ (8008310 <HAL_SPI_Receive+0x2a0>)
 80081a4:	400a      	ands	r2, r1
 80081a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2240      	movs	r2, #64	@ 0x40
 80081b0:	4013      	ands	r3, r2
 80081b2:	2b40      	cmp	r3, #64	@ 0x40
 80081b4:	d007      	beq.n	80081c6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2140      	movs	r1, #64	@ 0x40
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	23e0      	movs	r3, #224	@ 0xe0
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d900      	bls.n	80081d4 <HAL_SPI_Receive+0x164>
 80081d2:	e071      	b.n	80082b8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80081d4:	e035      	b.n	8008242 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2201      	movs	r2, #1
 80081de:	4013      	ands	r3, r2
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d117      	bne.n	8008214 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	001a      	movs	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f0:	7812      	ldrb	r2, [r2, #0]
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2246      	movs	r2, #70	@ 0x46
 8008204:	5a9b      	ldrh	r3, [r3, r2]
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b299      	uxth	r1, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2246      	movs	r2, #70	@ 0x46
 8008210:	5299      	strh	r1, [r3, r2]
 8008212:	e016      	b.n	8008242 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008214:	f7fc fa26 	bl	8004664 <HAL_GetTick>
 8008218:	0002      	movs	r2, r0
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d802      	bhi.n	800822a <HAL_SPI_Receive+0x1ba>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	d102      	bne.n	8008230 <HAL_SPI_Receive+0x1c0>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d108      	bne.n	8008242 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008230:	2317      	movs	r3, #23
 8008232:	18fb      	adds	r3, r7, r3
 8008234:	2203      	movs	r2, #3
 8008236:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	225d      	movs	r2, #93	@ 0x5d
 800823c:	2101      	movs	r1, #1
 800823e:	5499      	strb	r1, [r3, r2]
          goto error;
 8008240:	e058      	b.n	80082f4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2246      	movs	r2, #70	@ 0x46
 8008246:	5a9b      	ldrh	r3, [r3, r2]
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1c3      	bne.n	80081d6 <HAL_SPI_Receive+0x166>
 800824e:	e039      	b.n	80082c4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2201      	movs	r2, #1
 8008258:	4013      	ands	r3, r2
 800825a:	2b01      	cmp	r3, #1
 800825c:	d115      	bne.n	800828a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008268:	b292      	uxth	r2, r2
 800826a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008270:	1c9a      	adds	r2, r3, #2
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2246      	movs	r2, #70	@ 0x46
 800827a:	5a9b      	ldrh	r3, [r3, r2]
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b299      	uxth	r1, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2246      	movs	r2, #70	@ 0x46
 8008286:	5299      	strh	r1, [r3, r2]
 8008288:	e016      	b.n	80082b8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800828a:	f7fc f9eb 	bl	8004664 <HAL_GetTick>
 800828e:	0002      	movs	r2, r0
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d802      	bhi.n	80082a0 <HAL_SPI_Receive+0x230>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	3301      	adds	r3, #1
 800829e:	d102      	bne.n	80082a6 <HAL_SPI_Receive+0x236>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d108      	bne.n	80082b8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80082a6:	2317      	movs	r3, #23
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	2203      	movs	r2, #3
 80082ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	225d      	movs	r2, #93	@ 0x5d
 80082b2:	2101      	movs	r1, #1
 80082b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80082b6:	e01d      	b.n	80082f4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2246      	movs	r2, #70	@ 0x46
 80082bc:	5a9b      	ldrh	r3, [r3, r2]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1c5      	bne.n	8008250 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	0018      	movs	r0, r3
 80082cc:	f000 fb34 	bl	8008938 <SPI_EndRxTransaction>
 80082d0:	1e03      	subs	r3, r0, #0
 80082d2:	d002      	beq.n	80082da <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80082e2:	2317      	movs	r3, #23
 80082e4:	18fb      	adds	r3, r7, r3
 80082e6:	2201      	movs	r2, #1
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	e003      	b.n	80082f4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	225d      	movs	r2, #93	@ 0x5d
 80082f0:	2101      	movs	r1, #1
 80082f2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	225c      	movs	r2, #92	@ 0x5c
 80082f8:	2100      	movs	r1, #0
 80082fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80082fc:	2317      	movs	r3, #23
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	781b      	ldrb	r3, [r3, #0]
}
 8008302:	0018      	movs	r0, r3
 8008304:	46bd      	mov	sp, r7
 8008306:	b007      	add	sp, #28
 8008308:	bd90      	pop	{r4, r7, pc}
 800830a:	46c0      	nop			@ (mov r8, r8)
 800830c:	ffffefff 	.word	0xffffefff
 8008310:	ffffbfff 	.word	0xffffbfff

08008314 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08a      	sub	sp, #40	@ 0x28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	001a      	movs	r2, r3
 8008322:	1cbb      	adds	r3, r7, #2
 8008324:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008326:	2301      	movs	r3, #1
 8008328:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800832a:	2323      	movs	r3, #35	@ 0x23
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	225c      	movs	r2, #92	@ 0x5c
 8008336:	5c9b      	ldrb	r3, [r3, r2]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_SPI_TransmitReceive+0x2c>
 800833c:	2302      	movs	r3, #2
 800833e:	e1c4      	b.n	80086ca <HAL_SPI_TransmitReceive+0x3b6>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	225c      	movs	r2, #92	@ 0x5c
 8008344:	2101      	movs	r1, #1
 8008346:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008348:	f7fc f98c 	bl	8004664 <HAL_GetTick>
 800834c:	0003      	movs	r3, r0
 800834e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008350:	201b      	movs	r0, #27
 8008352:	183b      	adds	r3, r7, r0
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	215d      	movs	r1, #93	@ 0x5d
 8008358:	5c52      	ldrb	r2, [r2, r1]
 800835a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008362:	2312      	movs	r3, #18
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	1cba      	adds	r2, r7, #2
 8008368:	8812      	ldrh	r2, [r2, #0]
 800836a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800836c:	183b      	adds	r3, r7, r0
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d011      	beq.n	8008398 <HAL_SPI_TransmitReceive+0x84>
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	2382      	movs	r3, #130	@ 0x82
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	429a      	cmp	r2, r3
 800837c:	d107      	bne.n	800838e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <HAL_SPI_TransmitReceive+0x7a>
 8008386:	183b      	adds	r3, r7, r0
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b04      	cmp	r3, #4
 800838c:	d004      	beq.n	8008398 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800838e:	2323      	movs	r3, #35	@ 0x23
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	2202      	movs	r2, #2
 8008394:	701a      	strb	r2, [r3, #0]
    goto error;
 8008396:	e191      	b.n	80086bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d006      	beq.n	80083ac <HAL_SPI_TransmitReceive+0x98>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_SPI_TransmitReceive+0x98>
 80083a4:	1cbb      	adds	r3, r7, #2
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80083ac:	2323      	movs	r3, #35	@ 0x23
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	2201      	movs	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80083b4:	e182      	b.n	80086bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	225d      	movs	r2, #93	@ 0x5d
 80083ba:	5c9b      	ldrb	r3, [r3, r2]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d003      	beq.n	80083ca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	225d      	movs	r2, #93	@ 0x5d
 80083c6:	2105      	movs	r1, #5
 80083c8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1cba      	adds	r2, r7, #2
 80083da:	2146      	movs	r1, #70	@ 0x46
 80083dc:	8812      	ldrh	r2, [r2, #0]
 80083de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	1cba      	adds	r2, r7, #2
 80083e4:	2144      	movs	r1, #68	@ 0x44
 80083e6:	8812      	ldrh	r2, [r2, #0]
 80083e8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	1cba      	adds	r2, r7, #2
 80083f4:	8812      	ldrh	r2, [r2, #0]
 80083f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	1cba      	adds	r2, r7, #2
 80083fc:	8812      	ldrh	r2, [r2, #0]
 80083fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	23e0      	movs	r3, #224	@ 0xe0
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	429a      	cmp	r2, r3
 8008416:	d908      	bls.n	800842a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	49ac      	ldr	r1, [pc, #688]	@ (80086d4 <HAL_SPI_TransmitReceive+0x3c0>)
 8008424:	400a      	ands	r2, r1
 8008426:	605a      	str	r2, [r3, #4]
 8008428:	e008      	b.n	800843c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2180      	movs	r1, #128	@ 0x80
 8008436:	0149      	lsls	r1, r1, #5
 8008438:	430a      	orrs	r2, r1
 800843a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2240      	movs	r2, #64	@ 0x40
 8008444:	4013      	ands	r3, r2
 8008446:	2b40      	cmp	r3, #64	@ 0x40
 8008448:	d007      	beq.n	800845a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2140      	movs	r1, #64	@ 0x40
 8008456:	430a      	orrs	r2, r1
 8008458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	23e0      	movs	r3, #224	@ 0xe0
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	429a      	cmp	r2, r3
 8008464:	d800      	bhi.n	8008468 <HAL_SPI_TransmitReceive+0x154>
 8008466:	e083      	b.n	8008570 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_SPI_TransmitReceive+0x168>
 8008470:	2312      	movs	r3, #18
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d000      	beq.n	800847c <HAL_SPI_TransmitReceive+0x168>
 800847a:	e06d      	b.n	8008558 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	881a      	ldrh	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848c:	1c9a      	adds	r2, r3, #2
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084a0:	e05a      	b.n	8008558 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2202      	movs	r2, #2
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d11b      	bne.n	80084e8 <HAL_SPI_TransmitReceive+0x1d4>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d016      	beq.n	80084e8 <HAL_SPI_TransmitReceive+0x1d4>
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d113      	bne.n	80084e8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	881a      	ldrh	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	1c9a      	adds	r2, r3, #2
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2201      	movs	r2, #1
 80084f0:	4013      	ands	r3, r2
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d11c      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x21c>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2246      	movs	r2, #70	@ 0x46
 80084fa:	5a9b      	ldrh	r3, [r3, r2]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d016      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850c:	b292      	uxth	r2, r2
 800850e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	1c9a      	adds	r2, r3, #2
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2246      	movs	r2, #70	@ 0x46
 800851e:	5a9b      	ldrh	r3, [r3, r2]
 8008520:	b29b      	uxth	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	b299      	uxth	r1, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2246      	movs	r2, #70	@ 0x46
 800852a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800852c:	2301      	movs	r3, #1
 800852e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008530:	f7fc f898 	bl	8004664 <HAL_GetTick>
 8008534:	0002      	movs	r2, r0
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853c:	429a      	cmp	r2, r3
 800853e:	d80b      	bhi.n	8008558 <HAL_SPI_TransmitReceive+0x244>
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	3301      	adds	r3, #1
 8008544:	d008      	beq.n	8008558 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8008546:	2323      	movs	r3, #35	@ 0x23
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	2203      	movs	r2, #3
 800854c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	225d      	movs	r2, #93	@ 0x5d
 8008552:	2101      	movs	r1, #1
 8008554:	5499      	strb	r1, [r3, r2]
        goto error;
 8008556:	e0b1      	b.n	80086bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d19f      	bne.n	80084a2 <HAL_SPI_TransmitReceive+0x18e>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2246      	movs	r2, #70	@ 0x46
 8008566:	5a9b      	ldrh	r3, [r3, r2]
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d199      	bne.n	80084a2 <HAL_SPI_TransmitReceive+0x18e>
 800856e:	e089      	b.n	8008684 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x270>
 8008578:	2312      	movs	r3, #18
 800857a:	18fb      	adds	r3, r7, r3
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d000      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x270>
 8008582:	e074      	b.n	800866e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	7812      	ldrb	r2, [r2, #0]
 8008590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085aa:	e060      	b.n	800866e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	2202      	movs	r2, #2
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d11c      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x2e0>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d017      	beq.n	80085f4 <HAL_SPI_TransmitReceive+0x2e0>
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d114      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2201      	movs	r2, #1
 80085fc:	4013      	ands	r3, r2
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d11e      	bne.n	8008640 <HAL_SPI_TransmitReceive+0x32c>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2246      	movs	r2, #70	@ 0x46
 8008606:	5a9b      	ldrh	r3, [r3, r2]
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	001a      	movs	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2246      	movs	r2, #70	@ 0x46
 800862e:	5a9b      	ldrh	r3, [r3, r2]
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	b299      	uxth	r1, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2246      	movs	r2, #70	@ 0x46
 800863a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800863c:	2301      	movs	r3, #1
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008640:	f7fc f810 	bl	8004664 <HAL_GetTick>
 8008644:	0002      	movs	r2, r0
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800864c:	429a      	cmp	r2, r3
 800864e:	d802      	bhi.n	8008656 <HAL_SPI_TransmitReceive+0x342>
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	3301      	adds	r3, #1
 8008654:	d102      	bne.n	800865c <HAL_SPI_TransmitReceive+0x348>
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	d108      	bne.n	800866e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800865c:	2323      	movs	r3, #35	@ 0x23
 800865e:	18fb      	adds	r3, r7, r3
 8008660:	2203      	movs	r2, #3
 8008662:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	225d      	movs	r2, #93	@ 0x5d
 8008668:	2101      	movs	r1, #1
 800866a:	5499      	strb	r1, [r3, r2]
        goto error;
 800866c:	e026      	b.n	80086bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008672:	b29b      	uxth	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d199      	bne.n	80085ac <HAL_SPI_TransmitReceive+0x298>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2246      	movs	r2, #70	@ 0x46
 800867c:	5a9b      	ldrh	r3, [r3, r2]
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d193      	bne.n	80085ac <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	0018      	movs	r0, r3
 800868c:	f000 f9b2 	bl	80089f4 <SPI_EndRxTxTransaction>
 8008690:	1e03      	subs	r3, r0, #0
 8008692:	d006      	beq.n	80086a2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8008694:	2323      	movs	r3, #35	@ 0x23
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2220      	movs	r2, #32
 80086a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80086aa:	2323      	movs	r3, #35	@ 0x23
 80086ac:	18fb      	adds	r3, r7, r3
 80086ae:	2201      	movs	r2, #1
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	e003      	b.n	80086bc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	225d      	movs	r2, #93	@ 0x5d
 80086b8:	2101      	movs	r1, #1
 80086ba:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	225c      	movs	r2, #92	@ 0x5c
 80086c0:	2100      	movs	r1, #0
 80086c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80086c4:	2323      	movs	r3, #35	@ 0x23
 80086c6:	18fb      	adds	r3, r7, r3
 80086c8:	781b      	ldrb	r3, [r3, #0]
}
 80086ca:	0018      	movs	r0, r3
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b00a      	add	sp, #40	@ 0x28
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	46c0      	nop			@ (mov r8, r8)
 80086d4:	ffffefff 	.word	0xffffefff

080086d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	1dfb      	adds	r3, r7, #7
 80086e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086e8:	f7fb ffbc 	bl	8004664 <HAL_GetTick>
 80086ec:	0002      	movs	r2, r0
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	18d3      	adds	r3, r2, r3
 80086f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086f8:	f7fb ffb4 	bl	8004664 <HAL_GetTick>
 80086fc:	0003      	movs	r3, r0
 80086fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008700:	4b3a      	ldr	r3, [pc, #232]	@ (80087ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	015b      	lsls	r3, r3, #5
 8008706:	0d1b      	lsrs	r3, r3, #20
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	4353      	muls	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800870e:	e058      	b.n	80087c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	d055      	beq.n	80087c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008716:	f7fb ffa5 	bl	8004664 <HAL_GetTick>
 800871a:	0002      	movs	r2, r0
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	429a      	cmp	r2, r3
 8008724:	d902      	bls.n	800872c <SPI_WaitFlagStateUntilTimeout+0x54>
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d142      	bne.n	80087b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	21e0      	movs	r1, #224	@ 0xe0
 8008738:	438a      	bics	r2, r1
 800873a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	2382      	movs	r3, #130	@ 0x82
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	429a      	cmp	r2, r3
 8008746:	d113      	bne.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	2380      	movs	r3, #128	@ 0x80
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	429a      	cmp	r2, r3
 8008752:	d005      	beq.n	8008760 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	2380      	movs	r3, #128	@ 0x80
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	429a      	cmp	r2, r3
 800875e:	d107      	bne.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2140      	movs	r1, #64	@ 0x40
 800876c:	438a      	bics	r2, r1
 800876e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008774:	2380      	movs	r3, #128	@ 0x80
 8008776:	019b      	lsls	r3, r3, #6
 8008778:	429a      	cmp	r2, r3
 800877a:	d110      	bne.n	800879e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	491a      	ldr	r1, [pc, #104]	@ (80087f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008788:	400a      	ands	r2, r1
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2180      	movs	r1, #128	@ 0x80
 8008798:	0189      	lsls	r1, r1, #6
 800879a:	430a      	orrs	r2, r1
 800879c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	225d      	movs	r2, #93	@ 0x5d
 80087a2:	2101      	movs	r1, #1
 80087a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	225c      	movs	r2, #92	@ 0x5c
 80087aa:	2100      	movs	r1, #0
 80087ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e017      	b.n	80087e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3b01      	subs	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	4013      	ands	r3, r2
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	425a      	negs	r2, r3
 80087d2:	4153      	adcs	r3, r2
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	001a      	movs	r2, r3
 80087d8:	1dfb      	adds	r3, r7, #7
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d197      	bne.n	8008710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	0018      	movs	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	b008      	add	sp, #32
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	46c0      	nop			@ (mov r8, r8)
 80087ec:	2000009c 	.word	0x2000009c
 80087f0:	ffffdfff 	.word	0xffffdfff

080087f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	@ 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008802:	2317      	movs	r3, #23
 8008804:	18fb      	adds	r3, r7, r3
 8008806:	2200      	movs	r2, #0
 8008808:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800880a:	f7fb ff2b 	bl	8004664 <HAL_GetTick>
 800880e:	0002      	movs	r2, r0
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	18d3      	adds	r3, r2, r3
 8008818:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800881a:	f7fb ff23 	bl	8004664 <HAL_GetTick>
 800881e:	0003      	movs	r3, r0
 8008820:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800882a:	4b41      	ldr	r3, [pc, #260]	@ (8008930 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	0013      	movs	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	189b      	adds	r3, r3, r2
 8008834:	00da      	lsls	r2, r3, #3
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	0d1b      	lsrs	r3, r3, #20
 800883a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800883c:	4353      	muls	r3, r2
 800883e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008840:	e068      	b.n	8008914 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	23c0      	movs	r3, #192	@ 0xc0
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	429a      	cmp	r2, r3
 800884a:	d10a      	bne.n	8008862 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d107      	bne.n	8008862 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	2117      	movs	r1, #23
 800885a:	187b      	adds	r3, r7, r1
 800885c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800885e:	187b      	adds	r3, r7, r1
 8008860:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	d055      	beq.n	8008914 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008868:	f7fb fefc 	bl	8004664 <HAL_GetTick>
 800886c:	0002      	movs	r2, r0
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008874:	429a      	cmp	r2, r3
 8008876:	d902      	bls.n	800887e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d142      	bne.n	8008904 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	21e0      	movs	r1, #224	@ 0xe0
 800888a:	438a      	bics	r2, r1
 800888c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	2382      	movs	r3, #130	@ 0x82
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	429a      	cmp	r2, r3
 8008898:	d113      	bne.n	80088c2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	2380      	movs	r3, #128	@ 0x80
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d005      	beq.n	80088b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	2380      	movs	r3, #128	@ 0x80
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d107      	bne.n	80088c2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2140      	movs	r1, #64	@ 0x40
 80088be:	438a      	bics	r2, r1
 80088c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088c6:	2380      	movs	r3, #128	@ 0x80
 80088c8:	019b      	lsls	r3, r3, #6
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d110      	bne.n	80088f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4916      	ldr	r1, [pc, #88]	@ (8008934 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80088da:	400a      	ands	r2, r1
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2180      	movs	r1, #128	@ 0x80
 80088ea:	0189      	lsls	r1, r1, #6
 80088ec:	430a      	orrs	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	225d      	movs	r2, #93	@ 0x5d
 80088f4:	2101      	movs	r1, #1
 80088f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	225c      	movs	r2, #92	@ 0x5c
 80088fc:	2100      	movs	r1, #0
 80088fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e010      	b.n	8008926 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	3b01      	subs	r3, #1
 8008912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4013      	ands	r3, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	429a      	cmp	r2, r3
 8008922:	d18e      	bne.n	8008842 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	0018      	movs	r0, r3
 8008928:	46bd      	mov	sp, r7
 800892a:	b00a      	add	sp, #40	@ 0x28
 800892c:	bd80      	pop	{r7, pc}
 800892e:	46c0      	nop			@ (mov r8, r8)
 8008930:	2000009c 	.word	0x2000009c
 8008934:	ffffdfff 	.word	0xffffdfff

08008938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	2382      	movs	r3, #130	@ 0x82
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	429a      	cmp	r2, r3
 800894e:	d113      	bne.n	8008978 <SPI_EndRxTransaction+0x40>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	2380      	movs	r3, #128	@ 0x80
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	429a      	cmp	r2, r3
 800895a:	d005      	beq.n	8008968 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	2380      	movs	r3, #128	@ 0x80
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	429a      	cmp	r2, r3
 8008966:	d107      	bne.n	8008978 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2140      	movs	r1, #64	@ 0x40
 8008974:	438a      	bics	r2, r1
 8008976:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	0013      	movs	r3, r2
 8008982:	2200      	movs	r2, #0
 8008984:	2180      	movs	r1, #128	@ 0x80
 8008986:	f7ff fea7 	bl	80086d8 <SPI_WaitFlagStateUntilTimeout>
 800898a:	1e03      	subs	r3, r0, #0
 800898c:	d007      	beq.n	800899e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008992:	2220      	movs	r2, #32
 8008994:	431a      	orrs	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e026      	b.n	80089ec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	2382      	movs	r3, #130	@ 0x82
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d11f      	bne.n	80089ea <SPI_EndRxTransaction+0xb2>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	2380      	movs	r3, #128	@ 0x80
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d005      	beq.n	80089c2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	2380      	movs	r3, #128	@ 0x80
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	429a      	cmp	r2, r3
 80089c0:	d113      	bne.n	80089ea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	23c0      	movs	r3, #192	@ 0xc0
 80089c6:	00d9      	lsls	r1, r3, #3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	0013      	movs	r3, r2
 80089d0:	2200      	movs	r2, #0
 80089d2:	f7ff ff0f 	bl	80087f4 <SPI_WaitFifoStateUntilTimeout>
 80089d6:	1e03      	subs	r3, r0, #0
 80089d8:	d007      	beq.n	80089ea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089de:	2220      	movs	r2, #32
 80089e0:	431a      	orrs	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e000      	b.n	80089ec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	0018      	movs	r0, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	b004      	add	sp, #16
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af02      	add	r7, sp, #8
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	23c0      	movs	r3, #192	@ 0xc0
 8008a04:	0159      	lsls	r1, r3, #5
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	0013      	movs	r3, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f7ff fef0 	bl	80087f4 <SPI_WaitFifoStateUntilTimeout>
 8008a14:	1e03      	subs	r3, r0, #0
 8008a16:	d007      	beq.n	8008a28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e027      	b.n	8008a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	0013      	movs	r3, r2
 8008a32:	2200      	movs	r2, #0
 8008a34:	2180      	movs	r1, #128	@ 0x80
 8008a36:	f7ff fe4f 	bl	80086d8 <SPI_WaitFlagStateUntilTimeout>
 8008a3a:	1e03      	subs	r3, r0, #0
 8008a3c:	d007      	beq.n	8008a4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a42:	2220      	movs	r2, #32
 8008a44:	431a      	orrs	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e014      	b.n	8008a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	23c0      	movs	r3, #192	@ 0xc0
 8008a52:	00d9      	lsls	r1, r3, #3
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	0013      	movs	r3, r2
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f7ff fec9 	bl	80087f4 <SPI_WaitFifoStateUntilTimeout>
 8008a62:	1e03      	subs	r3, r0, #0
 8008a64:	d007      	beq.n	8008a76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e000      	b.n	8008a78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	0018      	movs	r0, r3
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b004      	add	sp, #16
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e04a      	b.n	8008b28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	223d      	movs	r2, #61	@ 0x3d
 8008a96:	5c9b      	ldrb	r3, [r3, r2]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d107      	bne.n	8008aae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	223c      	movs	r2, #60	@ 0x3c
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f7fb fbed 	bl	8004288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	223d      	movs	r2, #61	@ 0x3d
 8008ab2:	2102      	movs	r1, #2
 8008ab4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3304      	adds	r3, #4
 8008abe:	0019      	movs	r1, r3
 8008ac0:	0010      	movs	r0, r2
 8008ac2:	f000 fb53 	bl	800916c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2248      	movs	r2, #72	@ 0x48
 8008aca:	2101      	movs	r1, #1
 8008acc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	223e      	movs	r2, #62	@ 0x3e
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	5499      	strb	r1, [r3, r2]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	223f      	movs	r2, #63	@ 0x3f
 8008ada:	2101      	movs	r1, #1
 8008adc:	5499      	strb	r1, [r3, r2]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2240      	movs	r2, #64	@ 0x40
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	5499      	strb	r1, [r3, r2]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2241      	movs	r2, #65	@ 0x41
 8008aea:	2101      	movs	r1, #1
 8008aec:	5499      	strb	r1, [r3, r2]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2242      	movs	r2, #66	@ 0x42
 8008af2:	2101      	movs	r1, #1
 8008af4:	5499      	strb	r1, [r3, r2]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2243      	movs	r2, #67	@ 0x43
 8008afa:	2101      	movs	r1, #1
 8008afc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2244      	movs	r2, #68	@ 0x44
 8008b02:	2101      	movs	r1, #1
 8008b04:	5499      	strb	r1, [r3, r2]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2245      	movs	r2, #69	@ 0x45
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	5499      	strb	r1, [r3, r2]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2246      	movs	r2, #70	@ 0x46
 8008b12:	2101      	movs	r1, #1
 8008b14:	5499      	strb	r1, [r3, r2]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2247      	movs	r2, #71	@ 0x47
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	223d      	movs	r2, #61	@ 0x3d
 8008b22:	2101      	movs	r1, #1
 8008b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	0018      	movs	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b002      	add	sp, #8
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e04a      	b.n	8008bd8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	223d      	movs	r2, #61	@ 0x3d
 8008b46:	5c9b      	ldrb	r3, [r3, r2]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d107      	bne.n	8008b5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	223c      	movs	r2, #60	@ 0x3c
 8008b52:	2100      	movs	r1, #0
 8008b54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f7fb fb79 	bl	8004250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	223d      	movs	r2, #61	@ 0x3d
 8008b62:	2102      	movs	r1, #2
 8008b64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	0019      	movs	r1, r3
 8008b70:	0010      	movs	r0, r2
 8008b72:	f000 fafb 	bl	800916c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2248      	movs	r2, #72	@ 0x48
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	223e      	movs	r2, #62	@ 0x3e
 8008b82:	2101      	movs	r1, #1
 8008b84:	5499      	strb	r1, [r3, r2]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	223f      	movs	r2, #63	@ 0x3f
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	5499      	strb	r1, [r3, r2]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2240      	movs	r2, #64	@ 0x40
 8008b92:	2101      	movs	r1, #1
 8008b94:	5499      	strb	r1, [r3, r2]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2241      	movs	r2, #65	@ 0x41
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	5499      	strb	r1, [r3, r2]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2242      	movs	r2, #66	@ 0x42
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	5499      	strb	r1, [r3, r2]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2243      	movs	r2, #67	@ 0x43
 8008baa:	2101      	movs	r1, #1
 8008bac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2244      	movs	r2, #68	@ 0x44
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	5499      	strb	r1, [r3, r2]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2245      	movs	r2, #69	@ 0x45
 8008bba:	2101      	movs	r1, #1
 8008bbc:	5499      	strb	r1, [r3, r2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2246      	movs	r2, #70	@ 0x46
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	5499      	strb	r1, [r3, r2]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2247      	movs	r2, #71	@ 0x47
 8008bca:	2101      	movs	r1, #1
 8008bcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	223d      	movs	r2, #61	@ 0x3d
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	0018      	movs	r0, r3
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b002      	add	sp, #8
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d108      	bne.n	8008c02 <HAL_TIM_PWM_Start+0x22>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	223e      	movs	r2, #62	@ 0x3e
 8008bf4:	5c9b      	ldrb	r3, [r3, r2]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	1e5a      	subs	r2, r3, #1
 8008bfc:	4193      	sbcs	r3, r2
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	e037      	b.n	8008c72 <HAL_TIM_PWM_Start+0x92>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d108      	bne.n	8008c1a <HAL_TIM_PWM_Start+0x3a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	223f      	movs	r2, #63	@ 0x3f
 8008c0c:	5c9b      	ldrb	r3, [r3, r2]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	1e5a      	subs	r2, r3, #1
 8008c14:	4193      	sbcs	r3, r2
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	e02b      	b.n	8008c72 <HAL_TIM_PWM_Start+0x92>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d108      	bne.n	8008c32 <HAL_TIM_PWM_Start+0x52>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2240      	movs	r2, #64	@ 0x40
 8008c24:	5c9b      	ldrb	r3, [r3, r2]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	1e5a      	subs	r2, r3, #1
 8008c2c:	4193      	sbcs	r3, r2
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	e01f      	b.n	8008c72 <HAL_TIM_PWM_Start+0x92>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b0c      	cmp	r3, #12
 8008c36:	d108      	bne.n	8008c4a <HAL_TIM_PWM_Start+0x6a>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2241      	movs	r2, #65	@ 0x41
 8008c3c:	5c9b      	ldrb	r3, [r3, r2]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	3b01      	subs	r3, #1
 8008c42:	1e5a      	subs	r2, r3, #1
 8008c44:	4193      	sbcs	r3, r2
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	e013      	b.n	8008c72 <HAL_TIM_PWM_Start+0x92>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d108      	bne.n	8008c62 <HAL_TIM_PWM_Start+0x82>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2242      	movs	r2, #66	@ 0x42
 8008c54:	5c9b      	ldrb	r3, [r3, r2]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	1e5a      	subs	r2, r3, #1
 8008c5c:	4193      	sbcs	r3, r2
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	e007      	b.n	8008c72 <HAL_TIM_PWM_Start+0x92>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2243      	movs	r2, #67	@ 0x43
 8008c66:	5c9b      	ldrb	r3, [r3, r2]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	1e5a      	subs	r2, r3, #1
 8008c6e:	4193      	sbcs	r3, r2
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e090      	b.n	8008d9c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIM_PWM_Start+0xaa>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	223e      	movs	r2, #62	@ 0x3e
 8008c84:	2102      	movs	r1, #2
 8008c86:	5499      	strb	r1, [r3, r2]
 8008c88:	e023      	b.n	8008cd2 <HAL_TIM_PWM_Start+0xf2>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_PWM_Start+0xba>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	223f      	movs	r2, #63	@ 0x3f
 8008c94:	2102      	movs	r1, #2
 8008c96:	5499      	strb	r1, [r3, r2]
 8008c98:	e01b      	b.n	8008cd2 <HAL_TIM_PWM_Start+0xf2>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d104      	bne.n	8008caa <HAL_TIM_PWM_Start+0xca>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2240      	movs	r2, #64	@ 0x40
 8008ca4:	2102      	movs	r1, #2
 8008ca6:	5499      	strb	r1, [r3, r2]
 8008ca8:	e013      	b.n	8008cd2 <HAL_TIM_PWM_Start+0xf2>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b0c      	cmp	r3, #12
 8008cae:	d104      	bne.n	8008cba <HAL_TIM_PWM_Start+0xda>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2241      	movs	r2, #65	@ 0x41
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	5499      	strb	r1, [r3, r2]
 8008cb8:	e00b      	b.n	8008cd2 <HAL_TIM_PWM_Start+0xf2>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b10      	cmp	r3, #16
 8008cbe:	d104      	bne.n	8008cca <HAL_TIM_PWM_Start+0xea>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2242      	movs	r2, #66	@ 0x42
 8008cc4:	2102      	movs	r1, #2
 8008cc6:	5499      	strb	r1, [r3, r2]
 8008cc8:	e003      	b.n	8008cd2 <HAL_TIM_PWM_Start+0xf2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2243      	movs	r2, #67	@ 0x43
 8008cce:	2102      	movs	r1, #2
 8008cd0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 fe3e 	bl	800995c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8008da4 <HAL_TIM_PWM_Start+0x1c4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00e      	beq.n	8008d08 <HAL_TIM_PWM_Start+0x128>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a2e      	ldr	r2, [pc, #184]	@ (8008da8 <HAL_TIM_PWM_Start+0x1c8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d009      	beq.n	8008d08 <HAL_TIM_PWM_Start+0x128>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008dac <HAL_TIM_PWM_Start+0x1cc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d004      	beq.n	8008d08 <HAL_TIM_PWM_Start+0x128>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a2b      	ldr	r2, [pc, #172]	@ (8008db0 <HAL_TIM_PWM_Start+0x1d0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d101      	bne.n	8008d0c <HAL_TIM_PWM_Start+0x12c>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <HAL_TIM_PWM_Start+0x12e>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d008      	beq.n	8008d24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2180      	movs	r1, #128	@ 0x80
 8008d1e:	0209      	lsls	r1, r1, #8
 8008d20:	430a      	orrs	r2, r1
 8008d22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1e      	ldr	r2, [pc, #120]	@ (8008da4 <HAL_TIM_PWM_Start+0x1c4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d014      	beq.n	8008d58 <HAL_TIM_PWM_Start+0x178>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	2380      	movs	r3, #128	@ 0x80
 8008d34:	05db      	lsls	r3, r3, #23
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d00e      	beq.n	8008d58 <HAL_TIM_PWM_Start+0x178>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008db4 <HAL_TIM_PWM_Start+0x1d4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d009      	beq.n	8008d58 <HAL_TIM_PWM_Start+0x178>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a1b      	ldr	r2, [pc, #108]	@ (8008db8 <HAL_TIM_PWM_Start+0x1d8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d004      	beq.n	8008d58 <HAL_TIM_PWM_Start+0x178>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a15      	ldr	r2, [pc, #84]	@ (8008da8 <HAL_TIM_PWM_Start+0x1c8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d116      	bne.n	8008d86 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	4a17      	ldr	r2, [pc, #92]	@ (8008dbc <HAL_TIM_PWM_Start+0x1dc>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b06      	cmp	r3, #6
 8008d68:	d016      	beq.n	8008d98 <HAL_TIM_PWM_Start+0x1b8>
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	2380      	movs	r3, #128	@ 0x80
 8008d6e:	025b      	lsls	r3, r3, #9
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d011      	beq.n	8008d98 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2101      	movs	r1, #1
 8008d80:	430a      	orrs	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d84:	e008      	b.n	8008d98 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2101      	movs	r1, #1
 8008d92:	430a      	orrs	r2, r1
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	e000      	b.n	8008d9a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d98:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	b004      	add	sp, #16
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	40012c00 	.word	0x40012c00
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800
 8008db4:	40000400 	.word	0x40000400
 8008db8:	40000800 	.word	0x40000800
 8008dbc:	00010007 	.word	0x00010007

08008dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dcc:	2317      	movs	r3, #23
 8008dce:	18fb      	adds	r3, r7, r3
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	223c      	movs	r2, #60	@ 0x3c
 8008dd8:	5c9b      	ldrb	r3, [r3, r2]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e0e5      	b.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	223c      	movs	r2, #60	@ 0x3c
 8008de6:	2101      	movs	r1, #1
 8008de8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b14      	cmp	r3, #20
 8008dee:	d900      	bls.n	8008df2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008df0:	e0d1      	b.n	8008f96 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	009a      	lsls	r2, r3, #2
 8008df6:	4b70      	ldr	r3, [pc, #448]	@ (8008fb8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008df8:	18d3      	adds	r3, r2, r3
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	0011      	movs	r1, r2
 8008e06:	0018      	movs	r0, r3
 8008e08:	f000 fa48 	bl	800929c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2108      	movs	r1, #8
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2104      	movs	r1, #4
 8008e28:	438a      	bics	r2, r1
 8008e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6999      	ldr	r1, [r3, #24]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	619a      	str	r2, [r3, #24]
      break;
 8008e3e:	e0af      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	0011      	movs	r1, r2
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f000 fab1 	bl	80093b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699a      	ldr	r2, [r3, #24]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2180      	movs	r1, #128	@ 0x80
 8008e5a:	0109      	lsls	r1, r1, #4
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4954      	ldr	r1, [pc, #336]	@ (8008fbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008e6c:	400a      	ands	r2, r1
 8008e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6999      	ldr	r1, [r3, #24]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	021a      	lsls	r2, r3, #8
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	619a      	str	r2, [r3, #24]
      break;
 8008e84:	e08c      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0011      	movs	r1, r2
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f000 fb12 	bl	80094b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	69da      	ldr	r2, [r3, #28]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2108      	movs	r1, #8
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	69da      	ldr	r2, [r3, #28]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2104      	movs	r1, #4
 8008eb0:	438a      	bics	r2, r1
 8008eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69d9      	ldr	r1, [r3, #28]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	61da      	str	r2, [r3, #28]
      break;
 8008ec6:	e06b      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	0011      	movs	r1, r2
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f000 fb79 	bl	80095c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2180      	movs	r1, #128	@ 0x80
 8008ee2:	0109      	lsls	r1, r1, #4
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	69da      	ldr	r2, [r3, #28]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4932      	ldr	r1, [pc, #200]	@ (8008fbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ef4:	400a      	ands	r2, r1
 8008ef6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69d9      	ldr	r1, [r3, #28]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	021a      	lsls	r2, r3, #8
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	61da      	str	r2, [r3, #28]
      break;
 8008f0c:	e048      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	0011      	movs	r1, r2
 8008f16:	0018      	movs	r0, r3
 8008f18:	f000 fbc0 	bl	800969c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2108      	movs	r1, #8
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2104      	movs	r1, #4
 8008f38:	438a      	bics	r2, r1
 8008f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691a      	ldr	r2, [r3, #16]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f4e:	e027      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	0011      	movs	r1, r2
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f000 fbff 	bl	800975c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2180      	movs	r1, #128	@ 0x80
 8008f6a:	0109      	lsls	r1, r1, #4
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4910      	ldr	r1, [pc, #64]	@ (8008fbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008f7c:	400a      	ands	r2, r1
 8008f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	021a      	lsls	r2, r3, #8
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f94:	e004      	b.n	8008fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008f96:	2317      	movs	r3, #23
 8008f98:	18fb      	adds	r3, r7, r3
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	701a      	strb	r2, [r3, #0]
      break;
 8008f9e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	223c      	movs	r2, #60	@ 0x3c
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	5499      	strb	r1, [r3, r2]

  return status;
 8008fa8:	2317      	movs	r3, #23
 8008faa:	18fb      	adds	r3, r7, r3
 8008fac:	781b      	ldrb	r3, [r3, #0]
}
 8008fae:	0018      	movs	r0, r3
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	b006      	add	sp, #24
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	46c0      	nop			@ (mov r8, r8)
 8008fb8:	08009e00 	.word	0x08009e00
 8008fbc:	fffffbff 	.word	0xfffffbff

08008fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	230f      	movs	r3, #15
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	223c      	movs	r2, #60	@ 0x3c
 8008fd6:	5c9b      	ldrb	r3, [r3, r2]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_TIM_ConfigClockSource+0x20>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e0bc      	b.n	800915a <HAL_TIM_ConfigClockSource+0x19a>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	223c      	movs	r2, #60	@ 0x3c
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	223d      	movs	r2, #61	@ 0x3d
 8008fec:	2102      	movs	r1, #2
 8008fee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8009164 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	4a59      	ldr	r2, [pc, #356]	@ (8009168 <HAL_TIM_ConfigClockSource+0x1a8>)
 8009004:	4013      	ands	r3, r2
 8009006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2280      	movs	r2, #128	@ 0x80
 8009016:	0192      	lsls	r2, r2, #6
 8009018:	4293      	cmp	r3, r2
 800901a:	d040      	beq.n	800909e <HAL_TIM_ConfigClockSource+0xde>
 800901c:	2280      	movs	r2, #128	@ 0x80
 800901e:	0192      	lsls	r2, r2, #6
 8009020:	4293      	cmp	r3, r2
 8009022:	d900      	bls.n	8009026 <HAL_TIM_ConfigClockSource+0x66>
 8009024:	e088      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 8009026:	2280      	movs	r2, #128	@ 0x80
 8009028:	0152      	lsls	r2, r2, #5
 800902a:	4293      	cmp	r3, r2
 800902c:	d100      	bne.n	8009030 <HAL_TIM_ConfigClockSource+0x70>
 800902e:	e088      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x182>
 8009030:	2280      	movs	r2, #128	@ 0x80
 8009032:	0152      	lsls	r2, r2, #5
 8009034:	4293      	cmp	r3, r2
 8009036:	d900      	bls.n	800903a <HAL_TIM_ConfigClockSource+0x7a>
 8009038:	e07e      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 800903a:	2b70      	cmp	r3, #112	@ 0x70
 800903c:	d018      	beq.n	8009070 <HAL_TIM_ConfigClockSource+0xb0>
 800903e:	d900      	bls.n	8009042 <HAL_TIM_ConfigClockSource+0x82>
 8009040:	e07a      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 8009042:	2b60      	cmp	r3, #96	@ 0x60
 8009044:	d04f      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x126>
 8009046:	d900      	bls.n	800904a <HAL_TIM_ConfigClockSource+0x8a>
 8009048:	e076      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 800904a:	2b50      	cmp	r3, #80	@ 0x50
 800904c:	d03b      	beq.n	80090c6 <HAL_TIM_ConfigClockSource+0x106>
 800904e:	d900      	bls.n	8009052 <HAL_TIM_ConfigClockSource+0x92>
 8009050:	e072      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 8009052:	2b40      	cmp	r3, #64	@ 0x40
 8009054:	d057      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0x146>
 8009056:	d900      	bls.n	800905a <HAL_TIM_ConfigClockSource+0x9a>
 8009058:	e06e      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 800905a:	2b30      	cmp	r3, #48	@ 0x30
 800905c:	d063      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x166>
 800905e:	d86b      	bhi.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 8009060:	2b20      	cmp	r3, #32
 8009062:	d060      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x166>
 8009064:	d868      	bhi.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d05d      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x166>
 800906a:	2b10      	cmp	r3, #16
 800906c:	d05b      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0x166>
 800906e:	e063      	b.n	8009138 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009080:	f000 fc4c 	bl	800991c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2277      	movs	r2, #119	@ 0x77
 8009090:	4313      	orrs	r3, r2
 8009092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	609a      	str	r2, [r3, #8]
      break;
 800909c:	e052      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090ae:	f000 fc35 	bl	800991c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2180      	movs	r1, #128	@ 0x80
 80090be:	01c9      	lsls	r1, r1, #7
 80090c0:	430a      	orrs	r2, r1
 80090c2:	609a      	str	r2, [r3, #8]
      break;
 80090c4:	e03e      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d2:	001a      	movs	r2, r3
 80090d4:	f000 fba6 	bl	8009824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2150      	movs	r1, #80	@ 0x50
 80090de:	0018      	movs	r0, r3
 80090e0:	f000 fc00 	bl	80098e4 <TIM_ITRx_SetConfig>
      break;
 80090e4:	e02e      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f2:	001a      	movs	r2, r3
 80090f4:	f000 fbc4 	bl	8009880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2160      	movs	r1, #96	@ 0x60
 80090fe:	0018      	movs	r0, r3
 8009100:	f000 fbf0 	bl	80098e4 <TIM_ITRx_SetConfig>
      break;
 8009104:	e01e      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009112:	001a      	movs	r2, r3
 8009114:	f000 fb86 	bl	8009824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2140      	movs	r1, #64	@ 0x40
 800911e:	0018      	movs	r0, r3
 8009120:	f000 fbe0 	bl	80098e4 <TIM_ITRx_SetConfig>
      break;
 8009124:	e00e      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	0019      	movs	r1, r3
 8009130:	0010      	movs	r0, r2
 8009132:	f000 fbd7 	bl	80098e4 <TIM_ITRx_SetConfig>
      break;
 8009136:	e005      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009138:	230f      	movs	r3, #15
 800913a:	18fb      	adds	r3, r7, r3
 800913c:	2201      	movs	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]
      break;
 8009140:	e000      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8009142:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	223d      	movs	r2, #61	@ 0x3d
 8009148:	2101      	movs	r1, #1
 800914a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	223c      	movs	r2, #60	@ 0x3c
 8009150:	2100      	movs	r1, #0
 8009152:	5499      	strb	r1, [r3, r2]

  return status;
 8009154:	230f      	movs	r3, #15
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	781b      	ldrb	r3, [r3, #0]
}
 800915a:	0018      	movs	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	b004      	add	sp, #16
 8009160:	bd80      	pop	{r7, pc}
 8009162:	46c0      	nop			@ (mov r8, r8)
 8009164:	ffceff88 	.word	0xffceff88
 8009168:	ffff00ff 	.word	0xffff00ff

0800916c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a3f      	ldr	r2, [pc, #252]	@ (800927c <TIM_Base_SetConfig+0x110>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00c      	beq.n	800919e <TIM_Base_SetConfig+0x32>
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	2380      	movs	r3, #128	@ 0x80
 8009188:	05db      	lsls	r3, r3, #23
 800918a:	429a      	cmp	r2, r3
 800918c:	d007      	beq.n	800919e <TIM_Base_SetConfig+0x32>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a3b      	ldr	r2, [pc, #236]	@ (8009280 <TIM_Base_SetConfig+0x114>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d003      	beq.n	800919e <TIM_Base_SetConfig+0x32>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a3a      	ldr	r2, [pc, #232]	@ (8009284 <TIM_Base_SetConfig+0x118>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d108      	bne.n	80091b0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2270      	movs	r2, #112	@ 0x70
 80091a2:	4393      	bics	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a32      	ldr	r2, [pc, #200]	@ (800927c <TIM_Base_SetConfig+0x110>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d01c      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	2380      	movs	r3, #128	@ 0x80
 80091bc:	05db      	lsls	r3, r3, #23
 80091be:	429a      	cmp	r2, r3
 80091c0:	d017      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2e      	ldr	r2, [pc, #184]	@ (8009280 <TIM_Base_SetConfig+0x114>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d013      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009284 <TIM_Base_SetConfig+0x118>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00f      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009288 <TIM_Base_SetConfig+0x11c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00b      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a2b      	ldr	r2, [pc, #172]	@ (800928c <TIM_Base_SetConfig+0x120>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d007      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009290 <TIM_Base_SetConfig+0x124>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d003      	beq.n	80091f2 <TIM_Base_SetConfig+0x86>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a29      	ldr	r2, [pc, #164]	@ (8009294 <TIM_Base_SetConfig+0x128>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d108      	bne.n	8009204 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4a28      	ldr	r2, [pc, #160]	@ (8009298 <TIM_Base_SetConfig+0x12c>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2280      	movs	r2, #128	@ 0x80
 8009208:	4393      	bics	r3, r2
 800920a:	001a      	movs	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a13      	ldr	r2, [pc, #76]	@ (800927c <TIM_Base_SetConfig+0x110>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00b      	beq.n	800924a <TIM_Base_SetConfig+0xde>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a15      	ldr	r2, [pc, #84]	@ (800928c <TIM_Base_SetConfig+0x120>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d007      	beq.n	800924a <TIM_Base_SetConfig+0xde>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a14      	ldr	r2, [pc, #80]	@ (8009290 <TIM_Base_SetConfig+0x124>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d003      	beq.n	800924a <TIM_Base_SetConfig+0xde>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a13      	ldr	r2, [pc, #76]	@ (8009294 <TIM_Base_SetConfig+0x128>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d103      	bne.n	8009252 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2201      	movs	r2, #1
 800925e:	4013      	ands	r3, r2
 8009260:	2b01      	cmp	r3, #1
 8009262:	d106      	bne.n	8009272 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2201      	movs	r2, #1
 800926a:	4393      	bics	r3, r2
 800926c:	001a      	movs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	611a      	str	r2, [r3, #16]
  }
}
 8009272:	46c0      	nop			@ (mov r8, r8)
 8009274:	46bd      	mov	sp, r7
 8009276:	b004      	add	sp, #16
 8009278:	bd80      	pop	{r7, pc}
 800927a:	46c0      	nop			@ (mov r8, r8)
 800927c:	40012c00 	.word	0x40012c00
 8009280:	40000400 	.word	0x40000400
 8009284:	40000800 	.word	0x40000800
 8009288:	40002000 	.word	0x40002000
 800928c:	40014000 	.word	0x40014000
 8009290:	40014400 	.word	0x40014400
 8009294:	40014800 	.word	0x40014800
 8009298:	fffffcff 	.word	0xfffffcff

0800929c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	2201      	movs	r2, #1
 80092b2:	4393      	bics	r3, r2
 80092b4:	001a      	movs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4a32      	ldr	r2, [pc, #200]	@ (8009394 <TIM_OC1_SetConfig+0xf8>)
 80092ca:	4013      	ands	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2203      	movs	r2, #3
 80092d2:	4393      	bics	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	4313      	orrs	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2202      	movs	r2, #2
 80092e4:	4393      	bics	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a28      	ldr	r2, [pc, #160]	@ (8009398 <TIM_OC1_SetConfig+0xfc>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00b      	beq.n	8009312 <TIM_OC1_SetConfig+0x76>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a27      	ldr	r2, [pc, #156]	@ (800939c <TIM_OC1_SetConfig+0x100>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d007      	beq.n	8009312 <TIM_OC1_SetConfig+0x76>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a26      	ldr	r2, [pc, #152]	@ (80093a0 <TIM_OC1_SetConfig+0x104>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d003      	beq.n	8009312 <TIM_OC1_SetConfig+0x76>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a25      	ldr	r2, [pc, #148]	@ (80093a4 <TIM_OC1_SetConfig+0x108>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10c      	bne.n	800932c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2208      	movs	r2, #8
 8009316:	4393      	bics	r3, r2
 8009318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4313      	orrs	r3, r2
 8009322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	2204      	movs	r2, #4
 8009328:	4393      	bics	r3, r2
 800932a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a1a      	ldr	r2, [pc, #104]	@ (8009398 <TIM_OC1_SetConfig+0xfc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_OC1_SetConfig+0xb0>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a19      	ldr	r2, [pc, #100]	@ (800939c <TIM_OC1_SetConfig+0x100>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_OC1_SetConfig+0xb0>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a18      	ldr	r2, [pc, #96]	@ (80093a0 <TIM_OC1_SetConfig+0x104>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC1_SetConfig+0xb0>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a17      	ldr	r2, [pc, #92]	@ (80093a4 <TIM_OC1_SetConfig+0x108>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d111      	bne.n	8009370 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4a16      	ldr	r2, [pc, #88]	@ (80093a8 <TIM_OC1_SetConfig+0x10c>)
 8009350:	4013      	ands	r3, r2
 8009352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	4a15      	ldr	r2, [pc, #84]	@ (80093ac <TIM_OC1_SetConfig+0x110>)
 8009358:	4013      	ands	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	4313      	orrs	r3, r2
 8009364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	621a      	str	r2, [r3, #32]
}
 800938a:	46c0      	nop			@ (mov r8, r8)
 800938c:	46bd      	mov	sp, r7
 800938e:	b006      	add	sp, #24
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			@ (mov r8, r8)
 8009394:	fffeff8f 	.word	0xfffeff8f
 8009398:	40012c00 	.word	0x40012c00
 800939c:	40014000 	.word	0x40014000
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800
 80093a8:	fffffeff 	.word	0xfffffeff
 80093ac:	fffffdff 	.word	0xfffffdff

080093b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	2210      	movs	r2, #16
 80093c6:	4393      	bics	r3, r2
 80093c8:	001a      	movs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4a2e      	ldr	r2, [pc, #184]	@ (8009498 <TIM_OC2_SetConfig+0xe8>)
 80093de:	4013      	ands	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4a2d      	ldr	r2, [pc, #180]	@ (800949c <TIM_OC2_SetConfig+0xec>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2220      	movs	r2, #32
 80093fa:	4393      	bics	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a24      	ldr	r2, [pc, #144]	@ (80094a0 <TIM_OC2_SetConfig+0xf0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d10d      	bne.n	800942e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2280      	movs	r2, #128	@ 0x80
 8009416:	4393      	bics	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2240      	movs	r2, #64	@ 0x40
 800942a:	4393      	bics	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1b      	ldr	r2, [pc, #108]	@ (80094a0 <TIM_OC2_SetConfig+0xf0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00b      	beq.n	800944e <TIM_OC2_SetConfig+0x9e>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1a      	ldr	r2, [pc, #104]	@ (80094a4 <TIM_OC2_SetConfig+0xf4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d007      	beq.n	800944e <TIM_OC2_SetConfig+0x9e>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a19      	ldr	r2, [pc, #100]	@ (80094a8 <TIM_OC2_SetConfig+0xf8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d003      	beq.n	800944e <TIM_OC2_SetConfig+0x9e>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a18      	ldr	r2, [pc, #96]	@ (80094ac <TIM_OC2_SetConfig+0xfc>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	4a17      	ldr	r2, [pc, #92]	@ (80094b0 <TIM_OC2_SetConfig+0x100>)
 8009452:	4013      	ands	r3, r2
 8009454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4a16      	ldr	r2, [pc, #88]	@ (80094b4 <TIM_OC2_SetConfig+0x104>)
 800945a:	4013      	ands	r3, r2
 800945c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	621a      	str	r2, [r3, #32]
}
 8009490:	46c0      	nop			@ (mov r8, r8)
 8009492:	46bd      	mov	sp, r7
 8009494:	b006      	add	sp, #24
 8009496:	bd80      	pop	{r7, pc}
 8009498:	feff8fff 	.word	0xfeff8fff
 800949c:	fffffcff 	.word	0xfffffcff
 80094a0:	40012c00 	.word	0x40012c00
 80094a4:	40014000 	.word	0x40014000
 80094a8:	40014400 	.word	0x40014400
 80094ac:	40014800 	.word	0x40014800
 80094b0:	fffffbff 	.word	0xfffffbff
 80094b4:	fffff7ff 	.word	0xfffff7ff

080094b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	4a33      	ldr	r2, [pc, #204]	@ (800959c <TIM_OC3_SetConfig+0xe4>)
 80094ce:	401a      	ands	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4a2f      	ldr	r2, [pc, #188]	@ (80095a0 <TIM_OC3_SetConfig+0xe8>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2203      	movs	r2, #3
 80094ec:	4393      	bics	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	4a29      	ldr	r2, [pc, #164]	@ (80095a4 <TIM_OC3_SetConfig+0xec>)
 80094fe:	4013      	ands	r3, r2
 8009500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	021b      	lsls	r3, r3, #8
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	4313      	orrs	r3, r2
 800950c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a25      	ldr	r2, [pc, #148]	@ (80095a8 <TIM_OC3_SetConfig+0xf0>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d10d      	bne.n	8009532 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	4a24      	ldr	r2, [pc, #144]	@ (80095ac <TIM_OC3_SetConfig+0xf4>)
 800951a:	4013      	ands	r3, r2
 800951c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	4a20      	ldr	r2, [pc, #128]	@ (80095b0 <TIM_OC3_SetConfig+0xf8>)
 800952e:	4013      	ands	r3, r2
 8009530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a1c      	ldr	r2, [pc, #112]	@ (80095a8 <TIM_OC3_SetConfig+0xf0>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00b      	beq.n	8009552 <TIM_OC3_SetConfig+0x9a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a1d      	ldr	r2, [pc, #116]	@ (80095b4 <TIM_OC3_SetConfig+0xfc>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <TIM_OC3_SetConfig+0x9a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a1c      	ldr	r2, [pc, #112]	@ (80095b8 <TIM_OC3_SetConfig+0x100>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <TIM_OC3_SetConfig+0x9a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a1b      	ldr	r2, [pc, #108]	@ (80095bc <TIM_OC3_SetConfig+0x104>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d113      	bne.n	800957a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4a1a      	ldr	r2, [pc, #104]	@ (80095c0 <TIM_OC3_SetConfig+0x108>)
 8009556:	4013      	ands	r3, r2
 8009558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	4a19      	ldr	r2, [pc, #100]	@ (80095c4 <TIM_OC3_SetConfig+0x10c>)
 800955e:	4013      	ands	r3, r2
 8009560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	621a      	str	r2, [r3, #32]
}
 8009594:	46c0      	nop			@ (mov r8, r8)
 8009596:	46bd      	mov	sp, r7
 8009598:	b006      	add	sp, #24
 800959a:	bd80      	pop	{r7, pc}
 800959c:	fffffeff 	.word	0xfffffeff
 80095a0:	fffeff8f 	.word	0xfffeff8f
 80095a4:	fffffdff 	.word	0xfffffdff
 80095a8:	40012c00 	.word	0x40012c00
 80095ac:	fffff7ff 	.word	0xfffff7ff
 80095b0:	fffffbff 	.word	0xfffffbff
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800
 80095c0:	ffffefff 	.word	0xffffefff
 80095c4:	ffffdfff 	.word	0xffffdfff

080095c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	4a26      	ldr	r2, [pc, #152]	@ (8009678 <TIM_OC4_SetConfig+0xb0>)
 80095de:	401a      	ands	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4a22      	ldr	r2, [pc, #136]	@ (800967c <TIM_OC4_SetConfig+0xb4>)
 80095f4:	4013      	ands	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4a21      	ldr	r2, [pc, #132]	@ (8009680 <TIM_OC4_SetConfig+0xb8>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4a1d      	ldr	r2, [pc, #116]	@ (8009684 <TIM_OC4_SetConfig+0xbc>)
 8009610:	4013      	ands	r3, r2
 8009612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	031b      	lsls	r3, r3, #12
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	4313      	orrs	r3, r2
 800961e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a19      	ldr	r2, [pc, #100]	@ (8009688 <TIM_OC4_SetConfig+0xc0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00b      	beq.n	8009640 <TIM_OC4_SetConfig+0x78>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a18      	ldr	r2, [pc, #96]	@ (800968c <TIM_OC4_SetConfig+0xc4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d007      	beq.n	8009640 <TIM_OC4_SetConfig+0x78>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a17      	ldr	r2, [pc, #92]	@ (8009690 <TIM_OC4_SetConfig+0xc8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC4_SetConfig+0x78>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a16      	ldr	r2, [pc, #88]	@ (8009694 <TIM_OC4_SetConfig+0xcc>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d109      	bne.n	8009654 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	4a15      	ldr	r2, [pc, #84]	@ (8009698 <TIM_OC4_SetConfig+0xd0>)
 8009644:	4013      	ands	r3, r2
 8009646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	019b      	lsls	r3, r3, #6
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	621a      	str	r2, [r3, #32]
}
 800966e:	46c0      	nop			@ (mov r8, r8)
 8009670:	46bd      	mov	sp, r7
 8009672:	b006      	add	sp, #24
 8009674:	bd80      	pop	{r7, pc}
 8009676:	46c0      	nop			@ (mov r8, r8)
 8009678:	ffffefff 	.word	0xffffefff
 800967c:	feff8fff 	.word	0xfeff8fff
 8009680:	fffffcff 	.word	0xfffffcff
 8009684:	ffffdfff 	.word	0xffffdfff
 8009688:	40012c00 	.word	0x40012c00
 800968c:	40014000 	.word	0x40014000
 8009690:	40014400 	.word	0x40014400
 8009694:	40014800 	.word	0x40014800
 8009698:	ffffbfff 	.word	0xffffbfff

0800969c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	4a23      	ldr	r2, [pc, #140]	@ (8009740 <TIM_OC5_SetConfig+0xa4>)
 80096b2:	401a      	ands	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009744 <TIM_OC5_SetConfig+0xa8>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009748 <TIM_OC5_SetConfig+0xac>)
 80096da:	4013      	ands	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	041b      	lsls	r3, r3, #16
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a17      	ldr	r2, [pc, #92]	@ (800974c <TIM_OC5_SetConfig+0xb0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00b      	beq.n	800970a <TIM_OC5_SetConfig+0x6e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a16      	ldr	r2, [pc, #88]	@ (8009750 <TIM_OC5_SetConfig+0xb4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d007      	beq.n	800970a <TIM_OC5_SetConfig+0x6e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a15      	ldr	r2, [pc, #84]	@ (8009754 <TIM_OC5_SetConfig+0xb8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d003      	beq.n	800970a <TIM_OC5_SetConfig+0x6e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a14      	ldr	r2, [pc, #80]	@ (8009758 <TIM_OC5_SetConfig+0xbc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d109      	bne.n	800971e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	4a0c      	ldr	r2, [pc, #48]	@ (8009740 <TIM_OC5_SetConfig+0xa4>)
 800970e:	4013      	ands	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	021b      	lsls	r3, r3, #8
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	4313      	orrs	r3, r2
 800971c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	621a      	str	r2, [r3, #32]
}
 8009738:	46c0      	nop			@ (mov r8, r8)
 800973a:	46bd      	mov	sp, r7
 800973c:	b006      	add	sp, #24
 800973e:	bd80      	pop	{r7, pc}
 8009740:	fffeffff 	.word	0xfffeffff
 8009744:	fffeff8f 	.word	0xfffeff8f
 8009748:	fffdffff 	.word	0xfffdffff
 800974c:	40012c00 	.word	0x40012c00
 8009750:	40014000 	.word	0x40014000
 8009754:	40014400 	.word	0x40014400
 8009758:	40014800 	.word	0x40014800

0800975c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	4a24      	ldr	r2, [pc, #144]	@ (8009804 <TIM_OC6_SetConfig+0xa8>)
 8009772:	401a      	ands	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4a20      	ldr	r2, [pc, #128]	@ (8009808 <TIM_OC6_SetConfig+0xac>)
 8009788:	4013      	ands	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	021b      	lsls	r3, r3, #8
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	4a1c      	ldr	r2, [pc, #112]	@ (800980c <TIM_OC6_SetConfig+0xb0>)
 800979c:	4013      	ands	r3, r2
 800979e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	051b      	lsls	r3, r3, #20
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a18      	ldr	r2, [pc, #96]	@ (8009810 <TIM_OC6_SetConfig+0xb4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d00b      	beq.n	80097cc <TIM_OC6_SetConfig+0x70>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a17      	ldr	r2, [pc, #92]	@ (8009814 <TIM_OC6_SetConfig+0xb8>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d007      	beq.n	80097cc <TIM_OC6_SetConfig+0x70>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a16      	ldr	r2, [pc, #88]	@ (8009818 <TIM_OC6_SetConfig+0xbc>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d003      	beq.n	80097cc <TIM_OC6_SetConfig+0x70>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a15      	ldr	r2, [pc, #84]	@ (800981c <TIM_OC6_SetConfig+0xc0>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d109      	bne.n	80097e0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	4a14      	ldr	r2, [pc, #80]	@ (8009820 <TIM_OC6_SetConfig+0xc4>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	029b      	lsls	r3, r3, #10
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	621a      	str	r2, [r3, #32]
}
 80097fa:	46c0      	nop			@ (mov r8, r8)
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b006      	add	sp, #24
 8009800:	bd80      	pop	{r7, pc}
 8009802:	46c0      	nop			@ (mov r8, r8)
 8009804:	ffefffff 	.word	0xffefffff
 8009808:	feff8fff 	.word	0xfeff8fff
 800980c:	ffdfffff 	.word	0xffdfffff
 8009810:	40012c00 	.word	0x40012c00
 8009814:	40014000 	.word	0x40014000
 8009818:	40014400 	.word	0x40014400
 800981c:	40014800 	.word	0x40014800
 8009820:	fffbffff 	.word	0xfffbffff

08009824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	2201      	movs	r2, #1
 800983c:	4393      	bics	r3, r2
 800983e:	001a      	movs	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	22f0      	movs	r2, #240	@ 0xf0
 800984e:	4393      	bics	r3, r2
 8009850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	220a      	movs	r2, #10
 8009860:	4393      	bics	r3, r2
 8009862:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4313      	orrs	r3, r2
 800986a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	621a      	str	r2, [r3, #32]
}
 8009878:	46c0      	nop			@ (mov r8, r8)
 800987a:	46bd      	mov	sp, r7
 800987c:	b006      	add	sp, #24
 800987e:	bd80      	pop	{r7, pc}

08009880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	2210      	movs	r2, #16
 8009898:	4393      	bics	r3, r2
 800989a:	001a      	movs	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	4a0d      	ldr	r2, [pc, #52]	@ (80098e0 <TIM_TI2_ConfigInputStage+0x60>)
 80098aa:	4013      	ands	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	031b      	lsls	r3, r3, #12
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	22a0      	movs	r2, #160	@ 0xa0
 80098bc:	4393      	bics	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	46c0      	nop			@ (mov r8, r8)
 80098d8:	46bd      	mov	sp, r7
 80098da:	b006      	add	sp, #24
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	46c0      	nop			@ (mov r8, r8)
 80098e0:	ffff0fff 	.word	0xffff0fff

080098e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4a08      	ldr	r2, [pc, #32]	@ (8009918 <TIM_ITRx_SetConfig+0x34>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	2207      	movs	r2, #7
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	609a      	str	r2, [r3, #8]
}
 800990e:	46c0      	nop			@ (mov r8, r8)
 8009910:	46bd      	mov	sp, r7
 8009912:	b004      	add	sp, #16
 8009914:	bd80      	pop	{r7, pc}
 8009916:	46c0      	nop			@ (mov r8, r8)
 8009918:	ffcfff8f 	.word	0xffcfff8f

0800991c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	4a09      	ldr	r2, [pc, #36]	@ (8009958 <TIM_ETR_SetConfig+0x3c>)
 8009934:	4013      	ands	r3, r2
 8009936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	021a      	lsls	r2, r3, #8
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	431a      	orrs	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4313      	orrs	r3, r2
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	4313      	orrs	r3, r2
 8009948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	609a      	str	r2, [r3, #8]
}
 8009950:	46c0      	nop			@ (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b006      	add	sp, #24
 8009956:	bd80      	pop	{r7, pc}
 8009958:	ffff00ff 	.word	0xffff00ff

0800995c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	221f      	movs	r2, #31
 800996c:	4013      	ands	r3, r2
 800996e:	2201      	movs	r2, #1
 8009970:	409a      	lsls	r2, r3
 8009972:	0013      	movs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	43d2      	mvns	r2, r2
 800997e:	401a      	ands	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	211f      	movs	r1, #31
 800998c:	400b      	ands	r3, r1
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4099      	lsls	r1, r3
 8009992:	000b      	movs	r3, r1
 8009994:	431a      	orrs	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	621a      	str	r2, [r3, #32]
}
 800999a:	46c0      	nop			@ (mov r8, r8)
 800999c:	46bd      	mov	sp, r7
 800999e:	b006      	add	sp, #24
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	223c      	movs	r2, #60	@ 0x3c
 80099b2:	5c9b      	ldrb	r3, [r3, r2]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e05a      	b.n	8009a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	223c      	movs	r2, #60	@ 0x3c
 80099c0:	2101      	movs	r1, #1
 80099c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	223d      	movs	r2, #61	@ 0x3d
 80099c8:	2102      	movs	r1, #2
 80099ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a26      	ldr	r2, [pc, #152]	@ (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d108      	bne.n	80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4a25      	ldr	r2, [pc, #148]	@ (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2270      	movs	r2, #112	@ 0x70
 80099fc:	4393      	bics	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a19      	ldr	r2, [pc, #100]	@ (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d014      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	2380      	movs	r3, #128	@ 0x80
 8009a22:	05db      	lsls	r3, r3, #23
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d00e      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a15      	ldr	r2, [pc, #84]	@ (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a14      	ldr	r2, [pc, #80]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a12      	ldr	r2, [pc, #72]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d10c      	bne.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2280      	movs	r2, #128	@ 0x80
 8009a4a:	4393      	bics	r3, r2
 8009a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	223d      	movs	r2, #61	@ 0x3d
 8009a64:	2101      	movs	r1, #1
 8009a66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	223c      	movs	r2, #60	@ 0x3c
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	0018      	movs	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b004      	add	sp, #16
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	46c0      	nop			@ (mov r8, r8)
 8009a7c:	40012c00 	.word	0x40012c00
 8009a80:	ff0fffff 	.word	0xff0fffff
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40014000 	.word	0x40014000

08009a90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009a98:	4b06      	ldr	r3, [pc, #24]	@ (8009ab4 <USB_DisableGlobalInt+0x24>)
 8009a9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	43d2      	mvns	r2, r2
 8009aa4:	401a      	ands	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	0018      	movs	r0, r3
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b004      	add	sp, #16
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	0000bf80 	.word	0x0000bf80

08009ab8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	000a      	movs	r2, r1
 8009ac2:	1cfb      	adds	r3, r7, #3
 8009ac4:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8009ac6:	1cfb      	adds	r3, r7, #3
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	085a      	lsrs	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	641a      	str	r2, [r3, #64]	@ 0x40
 8009ada:	e00d      	b.n	8009af8 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8009adc:	1cfb      	adds	r3, r7, #3
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d107      	bne.n	8009af4 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae8:	2280      	movs	r2, #128	@ 0x80
 8009aea:	0612      	lsls	r2, r2, #24
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	641a      	str	r2, [r3, #64]	@ 0x40
 8009af2:	e001      	b.n	8009af8 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e000      	b.n	8009afa <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	0018      	movs	r0, r3
 8009afc:	46bd      	mov	sp, r7
 8009afe:	b002      	add	sp, #8
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009b02:	b084      	sub	sp, #16
 8009b04:	b5b0      	push	{r4, r5, r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	2004      	movs	r0, #4
 8009b0e:	2420      	movs	r4, #32
 8009b10:	1900      	adds	r0, r0, r4
 8009b12:	19c0      	adds	r0, r0, r7
 8009b14:	6001      	str	r1, [r0, #0]
 8009b16:	6042      	str	r2, [r0, #4]
 8009b18:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b24:	2201      	movs	r2, #1
 8009b26:	4393      	bics	r3, r2
 8009b28:	001a      	movs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009b2e:	250f      	movs	r5, #15
 8009b30:	197c      	adds	r4, r7, r5
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2100      	movs	r1, #0
 8009b36:	0018      	movs	r0, r3
 8009b38:	f7ff ffbe 	bl	8009ab8 <USB_SetCurrentMode>
 8009b3c:	0003      	movs	r3, r0
 8009b3e:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8009b46:	197b      	adds	r3, r7, r5
 8009b48:	781b      	ldrb	r3, [r3, #0]
}
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	b004      	add	sp, #16
 8009b50:	bcb0      	pop	{r4, r5, r7}
 8009b52:	bc08      	pop	{r3}
 8009b54:	b004      	add	sp, #16
 8009b56:	4718      	bx	r3

08009b58 <memset>:
 8009b58:	0003      	movs	r3, r0
 8009b5a:	1882      	adds	r2, r0, r2
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d100      	bne.n	8009b62 <memset+0xa>
 8009b60:	4770      	bx	lr
 8009b62:	7019      	strb	r1, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	e7f9      	b.n	8009b5c <memset+0x4>

08009b68 <__libc_init_array>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	4c0c      	ldr	r4, [pc, #48]	@ (8009ba0 <__libc_init_array+0x38>)
 8009b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8009ba4 <__libc_init_array+0x3c>)
 8009b70:	1b64      	subs	r4, r4, r5
 8009b72:	10a4      	asrs	r4, r4, #2
 8009b74:	42a6      	cmp	r6, r4
 8009b76:	d109      	bne.n	8009b8c <__libc_init_array+0x24>
 8009b78:	2600      	movs	r6, #0
 8009b7a:	f000 f819 	bl	8009bb0 <_init>
 8009b7e:	4c0a      	ldr	r4, [pc, #40]	@ (8009ba8 <__libc_init_array+0x40>)
 8009b80:	4d0a      	ldr	r5, [pc, #40]	@ (8009bac <__libc_init_array+0x44>)
 8009b82:	1b64      	subs	r4, r4, r5
 8009b84:	10a4      	asrs	r4, r4, #2
 8009b86:	42a6      	cmp	r6, r4
 8009b88:	d105      	bne.n	8009b96 <__libc_init_array+0x2e>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	00b3      	lsls	r3, r6, #2
 8009b8e:	58eb      	ldr	r3, [r5, r3]
 8009b90:	4798      	blx	r3
 8009b92:	3601      	adds	r6, #1
 8009b94:	e7ee      	b.n	8009b74 <__libc_init_array+0xc>
 8009b96:	00b3      	lsls	r3, r6, #2
 8009b98:	58eb      	ldr	r3, [r5, r3]
 8009b9a:	4798      	blx	r3
 8009b9c:	3601      	adds	r6, #1
 8009b9e:	e7f2      	b.n	8009b86 <__libc_init_array+0x1e>
 8009ba0:	08009f58 	.word	0x08009f58
 8009ba4:	08009f58 	.word	0x08009f58
 8009ba8:	08009f5c 	.word	0x08009f5c
 8009bac:	08009f58 	.word	0x08009f58

08009bb0 <_init>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr

08009bbc <_fini>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	46c0      	nop			@ (mov r8, r8)
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr

08009bc8 <__FLASH_Program_Fast_veneer>:
 8009bc8:	b401      	push	{r0}
 8009bca:	4802      	ldr	r0, [pc, #8]	@ (8009bd4 <__FLASH_Program_Fast_veneer+0xc>)
 8009bcc:	4684      	mov	ip, r0
 8009bce:	bc01      	pop	{r0}
 8009bd0:	4760      	bx	ip
 8009bd2:	bf00      	nop
 8009bd4:	200000a9 	.word	0x200000a9

Disassembly of section .data:

20000000 <device_id_index>:
20000000:	00000040                                @...

20000004 <pooptest>:
20000004:	00000001                                ....

20000008 <flashAddress>:
20000008:	0803f010                                ....

2000000c <morse_table.0>:
2000000c:	08009be0 08009be4 08009bec 08009bf4     ................
2000001c:	08009bf8 08009bfc 08009c04 08009c08     ................
2000002c:	08009c10 08009c14 08009c1c 08009c20     ............ ...
2000003c:	08009c28 08009c2c 08009c30 08009c34     (...,...0...4...
2000004c:	08009c3c 08009c44 08009c48 08009c4c     <...D...H...L...
2000005c:	08009c50 08009c54 08009c5c 08009c60     P...T...\...`...
2000006c:	08009c68 08009c70 08009c78 08009c80     h...p...x.......
2000007c:	08009c88 08009c90 08009c98 08009ca0     ................
2000008c:	08009ca8 08009cb0 08009cb8 08009cc0     ................

2000009c <SystemCoreClock>:
2000009c:	00f42400                                .$..

200000a0 <uwTickPrio>:
200000a0:	00000004                                ....

200000a4 <uwTickFreq>:
200000a4:	00000001                                ....

200000a8 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000a8:	b580      	push	{r7, lr}
200000aa:	b088      	sub	sp, #32
200000ac:	af00      	add	r7, sp, #0
200000ae:	6078      	str	r0, [r7, #4]
200000b0:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000b2:	231f      	movs	r3, #31
200000b4:	18fb      	adds	r3, r7, r3
200000b6:	2200      	movs	r2, #0
200000b8:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000be:	683b      	ldr	r3, [r7, #0]
200000c0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000c2:	4b1a      	ldr	r3, [pc, #104]	@ (2000012c <FLASH_Program_Fast+0x84>)
200000c4:	695a      	ldr	r2, [r3, #20]
200000c6:	4b19      	ldr	r3, [pc, #100]	@ (2000012c <FLASH_Program_Fast+0x84>)
200000c8:	2180      	movs	r1, #128	@ 0x80
200000ca:	02c9      	lsls	r1, r1, #11
200000cc:	430a      	orrs	r2, r1
200000ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000d0:	f3ef 8310 	mrs	r3, PRIMASK
200000d4:	60fb      	str	r3, [r7, #12]
  return(result);
200000d6:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000da:	b672      	cpsid	i
}
200000dc:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000de:	e00f      	b.n	20000100 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000e0:	697a      	ldr	r2, [r7, #20]
200000e2:	69bb      	ldr	r3, [r7, #24]
200000e4:	6812      	ldr	r2, [r2, #0]
200000e6:	601a      	str	r2, [r3, #0]
    src += 4U;
200000e8:	697b      	ldr	r3, [r7, #20]
200000ea:	3304      	adds	r3, #4
200000ec:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000ee:	69bb      	ldr	r3, [r7, #24]
200000f0:	3304      	adds	r3, #4
200000f2:	61bb      	str	r3, [r7, #24]
    index++;
200000f4:	211f      	movs	r1, #31
200000f6:	187b      	adds	r3, r7, r1
200000f8:	781a      	ldrb	r2, [r3, #0]
200000fa:	187b      	adds	r3, r7, r1
200000fc:	3201      	adds	r2, #1
200000fe:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000100:	231f      	movs	r3, #31
20000102:	18fb      	adds	r3, r7, r3
20000104:	781b      	ldrb	r3, [r3, #0]
20000106:	2b3f      	cmp	r3, #63	@ 0x3f
20000108:	d9ea      	bls.n	200000e0 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
2000010a:	46c0      	nop			@ (mov r8, r8)
2000010c:	4b07      	ldr	r3, [pc, #28]	@ (2000012c <FLASH_Program_Fast+0x84>)
2000010e:	691a      	ldr	r2, [r3, #16]
20000110:	23c0      	movs	r3, #192	@ 0xc0
20000112:	029b      	lsls	r3, r3, #10
20000114:	4013      	ands	r3, r2
20000116:	d1f9      	bne.n	2000010c <FLASH_Program_Fast+0x64>
20000118:	693b      	ldr	r3, [r7, #16]
2000011a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000011c:	68bb      	ldr	r3, [r7, #8]
2000011e:	f383 8810 	msr	PRIMASK, r3
}
20000122:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000124:	46c0      	nop			@ (mov r8, r8)
20000126:	46bd      	mov	sp, r7
20000128:	b008      	add	sp, #32
2000012a:	bd80      	pop	{r7, pc}
2000012c:	40022000 	.word	0x40022000
